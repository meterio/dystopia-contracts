{
  "address": "0x86FDdc06Abb5b0A0F2CBCC133880a55F80038CB8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "veDistAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voterAmount",
          "type": "uint256"
        }
      ],
      "name": "Send",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ve",
      "outputs": [
        {
          "internalType": "contract IVe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeperiod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_veDistPerWeek",
          "type": "uint256"
        }
      ],
      "name": "adminSetVeDistPerWeek",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_voterPerWeek",
          "type": "uint256"
        }
      ],
      "name": "adminSetVoterPerWeek",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRoleMemberIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__ve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "removeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_activeperiod",
          "type": "uint256"
        }
      ],
      "name": "setActiveperiod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gaugeOrBribe",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_checkAmount",
          "type": "bool"
        }
      ],
      "name": "setCheckAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veDistPerWeek",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voterPerWeek",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weeklyEmission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "whiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb40e52a1210a983e5405dcf7ed1e91ebcb4ccecb76220913c08dc84cecf38a5f",
  "receipt": {
    "to": null,
    "from": "0xf98993Ea9f8603451d7CA231aEd91657BeD6dF75",
    "contractAddress": "0x86FDdc06Abb5b0A0F2CBCC133880a55F80038CB8",
    "transactionIndex": 4,
    "gasUsed": "1300720",
    "logsBloom": "0x
    "blockHash": "0x4e09407bfd186c581f35cec549e54a3862c36a329eaa6c7e4adcdaa9967f1654",
    "transactionHash": "0xb40e52a1210a983e5405dcf7ed1e91ebcb4ccecb76220913c08dc84cecf38a5f",
    "logs": [],
    "blockNumber": 3514522,
    "cumulativeGasUsed": "1722399",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f0e188e35fd96b365cb9bd616b596351",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veDistAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voterAmount\",\"type\":\"uint256\"}],\"name\":\"Send\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ve\",\"outputs\":[{\"internalType\":\"contract IVe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeperiod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_veDistPerWeek\",\"type\":\"uint256\"}],\"name\":\"adminSetVeDistPerWeek\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voterPerWeek\",\"type\":\"uint256\"}],\"name\":\"adminSetVoterPerWeek\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRoleMemberIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeperiod\",\"type\":\"uint256\"}],\"name\":\"setActiveperiod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gaugeOrBribe\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_checkAmount\",\"type\":\"bool\"}],\"name\":\"setCheckAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veDistPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voterPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weeklyEmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"whiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getRoleMemberIndex(bytes32,address)\":{\"details\":\"Returns the index of the account that have `role`.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"stateVariables\":{\"veDistPerWeek\":{\"details\":\"veDist per week\"},\"voterPerWeek\":{\"details\":\"voter per week\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/token/MinterUpgradeable.sol\":\"MinterUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/token/MinterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../lib/Math.sol\\\";\\nimport \\\"../../interface/IVe.sol\\\";\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IVoter.sol\\\";\\nimport \\\"../../interface/IVeDist.sol\\\";\\nimport \\\"../../interface/IController.sol\\\";\\nimport \\\"../../lib/AccessControl.sol\\\";\\nimport \\\"../../lib/Initializable.sol\\\";\\n\\ncontract MinterUpgradeable is AccessControl, Initializable {\\n    uint256 internal constant _WEEK = 86400 * 7; // allows minting once per month\\n\\n    IERC20 public _token;\\n    IVe public _ve;\\n    address public controller;\\n    uint256 public activeperiod;\\n    /// @dev veDist per week\\n    uint public veDistPerWeek;\\n    /// @dev voter per week\\n    uint public voterPerWeek;\\n\\n    event Send(\\n        address indexed sender,\\n        uint256 veDistAmount,\\n        uint256 voterAmount\\n    );\\n\\n    function initialize(\\n        address __ve,\\n        address __controller,\\n        address admin\\n    ) public initializer {\\n        _token = IERC20(IVe(__ve).token());\\n        _ve = IVe(__ve);\\n        controller = __controller;\\n        activeperiod = (block.timestamp / _WEEK) * _WEEK;\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"forbidden\\\");\\n        _;\\n    }\\n\\n    function adminSetVeDistPerWeek(uint256 _veDistPerWeek) public onlyAdmin {\\n        veDistPerWeek = _veDistPerWeek;\\n    }\\n\\n    function adminSetVoterPerWeek(uint256 _voterPerWeek) public onlyAdmin {\\n        voterPerWeek = _voterPerWeek;\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyAdmin {\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(0x40c10f19, to, amount)\\n        );\\n        require(success && abi.decode(data, (bool)), \\\"mint fail\\\");\\n    }\\n\\n    function withdraw(uint256 amount) public onlyAdmin {\\n        require(_token.transfer(msg.sender, amount), \\\"Transfer Fail\\\");\\n    }\\n\\n    function _veDist() internal view returns (IVeDist) {\\n        return IVeDist(IController(controller).veDist());\\n    }\\n\\n    function _voter() internal view returns (IVoter) {\\n        return IVoter(IController(controller).voter());\\n    }\\n\\n    function setActiveperiod(uint256 _activeperiod) public onlyAdmin {\\n        activeperiod = _activeperiod;\\n    }\\n\\n    function whiteList(address[] memory tokens) public onlyAdmin {\\n        _voter().init(tokens, address(this));\\n    }\\n\\n    function setCheckAmount(address _gaugeOrBribe, bool _checkAmount) external {\\n        _voter().setCheckAmount(_gaugeOrBribe, _checkAmount);\\n    }\\n\\n    function removeWhitelist(address[] memory tokens) public onlyAdmin {\\n        _voter().removeWhitelist(tokens);\\n    }\\n\\n    function updatePeriod() external onlyAdmin returns (uint256) {\\n        uint256 _period = activeperiod;\\n        if (block.timestamp >= _period + _WEEK) {\\n            _period = (block.timestamp / _WEEK) * _WEEK;\\n            activeperiod = _period;\\n\\n            uint256 _balanceOf = _token.balanceOf(address(this));\\n\\n            require(\\n                _balanceOf >= veDistPerWeek + voterPerWeek,\\n                \\\"Insufficient balance\\\"\\n            );\\n            if (veDistPerWeek > 0) {\\n                require(\\n                    _token.transfer(address(_veDist()), veDistPerWeek),\\n                    \\\"Transfer Fail\\\"\\n                );\\n                _veDist().checkpointToken();\\n                _veDist().checkpointTotalSupply();\\n            }\\n\\n            _token.approve(address(_voter()), voterPerWeek);\\n            _voter().notifyRewardAmount(voterPerWeek);\\n\\n            emit Send(msg.sender, veDistPerWeek, voterPerWeek);\\n        }\\n        return _period;\\n    }\\n\\n    function weeklyEmission() external view returns (uint) {\\n        return veDistPerWeek + voterPerWeek;\\n    }\\n}\\n\",\"keccak256\":\"0x5214530746fc9692f204e571a8598bc9b11719123b349743eadc80938373ee59\",\"license\":\"MIT\"},\"contracts/interface/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IController {\\n    function veDist() external view returns (address);\\n\\n    function voter() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcf1f651f1b13563a71728782dfb82970719e4feb46141d0f46f6aa2159983900\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/interface/IVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVe {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n     * What we can do is to extrapolate ***At functions */\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint end;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function createLockFor(\\n        uint,\\n        uint,\\n        address\\n    ) external returns (uint);\\n\\n    function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n    function epoch() external view returns (uint);\\n\\n    function userPointHistory(uint tokenId, uint loc)\\n        external\\n        view\\n        returns (Point memory);\\n\\n    function pointHistory(uint loc) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function depositFor(uint tokenId, uint value) external;\\n\\n    function attachToken(uint tokenId) external;\\n\\n    function detachToken(uint tokenId) external;\\n\\n    function voting(uint tokenId) external;\\n\\n    function abstain(uint tokenId) external;\\n}\\n\",\"keccak256\":\"0x93a173b039792ac393165aab7a92882d0cc1d82257c4dfe13ee26631fe46e52a\",\"license\":\"MIT\"},\"contracts/interface/IVeDist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVeDist {\\n    function checkpointToken() external;\\n\\n    function checkpointTotalSupply() external;\\n}\\n\",\"keccak256\":\"0xdd994472162ec6dc2bfab91bc1aeb7be25d4126d91b7576bf54e5bf92b462482\",\"license\":\"MIT\"},\"contracts/interface/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVoter {\\n    function ve() external view returns (address);\\n\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n\\n    function emitDeposit(uint _tokenId, address account, uint amount) external;\\n\\n    function emitWithdraw(uint _tokenId, address account, uint amount) external;\\n\\n    function distribute(address _gauge) external;\\n\\n    function notifyRewardAmount(uint amount) external;\\n\\n    function init(address[] memory _tokens, address _minter) external;\\n\\n    function removeWhitelist(address[] memory _tokens) external;\\n\\n    function setCheckAmount(address _gaugeOrBribe, bool _checkAmount) external;\\n}\\n\",\"keccak256\":\"0x8292490094879fe5e6216f106739c43903190c5ea44d9917fe7876eed5fd803d\",\"license\":\"MIT\"},\"contracts/lib/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n// This is adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/access/AccessControl.sol\\n// The only difference is added getRoleMemberIndex(bytes32 role, address account) function.\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the index of the account that have `role`.\\n     */\\n    function getRoleMemberIndex(bytes32 role, address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            _roles[role].members._inner._indexes[\\n                bytes32(uint256(uint160(account)))\\n            ];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(\\n            hasRole(_roles[role].adminRole, msg.sender),\\n            \\\"AccessControl: sender must be an admin to grant\\\"\\n        );\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(\\n            hasRole(_roles[role].adminRole, msg.sender),\\n            \\\"AccessControl: sender must be an admin to revoke\\\"\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(\\n            account == msg.sender,\\n            \\\"AccessControl: can only renounce roles for self\\\"\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x65937c4d93190917802d83317ef2a5770419bc8ef9cf21860d74ec0f7a0ca1b6\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x284fcdaef2f20ec54759bfb0821ee3a3459a1f0bc302b29e7fcc3c2f42e728df\",\"license\":\"MIT\"},\"contracts/lib/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // IERC20 Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set)\\n        internal\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa4c9119d607827b0e842c212f71a5e6d2f6fc3c343c312c3c62954f6eae1d5e6\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x38183be1332f4c833a8279b7d913f523431e50aa59f4f513020b82628c7d6c0e\",\"license\":\"MIT\"},\"contracts/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary Math {\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function positiveInt128(int128 value) internal pure returns (int128) {\\n        return value < 0 ? int128(0) : value;\\n    }\\n\\n    function closeTo(\\n        uint a,\\n        uint b,\\n        uint target\\n    ) internal pure returns (bool) {\\n        if (a > b) {\\n            if (a - b <= target) {\\n                return true;\\n            }\\n        } else {\\n            if (b - a <= target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a50db5ef01ef869b1a7df3cf485d6c87473549c70fbefc54bdea34f8bc78538\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611693806100206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063a217fddf116100de578063d651a83d11610097578063e81a062411610071578063e81a062414610343578063ea25119c14610356578063ecd0c0c314610369578063f77c47911461038257600080fd5b8063d651a83d14610329578063d70142fb14610332578063e52522b61461033a57600080fd5b8063a217fddf146102cd578063a83627de146102d5578063baa98bbd146102dd578063c0c53b8b146102f0578063ca15c87314610303578063d547741f1461031657600080fd5b80634e0df3f61161014b5780638dd598fb116101255780638dd598fb146102595780639010d07c1461028457806391c5f4a61461029757806391d14854146102aa57600080fd5b80634e0df3f61461022a578063713efc991461023d5780638053227a1461024657600080fd5b80632324521614610193578063248a9ca3146101a85780632e1a7d4d146101de5780632f2ff15d146101f157806336568abe1461020457806340c10f1914610217575b600080fd5b6101a66101a1366004611296565b610395565b005b6101cb6101b636600461135b565b60009081526020819052604090206002015490565b6040519081526020015b60405180910390f35b6101a66101ec36600461135b565b61042d565b6101a66101ff366004611374565b61050d565b6101a6610212366004611374565b61059b565b6101a66102253660046113a4565b610615565b6101cb610238366004611374565b610740565b6101cb60045481565b6101a66102543660046113de565b61076b565b60025461026c906001600160a01b031681565b6040516001600160a01b0390911681526020016101d5565b61026c61029236600461140c565b6107dc565b6101a66102a5366004611296565b6107fb565b6102bd6102b8366004611374565b610857565b60405190151581526020016101d5565b6101cb600081565b6101cb61086f565b6101a66102eb36600461135b565b610c68565b6101a66102fe36600461142e565b610c94565b6101cb61031136600461135b565b610e21565b6101a6610324366004611374565b610e38565b6101cb60055481565b6101cb610eb9565b6101cb60065481565b6101a661035136600461135b565b610ecb565b6101a661036436600461135b565b610ef7565b60015461026c906201000090046001600160a01b031681565b60035461026c906001600160a01b031681565b6103a0600033610857565b6103c55760405162461bcd60e51b81526004016103bc90611479565b60405180910390fd5b6103cd610f23565b6001600160a01b03166323245216826040518263ffffffff1660e01b81526004016103f891906114e0565b600060405180830381600087803b15801561041257600080fd5b505af1158015610426573d6000803e3d6000fd5b5050505050565b610438600033610857565b6104545760405162461bcd60e51b81526004016103bc90611479565b60015460405163a9059cbb60e01b815233600482015260248101839052620100009091046001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156104aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ce91906114f3565b61050a5760405162461bcd60e51b815260206004820152600d60248201526c151c985b9cd9995c8811985a5b609a1b60448201526064016103bc565b50565b6000828152602081905260409020600201546105299033610857565b61058d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526e0818591b5a5b881d1bc819dc985b9d608a1b60648201526084016103bc565b6105978282610f91565b5050565b6001600160a01b038116331461060b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016103bc565b6105978282610fea565b610620600033610857565b61063c5760405162461bcd60e51b81526004016103bc90611479565b600154604080516001600160a01b038581166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b03166340c10f1960e01b1790529151600093849362010000909104169161069f91611510565b6000604051808303816000865af19150503d80600081146106dc576040519150601f19603f3d011682016040523d82523d6000602084013e6106e1565b606091505b509150915081801561070257508080602001905181019061070291906114f3565b61073a5760405162461bcd60e51b81526020600482015260096024820152681b5a5b9d0819985a5b60ba1b60448201526064016103bc565b50505050565b6000828152602081815260408083206001600160a01b03851684526001019091529020545b92915050565b610773610f23565b604051634029913d60e11b81526001600160a01b03848116600483015283151560248301529190911690638053227a90604401600060405180830381600087803b1580156107c057600080fd5b505af11580156107d4573d6000803e3d6000fd5b505050505050565b60008281526020819052604081206107f49083611043565b9392505050565b610806600033610857565b6108225760405162461bcd60e51b81526004016103bc90611479565b61082a610f23565b6001600160a01b0316637e1ddf6482306040518363ffffffff1660e01b81526004016103f892919061154b565b60008281526020819052604081206107f4908361104f565b600061087b8133610857565b6108975760405162461bcd60e51b81526004016103bc90611479565b6004546108a762093a808261158b565b4210610c635762093a806108bb81426115a3565b6108c591906115c5565b60048181556001546040516370a0823160e01b815230928101929092529192506000916201000090046001600160a01b0316906370a0823190602401602060405180830381865afa15801561091e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094291906115e4565b9050600654600554610954919061158b565b81101561099a5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016103bc565b60055415610b24576001546201000090046001600160a01b031663a9059cbb6109c1611071565b6005546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3391906114f3565b610a6f5760405162461bcd60e51b815260206004820152600d60248201526c151c985b9cd9995c8811985a5b609a1b60448201526064016103bc565b610a77611071565b6001600160a01b031663bee5dc326040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ab157600080fd5b505af1158015610ac5573d6000803e3d6000fd5b50505050610ad1611071565b6001600160a01b031663326a94076040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b0b57600080fd5b505af1158015610b1f573d6000803e3d6000fd5b505050505b6001546201000090046001600160a01b031663095ea7b3610b43610f23565b6006546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb591906114f3565b50610bbe610f23565b6001600160a01b0316633c6b16ab6006546040518263ffffffff1660e01b8152600401610bed91815260200190565b600060405180830381600087803b158015610c0757600080fd5b505af1158015610c1b573d6000803e3d6000fd5b50506005546006546040805192835260208301919091523393507fb3a7f4e19ac1e31fc41d825d7a63c4af7b79cda95d9abfb66c36e6987706bf9792500160405180910390a2505b905090565b610c73600033610857565b610c8f5760405162461bcd60e51b81526004016103bc90611479565b600555565b600154610100900460ff16610caf5760015460ff1615610cb3565b303b155b610d165760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103bc565b600154610100900460ff16158015610d38576001805461ffff19166101011790555b836001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a91906115fd565b6001805462010000600160b01b031916620100006001600160a01b0393841602179055600280546001600160a01b0319908116878416179091556003805490911691851691909117905562093a80610df281426115a3565b610dfc91906115c5565b600455610e0a60008361058d565b801561073a576001805461ff001916905550505050565b6000818152602081905260408120610765906110bb565b600082815260208190526040902060020154610e549033610857565b61060b5760405162461bcd60e51b815260206004820152603060248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526f2061646d696e20746f207265766f6b6560801b60648201526084016103bc565b6000600654600554610c63919061158b565b610ed6600033610857565b610ef25760405162461bcd60e51b81526004016103bc90611479565b600455565b610f02600033610857565b610f1e5760405162461bcd60e51b81526004016103bc90611479565b600655565b600354604080516311b25aab60e21b815290516000926001600160a01b0316916346c96aac9160048083019260209291908290030181865afa158015610f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6391906115fd565b6000828152602081905260409020610fa990826110c5565b156105975760405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b600082815260208190526040902061100290826110da565b156105975760405133906001600160a01b0383169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b60006107f483836110ef565b6001600160a01b038116600090815260018301602052604081205415156107f4565b6003546040805163c13270f160e01b815290516000926001600160a01b03169163c13270f19160048083019260209291908290030181865afa158015610f6d573d6000803e3d6000fd5b6000610765825490565b60006107f4836001600160a01b038416611119565b60006107f4836001600160a01b038416611168565b60008260000182815481106111065761110661161a565b9060005260206000200154905092915050565b600081815260018301602052604081205461116057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610765565b506000610765565b6000818152600183016020526040812054801561125157600061118c600183611630565b85549091506000906111a090600190611630565b90508181146112055760008660000182815481106111c0576111c061161a565b90600052602060002001549050808760000184815481106111e3576111e361161a565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061121657611216611647565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610765565b6000915050610765565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461050a57600080fd5b803561129181611271565b919050565b600060208083850312156112a957600080fd5b823567ffffffffffffffff808211156112c157600080fd5b818501915085601f8301126112d557600080fd5b8135818111156112e7576112e761125b565b8060051b604051601f19603f8301168101818110858211171561130c5761130c61125b565b60405291825284820192508381018501918883111561132a57600080fd5b938501935b8285101561134f5761134085611286565b8452938501939285019261132f565b98975050505050505050565b60006020828403121561136d57600080fd5b5035919050565b6000806040838503121561138757600080fd5b82359150602083013561139981611271565b809150509250929050565b600080604083850312156113b757600080fd5b82356113c281611271565b946020939093013593505050565b801515811461050a57600080fd5b600080604083850312156113f157600080fd5b82356113fc81611271565b91506020830135611399816113d0565b6000806040838503121561141f57600080fd5b50508035926020909101359150565b60008060006060848603121561144357600080fd5b833561144e81611271565b9250602084013561145e81611271565b9150604084013561146e81611271565b809150509250925092565b6020808252600990820152683337b93134b23232b760b91b604082015260600190565b600081518084526020808501945080840160005b838110156114d55781516001600160a01b0316875295820195908201906001016114b0565b509495945050505050565b6020815260006107f4602083018461149c565b60006020828403121561150557600080fd5b81516107f4816113d0565b6000825160005b818110156115315760208186018101518583015201611517565b81811115611540576000828501525b509190910192915050565b60408152600061155e604083018561149c565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561159e5761159e611575565b500190565b6000826115c057634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156115df576115df611575565b500290565b6000602082840312156115f657600080fd5b5051919050565b60006020828403121561160f57600080fd5b81516107f481611271565b634e487b7160e01b600052603260045260246000fd5b60008282101561164257611642611575565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212201edef50eb3f0843eb863382671542d31d4001e8970db24709b9791be8f7cd41664736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063a217fddf116100de578063d651a83d11610097578063e81a062411610071578063e81a062414610343578063ea25119c14610356578063ecd0c0c314610369578063f77c47911461038257600080fd5b8063d651a83d14610329578063d70142fb14610332578063e52522b61461033a57600080fd5b8063a217fddf146102cd578063a83627de146102d5578063baa98bbd146102dd578063c0c53b8b146102f0578063ca15c87314610303578063d547741f1461031657600080fd5b80634e0df3f61161014b5780638dd598fb116101255780638dd598fb146102595780639010d07c1461028457806391c5f4a61461029757806391d14854146102aa57600080fd5b80634e0df3f61461022a578063713efc991461023d5780638053227a1461024657600080fd5b80632324521614610193578063248a9ca3146101a85780632e1a7d4d146101de5780632f2ff15d146101f157806336568abe1461020457806340c10f1914610217575b600080fd5b6101a66101a1366004611296565b610395565b005b6101cb6101b636600461135b565b60009081526020819052604090206002015490565b6040519081526020015b60405180910390f35b6101a66101ec36600461135b565b61042d565b6101a66101ff366004611374565b61050d565b6101a6610212366004611374565b61059b565b6101a66102253660046113a4565b610615565b6101cb610238366004611374565b610740565b6101cb60045481565b6101a66102543660046113de565b61076b565b60025461026c906001600160a01b031681565b6040516001600160a01b0390911681526020016101d5565b61026c61029236600461140c565b6107dc565b6101a66102a5366004611296565b6107fb565b6102bd6102b8366004611374565b610857565b60405190151581526020016101d5565b6101cb600081565b6101cb61086f565b6101a66102eb36600461135b565b610c68565b6101a66102fe36600461142e565b610c94565b6101cb61031136600461135b565b610e21565b6101a6610324366004611374565b610e38565b6101cb60055481565b6101cb610eb9565b6101cb60065481565b6101a661035136600461135b565b610ecb565b6101a661036436600461135b565b610ef7565b60015461026c906201000090046001600160a01b031681565b60035461026c906001600160a01b031681565b6103a0600033610857565b6103c55760405162461bcd60e51b81526004016103bc90611479565b60405180910390fd5b6103cd610f23565b6001600160a01b03166323245216826040518263ffffffff1660e01b81526004016103f891906114e0565b600060405180830381600087803b15801561041257600080fd5b505af1158015610426573d6000803e3d6000fd5b5050505050565b610438600033610857565b6104545760405162461bcd60e51b81526004016103bc90611479565b60015460405163a9059cbb60e01b815233600482015260248101839052620100009091046001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156104aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ce91906114f3565b61050a5760405162461bcd60e51b815260206004820152600d60248201526c151c985b9cd9995c8811985a5b609a1b60448201526064016103bc565b50565b6000828152602081905260409020600201546105299033610857565b61058d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526e0818591b5a5b881d1bc819dc985b9d608a1b60648201526084016103bc565b6105978282610f91565b5050565b6001600160a01b038116331461060b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016103bc565b6105978282610fea565b610620600033610857565b61063c5760405162461bcd60e51b81526004016103bc90611479565b600154604080516001600160a01b038581166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b03166340c10f1960e01b1790529151600093849362010000909104169161069f91611510565b6000604051808303816000865af19150503d80600081146106dc576040519150601f19603f3d011682016040523d82523d6000602084013e6106e1565b606091505b509150915081801561070257508080602001905181019061070291906114f3565b61073a5760405162461bcd60e51b81526020600482015260096024820152681b5a5b9d0819985a5b60ba1b60448201526064016103bc565b50505050565b6000828152602081815260408083206001600160a01b03851684526001019091529020545b92915050565b610773610f23565b604051634029913d60e11b81526001600160a01b03848116600483015283151560248301529190911690638053227a90604401600060405180830381600087803b1580156107c057600080fd5b505af11580156107d4573d6000803e3d6000fd5b505050505050565b60008281526020819052604081206107f49083611043565b9392505050565b610806600033610857565b6108225760405162461bcd60e51b81526004016103bc90611479565b61082a610f23565b6001600160a01b0316637e1ddf6482306040518363ffffffff1660e01b81526004016103f892919061154b565b60008281526020819052604081206107f4908361104f565b600061087b8133610857565b6108975760405162461bcd60e51b81526004016103bc90611479565b6004546108a762093a808261158b565b4210610c635762093a806108bb81426115a3565b6108c591906115c5565b60048181556001546040516370a0823160e01b815230928101929092529192506000916201000090046001600160a01b0316906370a0823190602401602060405180830381865afa15801561091e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094291906115e4565b9050600654600554610954919061158b565b81101561099a5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064016103bc565b60055415610b24576001546201000090046001600160a01b031663a9059cbb6109c1611071565b6005546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3391906114f3565b610a6f5760405162461bcd60e51b815260206004820152600d60248201526c151c985b9cd9995c8811985a5b609a1b60448201526064016103bc565b610a77611071565b6001600160a01b031663bee5dc326040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ab157600080fd5b505af1158015610ac5573d6000803e3d6000fd5b50505050610ad1611071565b6001600160a01b031663326a94076040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b0b57600080fd5b505af1158015610b1f573d6000803e3d6000fd5b505050505b6001546201000090046001600160a01b031663095ea7b3610b43610f23565b6006546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb591906114f3565b50610bbe610f23565b6001600160a01b0316633c6b16ab6006546040518263ffffffff1660e01b8152600401610bed91815260200190565b600060405180830381600087803b158015610c0757600080fd5b505af1158015610c1b573d6000803e3d6000fd5b50506005546006546040805192835260208301919091523393507fb3a7f4e19ac1e31fc41d825d7a63c4af7b79cda95d9abfb66c36e6987706bf9792500160405180910390a2505b905090565b610c73600033610857565b610c8f5760405162461bcd60e51b81526004016103bc90611479565b600555565b600154610100900460ff16610caf5760015460ff1615610cb3565b303b155b610d165760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103bc565b600154610100900460ff16158015610d38576001805461ffff19166101011790555b836001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a91906115fd565b6001805462010000600160b01b031916620100006001600160a01b0393841602179055600280546001600160a01b0319908116878416179091556003805490911691851691909117905562093a80610df281426115a3565b610dfc91906115c5565b600455610e0a60008361058d565b801561073a576001805461ff001916905550505050565b6000818152602081905260408120610765906110bb565b600082815260208190526040902060020154610e549033610857565b61060b5760405162461bcd60e51b815260206004820152603060248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526f2061646d696e20746f207265766f6b6560801b60648201526084016103bc565b6000600654600554610c63919061158b565b610ed6600033610857565b610ef25760405162461bcd60e51b81526004016103bc90611479565b600455565b610f02600033610857565b610f1e5760405162461bcd60e51b81526004016103bc90611479565b600655565b600354604080516311b25aab60e21b815290516000926001600160a01b0316916346c96aac9160048083019260209291908290030181865afa158015610f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6391906115fd565b6000828152602081905260409020610fa990826110c5565b156105975760405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b600082815260208190526040902061100290826110da565b156105975760405133906001600160a01b0383169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b60006107f483836110ef565b6001600160a01b038116600090815260018301602052604081205415156107f4565b6003546040805163c13270f160e01b815290516000926001600160a01b03169163c13270f19160048083019260209291908290030181865afa158015610f6d573d6000803e3d6000fd5b6000610765825490565b60006107f4836001600160a01b038416611119565b60006107f4836001600160a01b038416611168565b60008260000182815481106111065761110661161a565b9060005260206000200154905092915050565b600081815260018301602052604081205461116057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610765565b506000610765565b6000818152600183016020526040812054801561125157600061118c600183611630565b85549091506000906111a090600190611630565b90508181146112055760008660000182815481106111c0576111c061161a565b90600052602060002001549050808760000184815481106111e3576111e361161a565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061121657611216611647565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610765565b6000915050610765565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461050a57600080fd5b803561129181611271565b919050565b600060208083850312156112a957600080fd5b823567ffffffffffffffff808211156112c157600080fd5b818501915085601f8301126112d557600080fd5b8135818111156112e7576112e761125b565b8060051b604051601f19603f8301168101818110858211171561130c5761130c61125b565b60405291825284820192508381018501918883111561132a57600080fd5b938501935b8285101561134f5761134085611286565b8452938501939285019261132f565b98975050505050505050565b60006020828403121561136d57600080fd5b5035919050565b6000806040838503121561138757600080fd5b82359150602083013561139981611271565b809150509250929050565b600080604083850312156113b757600080fd5b82356113c281611271565b946020939093013593505050565b801515811461050a57600080fd5b600080604083850312156113f157600080fd5b82356113fc81611271565b91506020830135611399816113d0565b6000806040838503121561141f57600080fd5b50508035926020909101359150565b60008060006060848603121561144357600080fd5b833561144e81611271565b9250602084013561145e81611271565b9150604084013561146e81611271565b809150509250925092565b6020808252600990820152683337b93134b23232b760b91b604082015260600190565b600081518084526020808501945080840160005b838110156114d55781516001600160a01b0316875295820195908201906001016114b0565b509495945050505050565b6020815260006107f4602083018461149c565b60006020828403121561150557600080fd5b81516107f4816113d0565b6000825160005b818110156115315760208186018101518583015201611517565b81811115611540576000828501525b509190910192915050565b60408152600061155e604083018561149c565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561159e5761159e611575565b500190565b6000826115c057634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156115df576115df611575565b500290565b6000602082840312156115f657600080fd5b5051919050565b60006020828403121561160f57600080fd5b81516107f481611271565b634e487b7160e01b600052603260045260246000fd5b60008282101561164257611642611575565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212201edef50eb3f0843eb863382671542d31d4001e8970db24709b9791be8f7cd41664736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getRoleMemberIndex(bytes32,address)": {
        "details": "Returns the index of the account that have `role`."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "stateVariables": {
      "veDistPerWeek": {
        "details": "veDist per week"
      },
      "voterPerWeek": {
        "details": "voter per week"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26263,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)26258_storage)"
      },
      {
        "astId": 27449,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 27452,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10365,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "_token",
        "offset": 2,
        "slot": "1",
        "type": "t_contract(IERC20)24511"
      },
      {
        "astId": 10368,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "_ve",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVe)26084"
      },
      {
        "astId": 10370,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "controller",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10372,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "activeperiod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10375,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "veDistPerWeek",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10378,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "voterPerWeek",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)24511": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IVe)26084": {
        "encoding": "inplace",
        "label": "contract IVe",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)26258_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)26258_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)27155_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 27154,
            "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)26854_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)26258_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 26255,
            "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)27155_storage"
          },
          {
            "astId": 26257,
            "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)26854_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 26849,
            "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 26853,
            "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}