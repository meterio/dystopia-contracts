{
  "address": "0x5aBeAf061f81Bf966F7ac9BB2Ad16bF9e421cCa2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "GaugeCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bribe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_allowedRewardTokens",
          "type": "address[]"
        }
      ],
      "name": "createGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bribe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_allowedRewardTokens",
          "type": "address[]"
        }
      ],
      "name": "createGaugeSingle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe20cdd262d739c01b44c866ee2f4b69bb40770ddfca61e16b2d3dc716689ab09",
  "receipt": {
    "to": null,
    "from": "0xf98993Ea9f8603451d7CA231aEd91657BeD6dF75",
    "contractAddress": "0x5aBeAf061f81Bf966F7ac9BB2Ad16bF9e421cCa2",
    "transactionIndex": 4,
    "gasUsed": "3364405",
    "logsBloom": "0x
    "blockHash": "0xe7171725271193d946f286bd198284c4ec9f32344d4c8e1d61636b19afdefd79",
    "transactionHash": "0xe20cdd262d739c01b44c866ee2f4b69bb40770ddfca61e16b2d3dc716689ab09",
    "logs": [],
    "blockNumber": 3513739,
    "cumulativeGasUsed": "4028247",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f0e188e35fd96b365cb9bd616b596351",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"GaugeCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_allowedRewardTokens\",\"type\":\"address[]\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_allowedRewardTokens\",\"type\":\"address[]\"}],\"name\":\"createGaugeSingle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/reward/GaugeFactory.sol\":\"GaugeFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/Reentrancy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract Reentrancy {\\n    /// @dev simple re-entrancy check\\n    uint internal _unlocked = 1;\\n\\n    modifier lock() {\\n        require(_unlocked == 1, \\\"Reentrant call\\\");\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x59c07b769bd280322dea57c93ed20b3e6e1fe1018ab9937b0dfcaddcfb5f2780\",\"license\":\"MIT\"},\"contracts/base/reward/Gauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IGauge.sol\\\";\\nimport \\\"../../interface/IPair.sol\\\";\\nimport \\\"../../interface/IVoter.sol\\\";\\nimport \\\"../../interface/IBribe.sol\\\";\\nimport \\\"../../interface/IERC721.sol\\\";\\nimport \\\"../../interface/IVe.sol\\\";\\nimport \\\"./MultiRewardsPoolBase.sol\\\";\\n\\n/// @title Gauges are used to incentivize pools, they emit reward tokens over 7 days for staked LP tokens\\ncontract Gauge is IGauge, MultiRewardsPoolBase {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The ve token used for gauges\\n    address public ve;\\n    address public bribe;\\n    address public voter;\\n\\n    mapping(address => uint) public tokenIds;\\n\\n    uint public fees0;\\n    uint public fees1;\\n\\n    event ClaimFees(address indexed from, uint claimed0, uint claimed1);\\n    event VeTokenLocked(address indexed account, uint tokenId);\\n    event VeTokenUnlocked(address indexed account, uint tokenId);\\n\\n    constructor(\\n        address _stake,\\n        address _bribe,\\n        address _ve,\\n        address _voter,\\n        address[] memory _allowedRewardTokens\\n    ) MultiRewardsPoolBase(_stake, _voter, _allowedRewardTokens) {\\n        bribe = _bribe;\\n        ve = _ve;\\n        voter = _voter;\\n    }\\n\\n    function claimFees()\\n        external\\n        override\\n        lock\\n        returns (uint claimed0, uint claimed1)\\n    {\\n        return _claimFees();\\n    }\\n\\n    function _claimFees() internal returns (uint claimed0, uint claimed1) {\\n        address _underlying = underlying;\\n        (claimed0, claimed1) = IPair(_underlying).claimFees();\\n        if (claimed0 > 0 || claimed1 > 0) {\\n            uint _fees0 = fees0 + claimed0;\\n            uint _fees1 = fees1 + claimed1;\\n            (address _token0, address _token1) = IPair(_underlying).tokens();\\n            if (_fees0 > IMultiRewardsPool(bribe).left(_token0)) {\\n                fees0 = 0;\\n                IERC20(_token0).safeIncreaseAllowance(bribe, _fees0);\\n                IBribe(bribe).notifyRewardAmount(_token0, _fees0);\\n            } else {\\n                fees0 = _fees0;\\n            }\\n            if (_fees1 > IMultiRewardsPool(bribe).left(_token1)) {\\n                fees1 = 0;\\n                IERC20(_token1).safeIncreaseAllowance(bribe, _fees1);\\n                IBribe(bribe).notifyRewardAmount(_token1, _fees1);\\n            } else {\\n                fees1 = _fees1;\\n            }\\n\\n            emit ClaimFees(msg.sender, claimed0, claimed1);\\n        }\\n    }\\n\\n    function getReward(address account, address[] memory tokens)\\n        external\\n        override\\n    {\\n        require(msg.sender == account || msg.sender == voter, \\\"Forbidden\\\");\\n        IVoter(voter).distribute(address(this));\\n        _getReward(account, tokens, account);\\n    }\\n\\n    function depositAll(uint tokenId) external {\\n        deposit(IERC20(underlying).balanceOf(msg.sender), tokenId);\\n    }\\n\\n    function deposit(uint amount, uint tokenId) public {\\n        if (tokenId > 0) {\\n            _lockVeToken(msg.sender, tokenId);\\n        }\\n        _deposit(amount);\\n        IVoter(voter).emitDeposit(tokenId, msg.sender, amount);\\n    }\\n\\n    function withdrawAll() external {\\n        withdraw(balanceOf[msg.sender]);\\n    }\\n\\n    function withdraw(uint amount) public {\\n        uint tokenId = 0;\\n        if (amount == balanceOf[msg.sender]) {\\n            tokenId = tokenIds[msg.sender];\\n        }\\n        withdrawToken(amount, tokenId);\\n        IVoter(voter).emitWithdraw(tokenId, msg.sender, amount);\\n    }\\n\\n    function withdrawToken(uint amount, uint tokenId) public {\\n        if (tokenId > 0) {\\n            _unlockVeToken(msg.sender, tokenId);\\n        }\\n        _withdraw(amount);\\n    }\\n\\n    /// @dev Balance should be recalculated after the lock\\n    ///      For locking a new ve token withdraw all funds and deposit again\\n    function _lockVeToken(address account, uint tokenId) internal {\\n        require(IERC721(ve).ownerOf(tokenId) == account, \\\"Not ve token owner\\\");\\n        if (tokenIds[account] == 0) {\\n            tokenIds[account] = tokenId;\\n            IVoter(voter).attachTokenToGauge(tokenId, account);\\n        }\\n        require(tokenIds[account] == tokenId, \\\"Wrong token\\\");\\n        emit VeTokenLocked(account, tokenId);\\n    }\\n\\n    /// @dev Balance should be recalculated after the unlock\\n    function _unlockVeToken(address account, uint tokenId) internal {\\n        require(tokenId == tokenIds[account], \\\"Wrong token\\\");\\n        tokenIds[account] = 0;\\n        IVoter(voter).detachTokenFromGauge(tokenId, account);\\n        emit VeTokenUnlocked(account, tokenId);\\n    }\\n\\n    /// @dev Similar to Curve https://resources.curve.fi/reward-gauges/boosting-your-crv-rewards#formula\\n    function _derivedBalance(address account)\\n        internal\\n        view\\n        override\\n        returns (uint)\\n    {\\n        uint _tokenId = tokenIds[account];\\n        uint _balance = balanceOf[account];\\n        uint _derived = (_balance * 40) / 100;\\n        uint _adjusted = 0;\\n        uint _supply = IERC20(ve).totalSupply();\\n        if (account == IERC721(ve).ownerOf(_tokenId) && _supply > 0) {\\n            _adjusted =\\n                (((totalSupply * IVe(ve).balanceOfNFT(_tokenId)) / _supply) *\\n                    60) /\\n                100;\\n        }\\n        return Math.min((_derived + _adjusted), _balance);\\n    }\\n\\n    function notifyRewardAmount(address token, uint amount) external {\\n        _claimFees();\\n        _notifyRewardAmount(token, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd67a1dd48615a85279a9919d04b0cbe165549161398b0256b12dd4e7c45c6b72\",\"license\":\"MIT\"},\"contracts/base/reward/GaugeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IGaugeFactory.sol\\\";\\nimport \\\"./Gauge.sol\\\";\\n\\ncontract GaugeFactory is IGaugeFactory {\\n    address public lastGauge;\\n\\n    event GaugeCreated(address value);\\n\\n    function createGauge(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address[] memory _allowedRewardTokens\\n    ) external override returns (address) {\\n        address _lastGauge = address(\\n            new Gauge(_pool, _bribe, _ve, msg.sender, _allowedRewardTokens)\\n        );\\n        lastGauge = _lastGauge;\\n        emit GaugeCreated(_lastGauge);\\n        return _lastGauge;\\n    }\\n\\n    function createGaugeSingle(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address _voter,\\n        address[] memory _allowedRewardTokens\\n    ) external override returns (address) {\\n        address _lastGauge = address(\\n            new Gauge(_pool, _bribe, _ve, _voter, _allowedRewardTokens)\\n        );\\n        lastGauge = _lastGauge;\\n        emit GaugeCreated(_lastGauge);\\n        return _lastGauge;\\n    }\\n}\\n\",\"keccak256\":\"0x61ccfa0f72f5762f51343189e3db3e657477f26c248f0b02107dc16cadb09d21\",\"license\":\"MIT\"},\"contracts/base/reward/MultiRewardsPoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IMultiRewardsPool.sol\\\";\\nimport \\\"../../lib/Math.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../../lib/CheckpointLib.sol\\\";\\nimport \\\"../Reentrancy.sol\\\";\\n\\nabstract contract MultiRewardsPoolBase is Reentrancy, IMultiRewardsPool {\\n    using SafeERC20 for IERC20;\\n    using CheckpointLib for mapping(uint => CheckpointLib.Checkpoint);\\n\\n    /// @dev Operator can add/remove reward tokens\\n    address public operator;\\n\\n    /// @dev The LP token that needs to be staked for rewards\\n    address public override underlying;\\n\\n    uint public override derivedSupply;\\n    mapping(address => uint) public override derivedBalances;\\n\\n    /// @dev Rewards are released over 7 days\\n    uint internal constant DURATION = 7 days;\\n    uint internal constant PRECISION = 10 ** 18;\\n    uint internal constant MAX_REWARD_TOKENS = 10;\\n\\n    /// Default snx staking contract implementation\\n    /// https://github.com/Synthetixio/synthetix/blob/develop/contracts/StakingRewards.sol\\n\\n    /// @dev Reward rate with precision 1e18\\n    mapping(address => uint) public rewardRate;\\n    mapping(address => uint) public periodFinish;\\n    mapping(address => uint) public lastUpdateTime;\\n    mapping(address => uint) public rewardPerTokenStored;\\n\\n    mapping(address => mapping(address => uint)) public lastEarn;\\n    mapping(address => mapping(address => uint))\\n        public userRewardPerTokenStored;\\n\\n    uint public override totalSupply;\\n    mapping(address => uint) public override balanceOf;\\n\\n    address[] public override rewardTokens;\\n    mapping(address => bool) public override isRewardToken;\\n\\n    /// @notice A record of balance checkpoints for each account, by index\\n    mapping(address => mapping(uint => CheckpointLib.Checkpoint))\\n        public checkpoints;\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint) public numCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping(uint => CheckpointLib.Checkpoint) public supplyCheckpoints;\\n    /// @notice The number of checkpoints\\n    uint public supplyNumCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping(address => mapping(uint => CheckpointLib.Checkpoint))\\n        public rewardPerTokenCheckpoints;\\n    /// @notice The number of checkpoints for each token\\n    mapping(address => uint) public rewardPerTokenNumCheckpoints;\\n\\n    bool public checkAmount;\\n\\n    event Deposit(address indexed from, uint amount);\\n    event Withdraw(address indexed from, uint amount);\\n    event NotifyReward(\\n        address indexed from,\\n        address indexed reward,\\n        uint amount\\n    );\\n    event ClaimRewards(\\n        address indexed from,\\n        address indexed reward,\\n        uint amount,\\n        address recepient\\n    );\\n\\n    constructor(\\n        address _stake,\\n        address _operator,\\n        address[] memory _allowedRewardTokens\\n    ) {\\n        underlying = _stake;\\n        operator = _operator;\\n        for (uint i; i < _allowedRewardTokens.length; i++) {\\n            if (_allowedRewardTokens[i] != address(0)) {\\n                _registerRewardToken(_allowedRewardTokens[i]);\\n            }\\n        }\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"Not operator\\\");\\n        _;\\n    }\\n\\n    //**************************************************************************\\n    //************************ VIEWS *******************************************\\n    //**************************************************************************\\n\\n    function rewardTokensLength() external view override returns (uint) {\\n        return rewardTokens.length;\\n    }\\n\\n    function rewardPerToken(address token) external view returns (uint) {\\n        return _rewardPerToken(token);\\n    }\\n\\n    function _rewardPerToken(address token) internal view returns (uint) {\\n        if (derivedSupply == 0) {\\n            return rewardPerTokenStored[token];\\n        }\\n        return\\n            rewardPerTokenStored[token] +\\n            (((_lastTimeRewardApplicable(token) -\\n                Math.min(lastUpdateTime[token], periodFinish[token])) *\\n                rewardRate[token]) / derivedSupply);\\n    }\\n\\n    function derivedBalance(\\n        address account\\n    ) external view override returns (uint) {\\n        return _derivedBalance(account);\\n    }\\n\\n    function left(address token) external view override returns (uint) {\\n        if (block.timestamp >= periodFinish[token]) return 0;\\n        uint _remaining = periodFinish[token] - block.timestamp;\\n        return (_remaining * rewardRate[token]) / PRECISION;\\n    }\\n\\n    function earned(\\n        address token,\\n        address account\\n    ) external view override returns (uint) {\\n        return _earned(token, account);\\n    }\\n\\n    //**************************************************************************\\n    //************************ OPERATOR ACTIONS ********************************\\n    //**************************************************************************\\n\\n    function registerRewardToken(address token) external onlyOperator {\\n        _registerRewardToken(token);\\n    }\\n\\n    function setCheckAmount(bool _checkAmount) external onlyOperator {\\n        checkAmount = _checkAmount;\\n    }\\n\\n    function _registerRewardToken(address token) internal {\\n        require(\\n            rewardTokens.length < MAX_REWARD_TOKENS,\\n            \\\"Too many reward tokens\\\"\\n        );\\n        require(!isRewardToken[token], \\\"Already registered\\\");\\n        isRewardToken[token] = true;\\n        rewardTokens.push(token);\\n    }\\n\\n    function removeRewardToken(address token) external onlyOperator {\\n        require(periodFinish[token] < block.timestamp, \\\"Rewards not ended\\\");\\n        require(isRewardToken[token], \\\"Not reward token\\\");\\n\\n        isRewardToken[token] = false;\\n        uint length = rewardTokens.length;\\n        require(length > 3, \\\"First 3 tokens should not be removed\\\");\\n        // keep 3 tokens as guarantee against malicious actions\\n        // assume it will be VOLT + pool tokens\\n        uint i = 3;\\n        bool found = false;\\n        for (; i < length; i++) {\\n            address t = rewardTokens[i];\\n            if (t == token) {\\n                found = true;\\n                break;\\n            }\\n        }\\n        require(found, \\\"First tokens forbidden to remove\\\");\\n        rewardTokens[i] = rewardTokens[length - 1];\\n        rewardTokens.pop();\\n    }\\n\\n    //**************************************************************************\\n    //************************ USER ACTIONS ************************************\\n    //**************************************************************************\\n\\n    function _deposit(uint amount) internal virtual lock {\\n        require(amount > 0, \\\"Zero amount\\\");\\n        _increaseBalance(msg.sender, amount);\\n        IERC20(underlying).safeTransferFrom(msg.sender, address(this), amount);\\n        emit Deposit(msg.sender, amount);\\n    }\\n\\n    function _increaseBalance(address account, uint amount) internal virtual {\\n        _updateRewardForAllTokens();\\n\\n        totalSupply += amount;\\n        balanceOf[account] += amount;\\n\\n        _updateDerivedBalanceAndWriteCheckpoints(account);\\n    }\\n\\n    function _withdraw(uint amount) internal virtual lock {\\n        _decreaseBalance(msg.sender, amount);\\n        IERC20(underlying).safeTransfer(msg.sender, amount);\\n        emit Withdraw(msg.sender, amount);\\n    }\\n\\n    function _decreaseBalance(address account, uint amount) internal virtual {\\n        _updateRewardForAllTokens();\\n\\n        totalSupply -= amount;\\n        balanceOf[account] -= amount;\\n\\n        _updateDerivedBalanceAndWriteCheckpoints(account);\\n    }\\n\\n    /// @dev Implement restriction checks!\\n    function _getReward(\\n        address account,\\n        address[] memory tokens,\\n        address recipient\\n    ) internal virtual lock {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            (\\n                rewardPerTokenStored[tokens[i]],\\n                lastUpdateTime[tokens[i]]\\n            ) = _updateRewardPerToken(tokens[i], type(uint).max, true);\\n\\n            uint _reward = _earned(tokens[i], account);\\n            lastEarn[tokens[i]][account] = block.timestamp;\\n            userRewardPerTokenStored[tokens[i]][account] = rewardPerTokenStored[\\n                tokens[i]\\n            ];\\n            if (_reward > 0) {\\n                IERC20(tokens[i]).safeTransfer(recipient, _reward);\\n            }\\n\\n            emit ClaimRewards(msg.sender, tokens[i], _reward, recipient);\\n        }\\n\\n        _updateDerivedBalanceAndWriteCheckpoints(account);\\n    }\\n\\n    function _updateDerivedBalanceAndWriteCheckpoints(\\n        address account\\n    ) internal {\\n        uint __derivedBalance = derivedBalances[account];\\n        derivedSupply -= __derivedBalance;\\n        __derivedBalance = _derivedBalance(account);\\n        derivedBalances[account] = __derivedBalance;\\n        derivedSupply += __derivedBalance;\\n\\n        _writeCheckpoint(account, __derivedBalance);\\n        _writeSupplyCheckpoint();\\n    }\\n\\n    //**************************************************************************\\n    //************************ REWARDS CALCULATIONS ****************************\\n    //**************************************************************************\\n\\n    // earned is an estimation, it won't be exact till the supply > rewardPerToken calculations have run\\n    function _earned(\\n        address token,\\n        address account\\n    ) internal view returns (uint) {\\n        // zero checkpoints means zero deposits\\n        if (numCheckpoints[account] == 0) {\\n            return 0;\\n        }\\n        // last claim rewards time\\n        uint _startTimestamp = Math.max(\\n            lastEarn[token][account],\\n            rewardPerTokenCheckpoints[token][0].timestamp\\n        );\\n\\n        // find an index of the balance that the user had on the last claim\\n        uint _startIndex = _getPriorBalanceIndex(account, _startTimestamp);\\n        uint _endIndex = numCheckpoints[account] - 1;\\n\\n        uint reward = 0;\\n\\n        // calculate previous snapshots if exist\\n        if (_endIndex > 0) {\\n            for (uint i = _startIndex; i <= _endIndex - 1; i++) {\\n                CheckpointLib.Checkpoint memory cp0 = checkpoints[account][i];\\n                CheckpointLib.Checkpoint memory cp1 = checkpoints[account][\\n                    i + 1\\n                ];\\n                (uint _rewardPerTokenStored0, ) = _getPriorRewardPerToken(\\n                    token,\\n                    cp0.timestamp\\n                );\\n                (uint _rewardPerTokenStored1, ) = _getPriorRewardPerToken(\\n                    token,\\n                    cp1.timestamp\\n                );\\n                reward +=\\n                    (cp0.value *\\n                        (_rewardPerTokenStored1 - _rewardPerTokenStored0)) /\\n                    PRECISION;\\n            }\\n        }\\n\\n        CheckpointLib.Checkpoint memory cp = checkpoints[account][_endIndex];\\n        (uint _rewardPerTokenStored, ) = _getPriorRewardPerToken(\\n            token,\\n            cp.timestamp\\n        );\\n        reward +=\\n            (cp.value *\\n                (_rewardPerToken(token) -\\n                    Math.max(\\n                        _rewardPerTokenStored,\\n                        userRewardPerTokenStored[token][account]\\n                    ))) /\\n            PRECISION;\\n        return reward;\\n    }\\n\\n    function _derivedBalance(\\n        address account\\n    ) internal view virtual returns (uint) {\\n        // supposed to be implemented in a parent contract\\n        return balanceOf[account];\\n    }\\n\\n    /// @dev Update stored rewardPerToken values without the last one snapshot\\n    ///      If the contract will get \\\"out of gas\\\" error on users actions this will be helpful\\n    function batchUpdateRewardPerToken(address token, uint maxRuns) external {\\n        (\\n            rewardPerTokenStored[token],\\n            lastUpdateTime[token]\\n        ) = _updateRewardPerToken(token, maxRuns, false);\\n    }\\n\\n    function _updateRewardForAllTokens() internal {\\n        uint length = rewardTokens.length;\\n        for (uint i; i < length; i++) {\\n            address token = rewardTokens[i];\\n            (\\n                rewardPerTokenStored[token],\\n                lastUpdateTime[token]\\n            ) = _updateRewardPerToken(token, type(uint).max, true);\\n        }\\n    }\\n\\n    /// @dev Should be called only with properly updated snapshots, or with actualLast=false\\n    function _updateRewardPerToken(\\n        address token,\\n        uint maxRuns,\\n        bool actualLast\\n    ) internal returns (uint, uint) {\\n        uint _startTimestamp = lastUpdateTime[token];\\n        uint reward = rewardPerTokenStored[token];\\n\\n        if (supplyNumCheckpoints == 0) {\\n            return (reward, _startTimestamp);\\n        }\\n\\n        if (rewardRate[token] == 0) {\\n            return (reward, block.timestamp);\\n        }\\n        uint _startIndex = _getPriorSupplyIndex(_startTimestamp);\\n        uint _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\\n\\n        if (_endIndex > 0) {\\n            for (uint i = _startIndex; i <= _endIndex - 1; i++) {\\n                CheckpointLib.Checkpoint memory sp0 = supplyCheckpoints[i];\\n                if (sp0.value > 0) {\\n                    CheckpointLib.Checkpoint memory sp1 = supplyCheckpoints[\\n                        i + 1\\n                    ];\\n                    (uint _reward, uint _endTime) = _calcRewardPerToken(\\n                        token,\\n                        sp1.timestamp,\\n                        sp0.timestamp,\\n                        sp0.value,\\n                        _startTimestamp\\n                    );\\n                    reward += _reward;\\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\\n                    _startTimestamp = _endTime;\\n                }\\n            }\\n        }\\n\\n        // need to override the last value with actual numbers only on deposit/withdraw/claim/notify actions\\n        if (actualLast) {\\n            CheckpointLib.Checkpoint memory sp = supplyCheckpoints[_endIndex];\\n            if (sp.value > 0) {\\n                (uint _reward, ) = _calcRewardPerToken(\\n                    token,\\n                    _lastTimeRewardApplicable(token),\\n                    Math.max(sp.timestamp, _startTimestamp),\\n                    sp.value,\\n                    _startTimestamp\\n                );\\n                reward += _reward;\\n                _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\\n                _startTimestamp = block.timestamp;\\n            }\\n        }\\n\\n        return (reward, _startTimestamp);\\n    }\\n\\n    function _calcRewardPerToken(\\n        address token,\\n        uint lastSupplyTs1,\\n        uint lastSupplyTs0,\\n        uint supply,\\n        uint startTimestamp\\n    ) internal view returns (uint, uint) {\\n        uint endTime = Math.max(lastSupplyTs1, startTimestamp);\\n        uint _periodFinish = periodFinish[token];\\n        return (\\n            ((Math.min(endTime, _periodFinish) -\\n                Math.min(\\n                    Math.max(lastSupplyTs0, startTimestamp),\\n                    _periodFinish\\n                )) * rewardRate[token]) / supply,\\n            endTime\\n        );\\n    }\\n\\n    /// @dev Returns the last time the reward was modified or periodFinish if the reward has ended\\n    function _lastTimeRewardApplicable(\\n        address token\\n    ) internal view returns (uint) {\\n        return Math.min(block.timestamp, periodFinish[token]);\\n    }\\n\\n    //**************************************************************************\\n    //************************ NOTIFY ******************************************\\n    //**************************************************************************\\n\\n    function _notifyRewardAmount(\\n        address token,\\n        uint amount\\n    ) internal virtual lock {\\n        require(token != underlying, \\\"Wrong token for rewards\\\");\\n        require(amount > 0, \\\"Zero amount\\\");\\n        require(isRewardToken[token], \\\"Token not allowed\\\");\\n        if (rewardRate[token] == 0) {\\n            _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\\n        }\\n        (\\n            rewardPerTokenStored[token],\\n            lastUpdateTime[token]\\n        ) = _updateRewardPerToken(token, type(uint).max, true);\\n\\n        if (block.timestamp >= periodFinish[token]) {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n            rewardRate[token] = (amount * PRECISION) / DURATION;\\n        } else {\\n            uint _remaining = periodFinish[token] - block.timestamp;\\n            uint _left = _remaining * rewardRate[token];\\n            // not sure what the reason was in the original solidly implementation for this restriction\\n            // however, by design probably it is a good idea against human errors\\n            require(\\n                !checkAmount || (checkAmount && amount > _left / PRECISION),\\n                \\\"Amount should be higher than remaining rewards\\\"\\n            );\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n            rewardRate[token] = (amount * PRECISION + _left) / DURATION;\\n        }\\n\\n        periodFinish[token] = block.timestamp + DURATION;\\n        emit NotifyReward(msg.sender, token, amount);\\n    }\\n\\n    //**************************************************************************\\n    //************************ CHECKPOINTS *************************************\\n    //**************************************************************************\\n\\n    function getPriorBalanceIndex(\\n        address account,\\n        uint timestamp\\n    ) external view returns (uint) {\\n        return _getPriorBalanceIndex(account, timestamp);\\n    }\\n\\n    /// @notice Determine the prior balance for an account as of a block number\\n    /// @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n    /// @param account The address of the account to check\\n    /// @param timestamp The timestamp to get the balance at\\n    /// @return The balance the account had as of the given block\\n    function _getPriorBalanceIndex(\\n        address account,\\n        uint timestamp\\n    ) internal view returns (uint) {\\n        uint nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n        return checkpoints[account].findLowerIndex(nCheckpoints, timestamp);\\n    }\\n\\n    function getPriorSupplyIndex(uint timestamp) external view returns (uint) {\\n        return _getPriorSupplyIndex(timestamp);\\n    }\\n\\n    function _getPriorSupplyIndex(uint timestamp) internal view returns (uint) {\\n        uint nCheckpoints = supplyNumCheckpoints;\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n        return supplyCheckpoints.findLowerIndex(nCheckpoints, timestamp);\\n    }\\n\\n    function getPriorRewardPerToken(\\n        address token,\\n        uint timestamp\\n    ) external view returns (uint, uint) {\\n        return _getPriorRewardPerToken(token, timestamp);\\n    }\\n\\n    function _getPriorRewardPerToken(\\n        address token,\\n        uint timestamp\\n    ) internal view returns (uint, uint) {\\n        uint nCheckpoints = rewardPerTokenNumCheckpoints[token];\\n        if (nCheckpoints == 0) {\\n            return (0, 0);\\n        }\\n        mapping(uint => CheckpointLib.Checkpoint)\\n            storage cps = rewardPerTokenCheckpoints[token];\\n        uint lower = cps.findLowerIndex(nCheckpoints, timestamp);\\n        CheckpointLib.Checkpoint memory cp = cps[lower];\\n        return (cp.value, cp.timestamp);\\n    }\\n\\n    function _writeCheckpoint(address account, uint balance) internal {\\n        uint _timestamp = block.timestamp;\\n        uint _nCheckPoints = numCheckpoints[account];\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            checkpoints[account][_nCheckPoints - 1].timestamp == _timestamp\\n        ) {\\n            checkpoints[account][_nCheckPoints - 1].value = balance;\\n        } else {\\n            checkpoints[account][_nCheckPoints] = CheckpointLib.Checkpoint(\\n                _timestamp,\\n                balance\\n            );\\n            numCheckpoints[account] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeRewardPerTokenCheckpoint(\\n        address token,\\n        uint reward,\\n        uint timestamp\\n    ) internal {\\n        uint _nCheckPoints = rewardPerTokenNumCheckpoints[token];\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp ==\\n            timestamp\\n        ) {\\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].value = reward;\\n        } else {\\n            rewardPerTokenCheckpoints[token][_nCheckPoints] = CheckpointLib\\n                .Checkpoint(timestamp, reward);\\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeSupplyCheckpoint() internal {\\n        uint _nCheckPoints = supplyNumCheckpoints;\\n        uint _timestamp = block.timestamp;\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\\n        ) {\\n            supplyCheckpoints[_nCheckPoints - 1].value = derivedSupply;\\n        } else {\\n            supplyCheckpoints[_nCheckPoints] = CheckpointLib.Checkpoint(\\n                _timestamp,\\n                derivedSupply\\n            );\\n            supplyNumCheckpoints = _nCheckPoints + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a353dc924bfc9b85cda214cd954285b68a21c48f15fa8a3bd80e58a553cc70\",\"license\":\"MIT\"},\"contracts/interface/IBribe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBribe {\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function _deposit(uint amount, uint tokenId) external;\\n\\n    function _withdraw(uint amount, uint tokenId) external;\\n\\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\n}\\n\",\"keccak256\":\"0xcf242dd62b6301060e132cc868d817cced4bb4bd21c69e4079cba92e30d333f1\",\"license\":\"MIT\"},\"contracts/interface/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8609505e815e06dac85e0cc77ad7bbb641ceec24e5c8e012483e8576dd09ce09\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/interface/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6983264dae1151fd2451f1cb2e4cb9a369f6dd25577600d1733fe6e4da0dc35d\",\"license\":\"MIT\"},\"contracts/interface/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IGauge {\\n    function notifyRewardAmount(address token, uint amount) external;\\n\\n    function getReward(address account, address[] memory tokens) external;\\n\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\n}\\n\",\"keccak256\":\"0x182048b6ade43597025a2cbfc86979dcaed29d83abfaa48815efda839c7d6d33\",\"license\":\"MIT\"},\"contracts/interface/IGaugeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IGaugeFactory {\\n    function createGauge(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address[] memory _allowedRewardTokens\\n    ) external returns (address);\\n\\n    function createGaugeSingle(\\n        address _pool,\\n        address _bribe,\\n        address _ve,\\n        address _voter,\\n        address[] memory _allowedRewardTokens\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xbd8b9b1868d559e68e5c28894a7ab46434cbcfbc712713bd6ff6315243af0871\",\"license\":\"MIT\"},\"contracts/interface/IMultiRewardsPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IMultiRewardsPool {\\n    function underlying() external view returns (address);\\n\\n    function derivedSupply() external view returns (uint);\\n\\n    function derivedBalances(address account) external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function rewardTokens(uint id) external view returns (address);\\n\\n    function isRewardToken(address token) external view returns (bool);\\n\\n    function rewardTokensLength() external view returns (uint);\\n\\n    function derivedBalance(address account) external view returns (uint);\\n\\n    function left(address token) external view returns (uint);\\n\\n    function earned(\\n        address token,\\n        address account\\n    ) external view returns (uint);\\n\\n    function registerRewardToken(address token) external;\\n\\n    function removeRewardToken(address token) external;\\n\\n    function setCheckAmount(bool _checkAmount) external;\\n}\\n\",\"keccak256\":\"0xbeafc875b217076b374f602c595a55e4a67254aa47300848ca5be2c9b18532e6\",\"license\":\"MIT\"},\"contracts/interface/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPair {\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint timestamp;\\n        uint reserve0Cumulative;\\n        uint reserve1Cumulative;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function getAmountOut(uint, address) external view returns (uint);\\n\\n    function claimFees() external returns (uint, uint);\\n\\n    function tokens() external view returns (address, address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function stable() external view returns (bool);\\n\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint dec0,\\n            uint dec1,\\n            uint r0,\\n            uint r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        );\\n}\\n\",\"keccak256\":\"0x978d3132f8f5f6752533d94a3024f25ced205df57475d5e2d7c09f301dd7c762\",\"license\":\"MIT\"},\"contracts/interface/IVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVe {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n     * What we can do is to extrapolate ***At functions */\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint end;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function createLockFor(\\n        uint,\\n        uint,\\n        address\\n    ) external returns (uint);\\n\\n    function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n    function epoch() external view returns (uint);\\n\\n    function userPointHistory(uint tokenId, uint loc)\\n        external\\n        view\\n        returns (Point memory);\\n\\n    function pointHistory(uint loc) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function depositFor(uint tokenId, uint value) external;\\n\\n    function attachToken(uint tokenId) external;\\n\\n    function detachToken(uint tokenId) external;\\n\\n    function voting(uint tokenId) external;\\n\\n    function abstain(uint tokenId) external;\\n}\\n\",\"keccak256\":\"0x93a173b039792ac393165aab7a92882d0cc1d82257c4dfe13ee26631fe46e52a\",\"license\":\"MIT\"},\"contracts/interface/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVoter {\\n    function ve() external view returns (address);\\n\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n\\n    function emitDeposit(uint _tokenId, address account, uint amount) external;\\n\\n    function emitWithdraw(uint _tokenId, address account, uint amount) external;\\n\\n    function distribute(address _gauge) external;\\n\\n    function notifyRewardAmount(uint amount) external;\\n\\n    function init(address[] memory _tokens, address _minter) external;\\n\\n    function removeWhitelist(address[] memory _tokens) external;\\n\\n    function setCheckAmount(address _gaugeOrBribe, bool _checkAmount) external;\\n}\\n\",\"keccak256\":\"0x8292490094879fe5e6216f106739c43903190c5ea44d9917fe7876eed5fd803d\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x284fcdaef2f20ec54759bfb0821ee3a3459a1f0bc302b29e7fcc3c2f42e728df\",\"license\":\"MIT\"},\"contracts/lib/CheckpointLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary CheckpointLib {\\n    /// @notice A checkpoint for uint value\\n    struct Checkpoint {\\n        uint timestamp;\\n        uint value;\\n    }\\n\\n    function findLowerIndex(\\n        mapping(uint => Checkpoint) storage checkpoints,\\n        uint size,\\n        uint timestamp\\n    ) internal view returns (uint) {\\n        require(size != 0, \\\"Empty checkpoints\\\");\\n\\n        // First check most recent value\\n        if (checkpoints[size - 1].timestamp <= timestamp) {\\n            return (size - 1);\\n        }\\n\\n        // Next check implicit zero value\\n        if (checkpoints[0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint lower = 0;\\n        uint upper = size - 1;\\n        while (upper > lower) {\\n            // ceil, avoiding overflow\\n            uint center = upper - (upper - lower) / 2;\\n            Checkpoint memory cp = checkpoints[center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n}\\n\",\"keccak256\":\"0xb5ccd2ad5421f03ed9b67825a8e4c89f6b67eb006352fda4bc444fc1f776bfcd\",\"license\":\"MIT\"},\"contracts/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary Math {\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function positiveInt128(int128 value) internal pure returns (int128) {\\n        return value < 0 ? int128(0) : value;\\n    }\\n\\n    function closeTo(\\n        uint a,\\n        uint b,\\n        uint target\\n    ) internal pure returns (bool) {\\n        if (a > b) {\\n            if (a - b <= target) {\\n                return true;\\n            }\\n        } else {\\n            if (b - a <= target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a50db5ef01ef869b1a7df3cf485d6c87473549c70fbefc54bdea34f8bc78538\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        uint newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd09403b2f52a045a82861c53059fb835daabe908fd774f948370979588b3fe1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613bec806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063559a9c0a1461004657806358c14b6514610075578063b46d346514610088575b600080fd5b6100596100543660046102b6565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b610059610083366004610336565b610138565b600054610059906001600160a01b031681565b60008086868686866040516100af906101d4565b6100bd9594939291906103a5565b604051809103906000f0801580156100d9573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0383169081179091556040519081529091507faa98436d09d130af48de49867af8b723bbbebb0d737638b5fe8f1bf31bbb71c09060200160405180910390a19695505050505050565b600080858585338660405161014c906101d4565b61015a9594939291906103a5565b604051809103906000f080158015610176573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0383169081179091556040519081529091507faa98436d09d130af48de49867af8b723bbbebb0d737638b5fe8f1bf31bbb71c09060200160405180910390a195945050505050565b61379c806200041b83390190565b80356001600160a01b03811681146101f957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261022557600080fd5b8135602067ffffffffffffffff80831115610242576102426101fe565b8260051b604051601f19603f83011681018181108482111715610267576102676101fe565b60405293845285810183019383810192508785111561028557600080fd5b83870191505b848210156102ab5761029c826101e2565b8352918301919083019061028b565b979650505050505050565b600080600080600060a086880312156102ce57600080fd5b6102d7866101e2565b94506102e5602087016101e2565b93506102f3604087016101e2565b9250610301606087016101e2565b9150608086013567ffffffffffffffff81111561031d57600080fd5b61032988828901610214565b9150509295509295909350565b6000806000806080858703121561034c57600080fd5b610355856101e2565b9350610363602086016101e2565b9250610371604086016101e2565b9150606085013567ffffffffffffffff81111561038d57600080fd5b61039987828801610214565b91505092959194509250565b600060a0820160018060a01b0380891684526020818916818601528188166040860152818716606086015260a0608086015282865180855260c087019150828801945060005b818110156104095785518516835294830194918301916001016103eb565b50909b9a505050505050505050505056fe608060405260016000553480156200001657600080fd5b506040516200379c3803806200379c83398101604081905262000039916200029d565b600280546001600160a01b038088166001600160a01b031992831617909255600180549285169290911691909117905584828260005b8151811015620000f25760006001600160a01b0316828281518110620000995762000099620003bd565b60200260200101516001600160a01b031614620000dd57620000dd828281518110620000c957620000c9620003bd565b60200260200101516200014c60201b60201c565b80620000e981620003d3565b9150506200006f565b5050601680546001600160a01b03199081166001600160a01b039889161790915560158054610100600160a81b03191661010097891697909702969096179095555050601780549093169190931617905550620003fb9050565b600d54600a11620001a45760405162461bcd60e51b815260206004820152601660248201527f546f6f206d616e792072657761726420746f6b656e730000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0381166000908152600e602052604090205460ff1615620002045760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064016200019b565b6001600160a01b03166000818152600e60205260408120805460ff19166001908117909155600d805491820181559091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319169091179055565b80516001600160a01b03811681146200028257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215620002b657600080fd5b620002c1866200026a565b94506020620002d28188016200026a565b9450620002e2604088016200026a565b9350620002f2606088016200026a565b60808801519093506001600160401b03808211156200031057600080fd5b818901915089601f8301126200032557600080fd5b8151818111156200033a576200033a62000287565b8060051b604051601f19603f8301168101818110858211171562000362576200036262000287565b60405291825284820192508381018501918c8311156200038157600080fd5b938501935b82851015620003aa576200039a856200026a565b8452938501939285019262000386565b8096505050505050509295509295909350565b634e487b7160e01b600052603260045260246000fd5b600060018201620003f457634e487b7160e01b600052601160045260246000fd5b5060010190565b613391806200040b6000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c80637bb7bed111610167578063d294f093116100ce578063e8111a1211610087578063e8111a1214610693578063f12297771461069c578063f7412baf146106af578063fc97a303146106d6578063fd314098146106f6578063fdb483c71461070957600080fd5b8063d294f09314610629578063d35e254414610631578063d7da4bb014610644578063da09d19d1461064d578063e2bbb1581461066d578063e46dbc981461068057600080fd5b8063aa47965211610120578063aa4796521461059b578063b5fd73f8146105bb578063b66503cf146105ee578063bf199e6214610601578063c6f678bd14610609578063ccc6bc441461061c57600080fd5b80637bb7bed114610519578063853828b61461052c57806393f1c4421461053457806399bcc0521461053d5780639ce43f9014610550578063a495e5b51461057057600080fd5b80633ca068b61161020b57806363fb415b116101c457806363fb415b1461048057806368fcee1a146104a05780636f307dc3146104b35780636fcfff45146104c657806370a08231146104e657806376f4be361461050657600080fd5b80633ca068b6146104005780633d509c971461042b57806346c96aac1461043e5780634c02a21c14610451578063570ca7351461045a578063622e178a1461046d57600080fd5b8063211dc32d1161025d578063211dc32d14610372578063221ca18c146103855780632ce9aead146103a55780632e1a7d4d146103c557806331279d3d146103da57806337d0208c146103ed57600080fd5b806301316ddf1461029a5780630cdfebfa146102e6578063115c6f391461031857806318160ddd146103395780631f85071614610342575b600080fd5b6102cc6102a8366004612f49565b60136020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152015b60405180910390f35b6102cc6102f4366004612f49565b600f6020908152600092835260408084209091529082529020805460019091015482565b61032b610326366004612f49565b61071c565b6040519081526020016102dd565b61032b600b5481565b60155461035a9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016102dd565b61032b610380366004612f75565b610731565b61032b610393366004612fae565b60056020526000908152604090205481565b61032b6103b3366004612fae565b60076020526000908152604090205481565b6103d86103d3366004612fcb565b61073d565b005b6103d86103e8366004612ffa565b6107df565b60165461035a906001600160a01b031681565b61032b61040e366004612f75565b600a60209081526000928352604080842090915290825290205481565b6103d8610439366004612fae565b6108a9565b60175461035a906001600160a01b031681565b61032b601a5481565b60015461035a906001600160a01b031681565b6103d861047b3660046130e2565b610b65565b61032b61048e366004612fae565b60046020526000908152604090205481565b6103d86104ae366004612f49565b610ba2565b60025461035a906001600160a01b031681565b61032b6104d4366004612fae565b60106020526000908152604090205481565b61032b6104f4366004612fae565b600c6020526000908152604090205481565b61032b610514366004612fcb565b610bdc565b61035a610527366004612fcb565b610be7565b6103d8610c11565b61032b60195481565b61032b61054b366004612fae565b610c2c565b61032b61055e366004612fae565b60086020526000908152604090205481565b61032b61057e366004612f75565b600960209081526000928352604080842090915290825290205481565b61032b6105a9366004612fae565b60146020526000908152604090205481565b6105de6105c9366004612fae565b600e6020526000908152604090205460ff1681565b60405190151581526020016102dd565b6103d86105fc366004612f49565b610cb8565b600d5461032b565b6103d8610617366004612fcb565b610ccc565b6015546105de9060ff1681565b6102cc610d43565b61032b61063f366004612fae565b610d82565b61032b60035481565b61032b61065b366004612fae565b60066020526000908152604090205481565b6103d861067b3660046130ff565b610d8d565b6103d861068e366004612fae565b610de4565b61032b60125481565b61032b6106aa366004612fae565b610e17565b6102cc6106bd366004612fcb565b6011602052600090815260409020805460019091015482565b61032b6106e4366004612fae565b60186020526000908152604090205481565b6102cc610704366004612f49565b610e22565b6103d86107173660046130ff565b610e3b565b60006107288383610e54565b90505b92915050565b60006107288383610ea9565b336000908152600c602052604081205482036107655750336000908152601860205260409020545b61076f8282610e3b565b601754604051633aa53b9160e21b815260048101839052336024820152604481018490526001600160a01b039091169063ea94ee44906064015b600060405180830381600087803b1580156107c357600080fd5b505af11580156107d7573d6000803e3d6000fd5b505050505050565b336001600160a01b038316148061080057506017546001600160a01b031633145b61083d5760405162461bcd60e51b81526020600482015260096024820152682337b93134b23232b760b91b60448201526064015b60405180910390fd5b6017546040516363453ae160e01b81523060048201526001600160a01b03909116906363453ae190602401600060405180830381600087803b15801561088257600080fd5b505af1158015610896573d6000803e3d6000fd5b505050506108a582828461112a565b5050565b6001546001600160a01b031633146108d35760405162461bcd60e51b815260040161083490613121565b6001600160a01b038116600090815260066020526040902054421161092e5760405162461bcd60e51b815260206004820152601160248201527014995dd85c991cc81b9bdd08195b991959607a1b6044820152606401610834565b6001600160a01b0381166000908152600e602052604090205460ff166109895760405162461bcd60e51b815260206004820152601060248201526f2737ba103932bbb0b932103a37b5b2b760811b6044820152606401610834565b6001600160a01b0381166000908152600e60205260409020805460ff19169055600d5460038111610a085760405162461bcd60e51b8152602060048201526024808201527f4669727374203320746f6b656e732073686f756c64206e6f742062652072656d6044820152631bdd995960e21b6064820152608401610834565b600360005b82821015610a68576000600d8381548110610a2a57610a2a613147565b6000918252602090912001546001600160a01b03908116915085168103610a55576001915050610a68565b5081610a6081613173565b925050610a0d565b80610ab55760405162461bcd60e51b815260206004820181905260248201527f466972737420746f6b656e7320666f7262696464656e20746f2072656d6f76656044820152606401610834565b600d610ac260018561318c565b81548110610ad257610ad2613147565b600091825260209091200154600d80546001600160a01b039092169184908110610afe57610afe613147565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600d805480610b3d57610b3d6131a3565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b6001546001600160a01b03163314610b8f5760405162461bcd60e51b815260040161083490613121565b6015805460ff1916911515919091179055565b610bae82826000611403565b6001600160a01b03909316600090815260086020908152604080832060079092529091209390935590915550565b600061072b826115f3565b600d8181548110610bf757600080fd5b6000918252602090912001546001600160a01b0316905081565b336000908152600c6020526040902054610c2a9061073d565b565b6001600160a01b0381166000908152600660205260408120544210610c5357506000919050565b6001600160a01b038216600090815260066020526040812054610c7790429061318c565b6001600160a01b038416600090815260056020526040902054909150670de0b6b3a764000090610ca790836131b9565b610cb191906131d8565b9392505050565b610cc0611615565b50506108a5828261197e565b6002546040516370a0823160e01b8152336004820152610d40916001600160a01b0316906370a0823190602401602060405180830381865afa158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a91906131fa565b82610d8d565b50565b600080600054600114610d685760405162461bcd60e51b815260040161083490613213565b6002600055610d75611615565b9150915060016000559091565b600061072b82611d0b565b8015610d9d57610d9d3382611f1e565b610da682612114565b60175460405163530e389d60e11b815260048101839052336024820152604481018490526001600160a01b039091169063a61c713a906064016107a9565b6001546001600160a01b03163314610e0e5760405162461bcd60e51b815260040161083490613121565b610d40816121d6565b600061072b826122e5565b600080610e2f8484612390565b915091505b9250929050565b8015610e4b57610e4b338261241a565b6108a582612525565b6001600160a01b038216600090815260106020526040812054808203610e7e57600091505061072b565b6001600160a01b0384166000908152600f60205260409020610ea190828561259f565b949350505050565b6001600160a01b0381166000908152601060205260408120548103610ed05750600061072b565b6001600160a01b03808416600081815260096020908152604080832094871683529381528382205492825260138152838220828052905291822054610f1591906126e5565b90506000610f238483610e54565b6001600160a01b03851660009081526010602052604081205491925090610f4c9060019061318c565b90506000811561105e57825b610f6360018461318c565b811161105c576001600160a01b0387166000818152600f602081815260408084208685528083528185208251808401909352805483526001908101548385015295855292909152928290610fb890869061323b565b81526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000610ff78b8460000151612390565b509050600061100a8c8460000151612390565b509050670de0b6b3a7640000611020838361318c565b856020015161102f91906131b9565b61103991906131d8565b611043908761323b565b955050505050808061105490613173565b915050610f58565b505b6001600160a01b0386166000908152600f602090815260408083208584528252808320815180830190925280548083526001909101549282019290925291906110a8908a90612390565b506001600160a01b03808b166000908152600a60209081526040808320938d1683529290522054909150670de0b6b3a7640000906110e79083906126e5565b6110f08b6122e5565b6110fa919061318c565b836020015161110991906131b9565b61111391906131d8565b61111d908461323b565b9998505050505050505050565b60005460011461114c5760405162461bcd60e51b815260040161083490613213565b600260009081555b82518110156113ef5761118483828151811061117257611172613147565b60200260200101516000196001611403565b6008600086858151811061119a5761119a613147565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000600760008887815181106111da576111da613147565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000849190505583919050555050600061123584838151811061122757611227613147565b602002602001015186610ea9565b9050426009600086858151811061124e5761124e613147565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002081905550600860008584815181106112b3576112b3613147565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054600a60008685815181106112f2576112f2613147565b6020908102919091018101516001600160a01b0390811683528282019390935260409182016000908120938a168152929052902055801561136457611364838286858151811061134457611344613147565b60200260200101516001600160a01b03166126fc9092919063ffffffff16565b83828151811061137657611376613147565b60200260200101516001600160a01b0316336001600160a01b03167fe4394b3c25e336e9d6b7fcefab7e3234f1c6b373f13655dc3920664b080b098d83866040516113d49291909182526001600160a01b0316602082015260400190565b60405180910390a350806113e781613173565b915050611154565b506113f983612764565b5050600160005550565b6001600160a01b038316600090815260076020908152604080832054600890925282205460125483929190830361143d57925090506115eb565b6001600160a01b03871660009081526005602052604081205490036114685792504291506115eb9050565b6000611473836115f3565b9050600061148f6001601254611489919061318c565b896127e9565b9050801561156857815b6114a460018361318c565b81116115665760008181526011602090815260409182902082518084019093528054835260010154908201819052156115535760006011816114e785600161323b565b81526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000806115328e8460000151866000015187602001518d6127f8565b9092509050611541828961323b565b975061154e8e898361287c565b975050505b508061155e81613173565b915050611499565b505b86156115e25760008181526011602090815260409182902082518084019093528054835260010154908201819052156115e05760006115c18b6115aa8d612985565b84516115b6908a6126e5565b85602001518a6127f8565b5090506115ce818661323b565b94506115db8b864261287c565b429550505b505b50909350909150505b935093915050565b6012546000908082036116095750600092915050565b610cb16011828561259f565b6002546040805163d294f09360e01b8152815160009384936001600160a01b0390911692839263d294f09392600480840193919291829003018188875af1158015611664573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116889190613253565b90935091508215158061169b5750600082115b15611979576000836019546116b0919061323b565b9050600083601a546116c2919061323b565b9050600080846001600160a01b0316639d63848a6040518163ffffffff1660e01b81526004016040805180830381865afa158015611704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117289190613277565b601654604051634cde602960e11b81526001600160a01b03808516600483015293955091935091909116906399bcc05290602401602060405180830381865afa158015611779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179d91906131fa565b84111561182e5760006019556016546117c3906001600160a01b038481169116866129a9565b60165460405163b66503cf60e01b81526001600160a01b038481166004830152602482018790529091169063b66503cf90604401600060405180830381600087803b15801561181157600080fd5b505af1158015611825573d6000803e3d6000fd5b50505050611834565b60198490555b601654604051634cde602960e11b81526001600160a01b038381166004830152909116906399bcc05290602401602060405180830381865afa15801561187e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a291906131fa565b831115611933576000601a556016546118c8906001600160a01b038381169116856129a9565b60165460405163b66503cf60e01b81526001600160a01b038381166004830152602482018690529091169063b66503cf90604401600060405180830381600087803b15801561191657600080fd5b505af115801561192a573d6000803e3d6000fd5b50505050611939565b601a8390555b604080518881526020810188905233917fbc567d6cbad26368064baa0ab5a757be46aae4d70f707f9203d9d9b6c8ccbfa3910160405180910390a2505050505b509091565b6000546001146119a05760405162461bcd60e51b815260040161083490613213565b60026000819055546001600160a01b0390811690831603611a035760405162461bcd60e51b815260206004820152601760248201527f57726f6e6720746f6b656e20666f7220726577617264730000000000000000006044820152606401610834565b60008111611a415760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610834565b6001600160a01b0382166000908152600e602052604090205460ff16611a9d5760405162461bcd60e51b8152602060048201526011602482015270151bdad95b881b9bdd08185b1b1bddd959607a1b6044820152606401610834565b6001600160a01b0382166000908152600560205260408120549003611ac857611ac88260004261287c565b611ad6826000196001611403565b6001600160a01b0384166000908152600860209081526040808320600783528184209490945593909255600690915220544210611b6057611b226001600160a01b038316333084612a5b565b62093a80611b38670de0b6b3a7640000836131b9565b611b4291906131d8565b6001600160a01b038316600090815260056020526040902055611c9c565b6001600160a01b038216600090815260066020526040812054611b8490429061318c565b6001600160a01b03841660009081526005602052604081205491925090611bab90836131b9565b60155490915060ff161580611bdd575060155460ff168015611bdd5750611bda670de0b6b3a7640000826131d8565b83115b611c405760405162461bcd60e51b815260206004820152602e60248201527f416d6f756e742073686f756c6420626520686967686572207468616e2072656d60448201526d61696e696e67207265776172647360901b6064820152608401610834565b611c556001600160a01b038516333086612a5b565b62093a8081611c6c670de0b6b3a7640000866131b9565b611c76919061323b565b611c8091906131d8565b6001600160a01b03851660009081526005602052604090205550505b611ca962093a804261323b565b6001600160a01b0383166000818152600660205260409081902092909255905133907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf5082690611cfa9085815260200190565b60405180910390a350506001600055565b6001600160a01b038116600090815260186020908152604080832054600c909252822054826064611d3d8360286131b9565b611d4791906131d8565b9050600080601560019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc391906131fa565b6015546040516331a9108f60e11b81526004810188905291925061010090046001600160a01b031690636352211e90602401602060405180830381865afa158015611e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3691906132a6565b6001600160a01b0316876001600160a01b0316148015611e565750600081115b15611f00576015546040516339f890b560e21b81526004810187905260649183916101009091046001600160a01b03169063e7e242d490602401602060405180830381865afa158015611ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed191906131fa565b600b54611ede91906131b9565b611ee891906131d8565b611ef390603c6131b9565b611efd91906131d8565b91505b611f13611f0d838561323b565b856127e9565b979650505050505050565b6015546040516331a9108f60e11b8152600481018390526001600160a01b038481169261010090041690636352211e90602401602060405180830381865afa158015611f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9291906132a6565b6001600160a01b031614611fdd5760405162461bcd60e51b81526020600482015260126024820152712737ba103b32903a37b5b2b71037bbb732b960711b6044820152606401610834565b6001600160a01b0382166000908152601860205260408120549003612078576001600160a01b0382811660008181526018602052604090819020849055601754905163698473e360e01b81526004810185905260248101929092529091169063698473e390604401600060405180830381600087803b15801561205f57600080fd5b505af1158015612073573d6000803e3d6000fd5b505050505b6001600160a01b03821660009081526018602052604090205481146120cd5760405162461bcd60e51b815260206004820152600b60248201526a2bb937b733903a37b5b2b760a91b6044820152606401610834565b816001600160a01b03167fa88ad287ee039276852a62661add3a03e736aca1a2987ceaebcf4ecfd018ae3f8260405161210891815260200190565b60405180910390a25050565b6000546001146121365760405162461bcd60e51b815260040161083490613213565b6002600055806121765760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610834565b6121803382612a93565b600254612198906001600160a01b0316333084612a5b565b60405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c906020015b60405180910390a2506001600055565b600d54600a116122215760405162461bcd60e51b8152602060048201526016602482015275546f6f206d616e792072657761726420746f6b656e7360501b6044820152606401610834565b6001600160a01b0381166000908152600e602052604090205460ff161561227f5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401610834565b6001600160a01b03166000818152600e60205260408120805460ff19166001908117909155600d805491820181559091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319169091179055565b600060035460000361230d57506001600160a01b031660009081526008602052604090205490565b6003546001600160a01b0383166000908152600560209081526040808320546007835281842054600690935292205461234691906127e9565b61234f85612985565b612359919061318c565b61236391906131b9565b61236d91906131d8565b6001600160a01b03831660009081526008602052604090205461072b919061323b565b6001600160a01b03821660009081526014602052604081205481908082036123bf576000809250925050610e34565b6001600160a01b0385166000908152601360205260408120906123e382848861259f565b6000908152602092835260409081902081518083019092528054808352600190910154919093018190529791965090945050505050565b6001600160a01b038216600090815260186020526040902054811461246f5760405162461bcd60e51b815260206004820152600b60248201526a2bb937b733903a37b5b2b760a91b6044820152606401610834565b6001600160a01b0382811660008181526018602052604080822091909155601754905163411b1f7760e01b81526004810185905260248101929092529091169063411b1f7790604401600060405180830381600087803b1580156124d257600080fd5b505af11580156124e6573d6000803e3d6000fd5b50505050816001600160a01b03167f25842dad107a4bb4efa3824996f6140a5f6f3de5197debed6d780dc08bb0a0a08260405161210891815260200190565b6000546001146125475760405162461bcd60e51b815260040161083490613213565b60026000556125563382612ae9565b60025461256d906001600160a01b031633836126fc565b60405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020016121c6565b6000826000036125e55760405162461bcd60e51b8152602060048201526011602482015270456d70747920636865636b706f696e747360781b6044820152606401610834565b818460006125f460018761318c565b8152602001908152602001600020600001541161261d5761261660018461318c565b9050610cb1565b60008080526020859052604090205482101561263b57506000610cb1565b60008061264960018661318c565b90505b818111156126dc5760006002612662848461318c565b61266c91906131d8565b612676908361318c565b600081815260208981526040918290208251808401909352805480845260019091015491830191909152919250908690036126b657509250610cb1915050565b80518611156126c7578193506126d5565b6126d260018361318c565b92505b505061264c565b50949350505050565b6000818310156126f55781610728565b5090919050565b6040516001600160a01b03831660248201526044810182905261275f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612b30565b505050565b6001600160a01b038116600090815260046020526040812054600380549192839261279090849061318c565b9091555061279f905082611d0b565b6001600160a01b03831660009081526004602052604081208290556003805492935083929091906127d190849061323b565b909155506127e190508282612c02565b6108a5612cf3565b60008183106126f55781610728565b600080600061280787856126e5565b6001600160a01b03891660009081526006602090815260408083205460059092529091205491925090869061284561283f8a896126e5565b846127e9565b61284f85856127e9565b612859919061318c565b61286391906131b9565b61286d91906131d8565b99919850909650505050505050565b6001600160a01b03831660009081526014602052604090205480158015906128d857506001600160a01b038416600090815260136020526040812083916128c460018561318c565b815260200190815260200160002060000154145b1561291b576001600160a01b0384166000908152601360205260408120849161290260018561318c565b815260208101919091526040016000206001015561297f565b60408051808201825283815260208082018681526001600160a01b03881660009081526013835284812086825290925292902090518155905160019182015561296590829061323b565b6001600160a01b0385166000908152601460205260409020555b50505050565b6001600160a01b03811660009081526006602052604081205461072b9042906127e9565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156129fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1e91906131fa565b612a28919061323b565b6040516001600160a01b03851660248201526044810182905290915061297f90859063095ea7b360e01b90606401612728565b6040516001600160a01b038085166024830152831660448201526064810182905261297f9085906323b872dd60e01b90608401612728565b612a9b612d97565b80600b6000828254612aad919061323b565b90915550506001600160a01b0382166000908152600c602052604081208054839290612ada90849061323b565b909155506108a5905082612764565b612af1612d97565b80600b6000828254612b03919061318c565b90915550506001600160a01b0382166000908152600c602052604081208054839290612ada90849061318c565b6000612b85826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e1b9092919063ffffffff16565b80519091501561275f5780806020019051810190612ba391906132c3565b61275f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610834565b6001600160a01b03821660009081526010602052604090205442908015801590612c6057506001600160a01b0384166000908152600f602052604081208391612c4c60018561318c565b815260200190815260200160002060000154145b15612c8a576001600160a01b0384166000908152600f60205260408120849161290260018561318c565b60408051808201825283815260208082018681526001600160a01b0388166000908152600f8352848120868252909252929020905181559051600191820155612cd490829061323b565b6001600160a01b03851660009081526010602052604090205550505050565b601254428115801590612d2557508060116000612d1160018661318c565b815260200190815260200160002060000154145b15612d545760035460116000612d3c60018661318c565b81526020810191909152604001600020600101555050565b60408051808201825282815260035460208083019182526000868152601190915292909220905181559051600191820155612d9090839061323b565b6012555050565b600d5460005b818110156108a5576000600d8281548110612dba57612dba613147565b6000918252602090912001546001600160a01b03169050612ddf816000196001611403565b6001600160a01b039092166000908152600860209081526040808320600790925290912092909255905580612e1381613173565b915050612d9d565b60606001600160a01b0384163b612e745760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610834565b600080856001600160a01b031685604051612e8f919061330c565b6000604051808303816000865af19150503d8060008114612ecc576040519150601f19603f3d011682016040523d82523d6000602084013e612ed1565b606091505b5091509150612ee1828286612eeb565b9695505050505050565b60608315612efa575081610cb1565b825115612f0a5782518084602001fd5b8160405162461bcd60e51b81526004016108349190613328565b6001600160a01b0381168114610d4057600080fd5b8035612f4481612f24565b919050565b60008060408385031215612f5c57600080fd5b8235612f6781612f24565b946020939093013593505050565b60008060408385031215612f8857600080fd5b8235612f9381612f24565b91506020830135612fa381612f24565b809150509250929050565b600060208284031215612fc057600080fd5b8135610cb181612f24565b600060208284031215612fdd57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561300d57600080fd5b823561301881612f24565b915060208381013567ffffffffffffffff8082111561303657600080fd5b818601915086601f83011261304a57600080fd5b81358181111561305c5761305c612fe4565b8060051b604051601f19603f8301168101818110858211171561308157613081612fe4565b60405291825284820192508381018501918983111561309f57600080fd5b938501935b828510156130c4576130b585612f39565b845293850193928501926130a4565b8096505050505050509250929050565b8015158114610d4057600080fd5b6000602082840312156130f457600080fd5b8135610cb1816130d4565b6000806040838503121561311257600080fd5b50508035926020909101359150565b6020808252600c908201526b2737ba1037b832b930ba37b960a11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016131855761318561315d565b5060010190565b60008282101561319e5761319e61315d565b500390565b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156131d3576131d361315d565b500290565b6000826131f557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561320c57600080fd5b5051919050565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b6000821982111561324e5761324e61315d565b500190565b6000806040838503121561326657600080fd5b505080516020909101519092909150565b6000806040838503121561328a57600080fd5b825161329581612f24565b6020840151909250612fa381612f24565b6000602082840312156132b857600080fd5b8151610cb181612f24565b6000602082840312156132d557600080fd5b8151610cb1816130d4565b60005b838110156132fb5781810151838201526020016132e3565b8381111561297f5750506000910152565b6000825161331e8184602087016132e0565b9190910192915050565b60208152600082518060208401526133478160408501602087016132e0565b601f01601f1916919091016040019291505056fea2646970667358221220562eb4577df6b254e757d26097236f68318d81cdef334c6b733ca914a1a4dba464736f6c634300080d0033a2646970667358221220526552d8c5c82d477d81c44ddd24c7e23ef4aeff3ad975d72703a24bfb9a6b5464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063559a9c0a1461004657806358c14b6514610075578063b46d346514610088575b600080fd5b6100596100543660046102b6565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b610059610083366004610336565b610138565b600054610059906001600160a01b031681565b60008086868686866040516100af906101d4565b6100bd9594939291906103a5565b604051809103906000f0801580156100d9573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0383169081179091556040519081529091507faa98436d09d130af48de49867af8b723bbbebb0d737638b5fe8f1bf31bbb71c09060200160405180910390a19695505050505050565b600080858585338660405161014c906101d4565b61015a9594939291906103a5565b604051809103906000f080158015610176573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0383169081179091556040519081529091507faa98436d09d130af48de49867af8b723bbbebb0d737638b5fe8f1bf31bbb71c09060200160405180910390a195945050505050565b61379c806200041b83390190565b80356001600160a01b03811681146101f957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261022557600080fd5b8135602067ffffffffffffffff80831115610242576102426101fe565b8260051b604051601f19603f83011681018181108482111715610267576102676101fe565b60405293845285810183019383810192508785111561028557600080fd5b83870191505b848210156102ab5761029c826101e2565b8352918301919083019061028b565b979650505050505050565b600080600080600060a086880312156102ce57600080fd5b6102d7866101e2565b94506102e5602087016101e2565b93506102f3604087016101e2565b9250610301606087016101e2565b9150608086013567ffffffffffffffff81111561031d57600080fd5b61032988828901610214565b9150509295509295909350565b6000806000806080858703121561034c57600080fd5b610355856101e2565b9350610363602086016101e2565b9250610371604086016101e2565b9150606085013567ffffffffffffffff81111561038d57600080fd5b61039987828801610214565b91505092959194509250565b600060a0820160018060a01b0380891684526020818916818601528188166040860152818716606086015260a0608086015282865180855260c087019150828801945060005b818110156104095785518516835294830194918301916001016103eb565b50909b9a505050505050505050505056fe608060405260016000553480156200001657600080fd5b506040516200379c3803806200379c83398101604081905262000039916200029d565b600280546001600160a01b038088166001600160a01b031992831617909255600180549285169290911691909117905584828260005b8151811015620000f25760006001600160a01b0316828281518110620000995762000099620003bd565b60200260200101516001600160a01b031614620000dd57620000dd828281518110620000c957620000c9620003bd565b60200260200101516200014c60201b60201c565b80620000e981620003d3565b9150506200006f565b5050601680546001600160a01b03199081166001600160a01b039889161790915560158054610100600160a81b03191661010097891697909702969096179095555050601780549093169190931617905550620003fb9050565b600d54600a11620001a45760405162461bcd60e51b815260206004820152601660248201527f546f6f206d616e792072657761726420746f6b656e730000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0381166000908152600e602052604090205460ff1615620002045760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064016200019b565b6001600160a01b03166000818152600e60205260408120805460ff19166001908117909155600d805491820181559091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319169091179055565b80516001600160a01b03811681146200028257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215620002b657600080fd5b620002c1866200026a565b94506020620002d28188016200026a565b9450620002e2604088016200026a565b9350620002f2606088016200026a565b60808801519093506001600160401b03808211156200031057600080fd5b818901915089601f8301126200032557600080fd5b8151818111156200033a576200033a62000287565b8060051b604051601f19603f8301168101818110858211171562000362576200036262000287565b60405291825284820192508381018501918c8311156200038157600080fd5b938501935b82851015620003aa576200039a856200026a565b8452938501939285019262000386565b8096505050505050509295509295909350565b634e487b7160e01b600052603260045260246000fd5b600060018201620003f457634e487b7160e01b600052601160045260246000fd5b5060010190565b613391806200040b6000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c80637bb7bed111610167578063d294f093116100ce578063e8111a1211610087578063e8111a1214610693578063f12297771461069c578063f7412baf146106af578063fc97a303146106d6578063fd314098146106f6578063fdb483c71461070957600080fd5b8063d294f09314610629578063d35e254414610631578063d7da4bb014610644578063da09d19d1461064d578063e2bbb1581461066d578063e46dbc981461068057600080fd5b8063aa47965211610120578063aa4796521461059b578063b5fd73f8146105bb578063b66503cf146105ee578063bf199e6214610601578063c6f678bd14610609578063ccc6bc441461061c57600080fd5b80637bb7bed114610519578063853828b61461052c57806393f1c4421461053457806399bcc0521461053d5780639ce43f9014610550578063a495e5b51461057057600080fd5b80633ca068b61161020b57806363fb415b116101c457806363fb415b1461048057806368fcee1a146104a05780636f307dc3146104b35780636fcfff45146104c657806370a08231146104e657806376f4be361461050657600080fd5b80633ca068b6146104005780633d509c971461042b57806346c96aac1461043e5780634c02a21c14610451578063570ca7351461045a578063622e178a1461046d57600080fd5b8063211dc32d1161025d578063211dc32d14610372578063221ca18c146103855780632ce9aead146103a55780632e1a7d4d146103c557806331279d3d146103da57806337d0208c146103ed57600080fd5b806301316ddf1461029a5780630cdfebfa146102e6578063115c6f391461031857806318160ddd146103395780631f85071614610342575b600080fd5b6102cc6102a8366004612f49565b60136020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152015b60405180910390f35b6102cc6102f4366004612f49565b600f6020908152600092835260408084209091529082529020805460019091015482565b61032b610326366004612f49565b61071c565b6040519081526020016102dd565b61032b600b5481565b60155461035a9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016102dd565b61032b610380366004612f75565b610731565b61032b610393366004612fae565b60056020526000908152604090205481565b61032b6103b3366004612fae565b60076020526000908152604090205481565b6103d86103d3366004612fcb565b61073d565b005b6103d86103e8366004612ffa565b6107df565b60165461035a906001600160a01b031681565b61032b61040e366004612f75565b600a60209081526000928352604080842090915290825290205481565b6103d8610439366004612fae565b6108a9565b60175461035a906001600160a01b031681565b61032b601a5481565b60015461035a906001600160a01b031681565b6103d861047b3660046130e2565b610b65565b61032b61048e366004612fae565b60046020526000908152604090205481565b6103d86104ae366004612f49565b610ba2565b60025461035a906001600160a01b031681565b61032b6104d4366004612fae565b60106020526000908152604090205481565b61032b6104f4366004612fae565b600c6020526000908152604090205481565b61032b610514366004612fcb565b610bdc565b61035a610527366004612fcb565b610be7565b6103d8610c11565b61032b60195481565b61032b61054b366004612fae565b610c2c565b61032b61055e366004612fae565b60086020526000908152604090205481565b61032b61057e366004612f75565b600960209081526000928352604080842090915290825290205481565b61032b6105a9366004612fae565b60146020526000908152604090205481565b6105de6105c9366004612fae565b600e6020526000908152604090205460ff1681565b60405190151581526020016102dd565b6103d86105fc366004612f49565b610cb8565b600d5461032b565b6103d8610617366004612fcb565b610ccc565b6015546105de9060ff1681565b6102cc610d43565b61032b61063f366004612fae565b610d82565b61032b60035481565b61032b61065b366004612fae565b60066020526000908152604090205481565b6103d861067b3660046130ff565b610d8d565b6103d861068e366004612fae565b610de4565b61032b60125481565b61032b6106aa366004612fae565b610e17565b6102cc6106bd366004612fcb565b6011602052600090815260409020805460019091015482565b61032b6106e4366004612fae565b60186020526000908152604090205481565b6102cc610704366004612f49565b610e22565b6103d86107173660046130ff565b610e3b565b60006107288383610e54565b90505b92915050565b60006107288383610ea9565b336000908152600c602052604081205482036107655750336000908152601860205260409020545b61076f8282610e3b565b601754604051633aa53b9160e21b815260048101839052336024820152604481018490526001600160a01b039091169063ea94ee44906064015b600060405180830381600087803b1580156107c357600080fd5b505af11580156107d7573d6000803e3d6000fd5b505050505050565b336001600160a01b038316148061080057506017546001600160a01b031633145b61083d5760405162461bcd60e51b81526020600482015260096024820152682337b93134b23232b760b91b60448201526064015b60405180910390fd5b6017546040516363453ae160e01b81523060048201526001600160a01b03909116906363453ae190602401600060405180830381600087803b15801561088257600080fd5b505af1158015610896573d6000803e3d6000fd5b505050506108a582828461112a565b5050565b6001546001600160a01b031633146108d35760405162461bcd60e51b815260040161083490613121565b6001600160a01b038116600090815260066020526040902054421161092e5760405162461bcd60e51b815260206004820152601160248201527014995dd85c991cc81b9bdd08195b991959607a1b6044820152606401610834565b6001600160a01b0381166000908152600e602052604090205460ff166109895760405162461bcd60e51b815260206004820152601060248201526f2737ba103932bbb0b932103a37b5b2b760811b6044820152606401610834565b6001600160a01b0381166000908152600e60205260409020805460ff19169055600d5460038111610a085760405162461bcd60e51b8152602060048201526024808201527f4669727374203320746f6b656e732073686f756c64206e6f742062652072656d6044820152631bdd995960e21b6064820152608401610834565b600360005b82821015610a68576000600d8381548110610a2a57610a2a613147565b6000918252602090912001546001600160a01b03908116915085168103610a55576001915050610a68565b5081610a6081613173565b925050610a0d565b80610ab55760405162461bcd60e51b815260206004820181905260248201527f466972737420746f6b656e7320666f7262696464656e20746f2072656d6f76656044820152606401610834565b600d610ac260018561318c565b81548110610ad257610ad2613147565b600091825260209091200154600d80546001600160a01b039092169184908110610afe57610afe613147565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600d805480610b3d57610b3d6131a3565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b6001546001600160a01b03163314610b8f5760405162461bcd60e51b815260040161083490613121565b6015805460ff1916911515919091179055565b610bae82826000611403565b6001600160a01b03909316600090815260086020908152604080832060079092529091209390935590915550565b600061072b826115f3565b600d8181548110610bf757600080fd5b6000918252602090912001546001600160a01b0316905081565b336000908152600c6020526040902054610c2a9061073d565b565b6001600160a01b0381166000908152600660205260408120544210610c5357506000919050565b6001600160a01b038216600090815260066020526040812054610c7790429061318c565b6001600160a01b038416600090815260056020526040902054909150670de0b6b3a764000090610ca790836131b9565b610cb191906131d8565b9392505050565b610cc0611615565b50506108a5828261197e565b6002546040516370a0823160e01b8152336004820152610d40916001600160a01b0316906370a0823190602401602060405180830381865afa158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a91906131fa565b82610d8d565b50565b600080600054600114610d685760405162461bcd60e51b815260040161083490613213565b6002600055610d75611615565b9150915060016000559091565b600061072b82611d0b565b8015610d9d57610d9d3382611f1e565b610da682612114565b60175460405163530e389d60e11b815260048101839052336024820152604481018490526001600160a01b039091169063a61c713a906064016107a9565b6001546001600160a01b03163314610e0e5760405162461bcd60e51b815260040161083490613121565b610d40816121d6565b600061072b826122e5565b600080610e2f8484612390565b915091505b9250929050565b8015610e4b57610e4b338261241a565b6108a582612525565b6001600160a01b038216600090815260106020526040812054808203610e7e57600091505061072b565b6001600160a01b0384166000908152600f60205260409020610ea190828561259f565b949350505050565b6001600160a01b0381166000908152601060205260408120548103610ed05750600061072b565b6001600160a01b03808416600081815260096020908152604080832094871683529381528382205492825260138152838220828052905291822054610f1591906126e5565b90506000610f238483610e54565b6001600160a01b03851660009081526010602052604081205491925090610f4c9060019061318c565b90506000811561105e57825b610f6360018461318c565b811161105c576001600160a01b0387166000818152600f602081815260408084208685528083528185208251808401909352805483526001908101548385015295855292909152928290610fb890869061323b565b81526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000610ff78b8460000151612390565b509050600061100a8c8460000151612390565b509050670de0b6b3a7640000611020838361318c565b856020015161102f91906131b9565b61103991906131d8565b611043908761323b565b955050505050808061105490613173565b915050610f58565b505b6001600160a01b0386166000908152600f602090815260408083208584528252808320815180830190925280548083526001909101549282019290925291906110a8908a90612390565b506001600160a01b03808b166000908152600a60209081526040808320938d1683529290522054909150670de0b6b3a7640000906110e79083906126e5565b6110f08b6122e5565b6110fa919061318c565b836020015161110991906131b9565b61111391906131d8565b61111d908461323b565b9998505050505050505050565b60005460011461114c5760405162461bcd60e51b815260040161083490613213565b600260009081555b82518110156113ef5761118483828151811061117257611172613147565b60200260200101516000196001611403565b6008600086858151811061119a5761119a613147565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000600760008887815181106111da576111da613147565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000849190505583919050555050600061123584838151811061122757611227613147565b602002602001015186610ea9565b9050426009600086858151811061124e5761124e613147565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002081905550600860008584815181106112b3576112b3613147565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054600a60008685815181106112f2576112f2613147565b6020908102919091018101516001600160a01b0390811683528282019390935260409182016000908120938a168152929052902055801561136457611364838286858151811061134457611344613147565b60200260200101516001600160a01b03166126fc9092919063ffffffff16565b83828151811061137657611376613147565b60200260200101516001600160a01b0316336001600160a01b03167fe4394b3c25e336e9d6b7fcefab7e3234f1c6b373f13655dc3920664b080b098d83866040516113d49291909182526001600160a01b0316602082015260400190565b60405180910390a350806113e781613173565b915050611154565b506113f983612764565b5050600160005550565b6001600160a01b038316600090815260076020908152604080832054600890925282205460125483929190830361143d57925090506115eb565b6001600160a01b03871660009081526005602052604081205490036114685792504291506115eb9050565b6000611473836115f3565b9050600061148f6001601254611489919061318c565b896127e9565b9050801561156857815b6114a460018361318c565b81116115665760008181526011602090815260409182902082518084019093528054835260010154908201819052156115535760006011816114e785600161323b565b81526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000806115328e8460000151866000015187602001518d6127f8565b9092509050611541828961323b565b975061154e8e898361287c565b975050505b508061155e81613173565b915050611499565b505b86156115e25760008181526011602090815260409182902082518084019093528054835260010154908201819052156115e05760006115c18b6115aa8d612985565b84516115b6908a6126e5565b85602001518a6127f8565b5090506115ce818661323b565b94506115db8b864261287c565b429550505b505b50909350909150505b935093915050565b6012546000908082036116095750600092915050565b610cb16011828561259f565b6002546040805163d294f09360e01b8152815160009384936001600160a01b0390911692839263d294f09392600480840193919291829003018188875af1158015611664573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116889190613253565b90935091508215158061169b5750600082115b15611979576000836019546116b0919061323b565b9050600083601a546116c2919061323b565b9050600080846001600160a01b0316639d63848a6040518163ffffffff1660e01b81526004016040805180830381865afa158015611704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117289190613277565b601654604051634cde602960e11b81526001600160a01b03808516600483015293955091935091909116906399bcc05290602401602060405180830381865afa158015611779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179d91906131fa565b84111561182e5760006019556016546117c3906001600160a01b038481169116866129a9565b60165460405163b66503cf60e01b81526001600160a01b038481166004830152602482018790529091169063b66503cf90604401600060405180830381600087803b15801561181157600080fd5b505af1158015611825573d6000803e3d6000fd5b50505050611834565b60198490555b601654604051634cde602960e11b81526001600160a01b038381166004830152909116906399bcc05290602401602060405180830381865afa15801561187e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a291906131fa565b831115611933576000601a556016546118c8906001600160a01b038381169116856129a9565b60165460405163b66503cf60e01b81526001600160a01b038381166004830152602482018690529091169063b66503cf90604401600060405180830381600087803b15801561191657600080fd5b505af115801561192a573d6000803e3d6000fd5b50505050611939565b601a8390555b604080518881526020810188905233917fbc567d6cbad26368064baa0ab5a757be46aae4d70f707f9203d9d9b6c8ccbfa3910160405180910390a2505050505b509091565b6000546001146119a05760405162461bcd60e51b815260040161083490613213565b60026000819055546001600160a01b0390811690831603611a035760405162461bcd60e51b815260206004820152601760248201527f57726f6e6720746f6b656e20666f7220726577617264730000000000000000006044820152606401610834565b60008111611a415760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610834565b6001600160a01b0382166000908152600e602052604090205460ff16611a9d5760405162461bcd60e51b8152602060048201526011602482015270151bdad95b881b9bdd08185b1b1bddd959607a1b6044820152606401610834565b6001600160a01b0382166000908152600560205260408120549003611ac857611ac88260004261287c565b611ad6826000196001611403565b6001600160a01b0384166000908152600860209081526040808320600783528184209490945593909255600690915220544210611b6057611b226001600160a01b038316333084612a5b565b62093a80611b38670de0b6b3a7640000836131b9565b611b4291906131d8565b6001600160a01b038316600090815260056020526040902055611c9c565b6001600160a01b038216600090815260066020526040812054611b8490429061318c565b6001600160a01b03841660009081526005602052604081205491925090611bab90836131b9565b60155490915060ff161580611bdd575060155460ff168015611bdd5750611bda670de0b6b3a7640000826131d8565b83115b611c405760405162461bcd60e51b815260206004820152602e60248201527f416d6f756e742073686f756c6420626520686967686572207468616e2072656d60448201526d61696e696e67207265776172647360901b6064820152608401610834565b611c556001600160a01b038516333086612a5b565b62093a8081611c6c670de0b6b3a7640000866131b9565b611c76919061323b565b611c8091906131d8565b6001600160a01b03851660009081526005602052604090205550505b611ca962093a804261323b565b6001600160a01b0383166000818152600660205260409081902092909255905133907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf5082690611cfa9085815260200190565b60405180910390a350506001600055565b6001600160a01b038116600090815260186020908152604080832054600c909252822054826064611d3d8360286131b9565b611d4791906131d8565b9050600080601560019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc391906131fa565b6015546040516331a9108f60e11b81526004810188905291925061010090046001600160a01b031690636352211e90602401602060405180830381865afa158015611e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3691906132a6565b6001600160a01b0316876001600160a01b0316148015611e565750600081115b15611f00576015546040516339f890b560e21b81526004810187905260649183916101009091046001600160a01b03169063e7e242d490602401602060405180830381865afa158015611ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed191906131fa565b600b54611ede91906131b9565b611ee891906131d8565b611ef390603c6131b9565b611efd91906131d8565b91505b611f13611f0d838561323b565b856127e9565b979650505050505050565b6015546040516331a9108f60e11b8152600481018390526001600160a01b038481169261010090041690636352211e90602401602060405180830381865afa158015611f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9291906132a6565b6001600160a01b031614611fdd5760405162461bcd60e51b81526020600482015260126024820152712737ba103b32903a37b5b2b71037bbb732b960711b6044820152606401610834565b6001600160a01b0382166000908152601860205260408120549003612078576001600160a01b0382811660008181526018602052604090819020849055601754905163698473e360e01b81526004810185905260248101929092529091169063698473e390604401600060405180830381600087803b15801561205f57600080fd5b505af1158015612073573d6000803e3d6000fd5b505050505b6001600160a01b03821660009081526018602052604090205481146120cd5760405162461bcd60e51b815260206004820152600b60248201526a2bb937b733903a37b5b2b760a91b6044820152606401610834565b816001600160a01b03167fa88ad287ee039276852a62661add3a03e736aca1a2987ceaebcf4ecfd018ae3f8260405161210891815260200190565b60405180910390a25050565b6000546001146121365760405162461bcd60e51b815260040161083490613213565b6002600055806121765760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610834565b6121803382612a93565b600254612198906001600160a01b0316333084612a5b565b60405181815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c906020015b60405180910390a2506001600055565b600d54600a116122215760405162461bcd60e51b8152602060048201526016602482015275546f6f206d616e792072657761726420746f6b656e7360501b6044820152606401610834565b6001600160a01b0381166000908152600e602052604090205460ff161561227f5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401610834565b6001600160a01b03166000818152600e60205260408120805460ff19166001908117909155600d805491820181559091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319169091179055565b600060035460000361230d57506001600160a01b031660009081526008602052604090205490565b6003546001600160a01b0383166000908152600560209081526040808320546007835281842054600690935292205461234691906127e9565b61234f85612985565b612359919061318c565b61236391906131b9565b61236d91906131d8565b6001600160a01b03831660009081526008602052604090205461072b919061323b565b6001600160a01b03821660009081526014602052604081205481908082036123bf576000809250925050610e34565b6001600160a01b0385166000908152601360205260408120906123e382848861259f565b6000908152602092835260409081902081518083019092528054808352600190910154919093018190529791965090945050505050565b6001600160a01b038216600090815260186020526040902054811461246f5760405162461bcd60e51b815260206004820152600b60248201526a2bb937b733903a37b5b2b760a91b6044820152606401610834565b6001600160a01b0382811660008181526018602052604080822091909155601754905163411b1f7760e01b81526004810185905260248101929092529091169063411b1f7790604401600060405180830381600087803b1580156124d257600080fd5b505af11580156124e6573d6000803e3d6000fd5b50505050816001600160a01b03167f25842dad107a4bb4efa3824996f6140a5f6f3de5197debed6d780dc08bb0a0a08260405161210891815260200190565b6000546001146125475760405162461bcd60e51b815260040161083490613213565b60026000556125563382612ae9565b60025461256d906001600160a01b031633836126fc565b60405181815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020016121c6565b6000826000036125e55760405162461bcd60e51b8152602060048201526011602482015270456d70747920636865636b706f696e747360781b6044820152606401610834565b818460006125f460018761318c565b8152602001908152602001600020600001541161261d5761261660018461318c565b9050610cb1565b60008080526020859052604090205482101561263b57506000610cb1565b60008061264960018661318c565b90505b818111156126dc5760006002612662848461318c565b61266c91906131d8565b612676908361318c565b600081815260208981526040918290208251808401909352805480845260019091015491830191909152919250908690036126b657509250610cb1915050565b80518611156126c7578193506126d5565b6126d260018361318c565b92505b505061264c565b50949350505050565b6000818310156126f55781610728565b5090919050565b6040516001600160a01b03831660248201526044810182905261275f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612b30565b505050565b6001600160a01b038116600090815260046020526040812054600380549192839261279090849061318c565b9091555061279f905082611d0b565b6001600160a01b03831660009081526004602052604081208290556003805492935083929091906127d190849061323b565b909155506127e190508282612c02565b6108a5612cf3565b60008183106126f55781610728565b600080600061280787856126e5565b6001600160a01b03891660009081526006602090815260408083205460059092529091205491925090869061284561283f8a896126e5565b846127e9565b61284f85856127e9565b612859919061318c565b61286391906131b9565b61286d91906131d8565b99919850909650505050505050565b6001600160a01b03831660009081526014602052604090205480158015906128d857506001600160a01b038416600090815260136020526040812083916128c460018561318c565b815260200190815260200160002060000154145b1561291b576001600160a01b0384166000908152601360205260408120849161290260018561318c565b815260208101919091526040016000206001015561297f565b60408051808201825283815260208082018681526001600160a01b03881660009081526013835284812086825290925292902090518155905160019182015561296590829061323b565b6001600160a01b0385166000908152601460205260409020555b50505050565b6001600160a01b03811660009081526006602052604081205461072b9042906127e9565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156129fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1e91906131fa565b612a28919061323b565b6040516001600160a01b03851660248201526044810182905290915061297f90859063095ea7b360e01b90606401612728565b6040516001600160a01b038085166024830152831660448201526064810182905261297f9085906323b872dd60e01b90608401612728565b612a9b612d97565b80600b6000828254612aad919061323b565b90915550506001600160a01b0382166000908152600c602052604081208054839290612ada90849061323b565b909155506108a5905082612764565b612af1612d97565b80600b6000828254612b03919061318c565b90915550506001600160a01b0382166000908152600c602052604081208054839290612ada90849061318c565b6000612b85826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e1b9092919063ffffffff16565b80519091501561275f5780806020019051810190612ba391906132c3565b61275f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610834565b6001600160a01b03821660009081526010602052604090205442908015801590612c6057506001600160a01b0384166000908152600f602052604081208391612c4c60018561318c565b815260200190815260200160002060000154145b15612c8a576001600160a01b0384166000908152600f60205260408120849161290260018561318c565b60408051808201825283815260208082018681526001600160a01b0388166000908152600f8352848120868252909252929020905181559051600191820155612cd490829061323b565b6001600160a01b03851660009081526010602052604090205550505050565b601254428115801590612d2557508060116000612d1160018661318c565b815260200190815260200160002060000154145b15612d545760035460116000612d3c60018661318c565b81526020810191909152604001600020600101555050565b60408051808201825282815260035460208083019182526000868152601190915292909220905181559051600191820155612d9090839061323b565b6012555050565b600d5460005b818110156108a5576000600d8281548110612dba57612dba613147565b6000918252602090912001546001600160a01b03169050612ddf816000196001611403565b6001600160a01b039092166000908152600860209081526040808320600790925290912092909255905580612e1381613173565b915050612d9d565b60606001600160a01b0384163b612e745760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610834565b600080856001600160a01b031685604051612e8f919061330c565b6000604051808303816000865af19150503d8060008114612ecc576040519150601f19603f3d011682016040523d82523d6000602084013e612ed1565b606091505b5091509150612ee1828286612eeb565b9695505050505050565b60608315612efa575081610cb1565b825115612f0a5782518084602001fd5b8160405162461bcd60e51b81526004016108349190613328565b6001600160a01b0381168114610d4057600080fd5b8035612f4481612f24565b919050565b60008060408385031215612f5c57600080fd5b8235612f6781612f24565b946020939093013593505050565b60008060408385031215612f8857600080fd5b8235612f9381612f24565b91506020830135612fa381612f24565b809150509250929050565b600060208284031215612fc057600080fd5b8135610cb181612f24565b600060208284031215612fdd57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561300d57600080fd5b823561301881612f24565b915060208381013567ffffffffffffffff8082111561303657600080fd5b818601915086601f83011261304a57600080fd5b81358181111561305c5761305c612fe4565b8060051b604051601f19603f8301168101818110858211171561308157613081612fe4565b60405291825284820192508381018501918983111561309f57600080fd5b938501935b828510156130c4576130b585612f39565b845293850193928501926130a4565b8096505050505050509250929050565b8015158114610d4057600080fd5b6000602082840312156130f457600080fd5b8135610cb1816130d4565b6000806040838503121561311257600080fd5b50508035926020909101359150565b6020808252600c908201526b2737ba1037b832b930ba37b960a11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016131855761318561315d565b5060010190565b60008282101561319e5761319e61315d565b500390565b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156131d3576131d361315d565b500290565b6000826131f557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561320c57600080fd5b5051919050565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b6000821982111561324e5761324e61315d565b500190565b6000806040838503121561326657600080fd5b505080516020909101519092909150565b6000806040838503121561328a57600080fd5b825161329581612f24565b6020840151909250612fa381612f24565b6000602082840312156132b857600080fd5b8151610cb181612f24565b6000602082840312156132d557600080fd5b8151610cb1816130d4565b60005b838110156132fb5781810151838201526020016132e3565b8381111561297f5750506000910152565b6000825161331e8184602087016132e0565b9190910192915050565b60208152600082518060208401526133478160408501602087016132e0565b601f01601f1916919091016040019291505056fea2646970667358221220562eb4577df6b254e757d26097236f68318d81cdef334c6b733ca914a1a4dba464736f6c634300080d0033a2646970667358221220526552d8c5c82d477d81c44ddd24c7e23ef4aeff3ad975d72703a24bfb9a6b5464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7436,
        "contract": "contracts/base/reward/GaugeFactory.sol:GaugeFactory",
        "label": "lastGauge",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}