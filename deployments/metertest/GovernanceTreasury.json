{
  "address": "0xbB7Ed4365D2c80e47df533E72BDed9642F801aB2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receipent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x18020c7b116f621e58d4a7d3c7beaa60052b867cea1d6606092083553d405c8e",
  "receipt": {
    "to": null,
    "from": "0x1479F0954dF7c667b1817E4Eb3C0f4723eB054F5",
    "contractAddress": "0xbB7Ed4365D2c80e47df533E72BDed9642F801aB2",
    "transactionIndex": 0,
    "gasUsed": "601553",
    "logsBloom": "0x
    "blockHash": "0x0128864b8d9a65c29b3ede81879c5045854bea2a192725981e068813f73d7674",
    "transactionHash": "0x18020c7b116f621e58d4a7d3c7beaa60052b867cea1d6606092083553d405c8e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19433035,
        "transactionHash": "0x18020c7b116f621e58d4a7d3c7beaa60052b867cea1d6606092083553d405c8e",
        "address": "0xbB7Ed4365D2c80e47df533E72BDed9642F801aB2",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x0000000000000000000000001479f0954df7c667b1817e4eb3c0f4723eb054f5",
        "logIndex": 0,
        "blockHash": "0x0128864b8d9a65c29b3ede81879c5045854bea2a192725981e068813f73d7674"
      }
    ],
    "blockNumber": 19433035,
    "cumulativeGasUsed": "601553",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a2e5b4663605a50e69393503484dc72a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receipent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/core/GovernanceTreasury.sol\":\"GovernanceTreasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/core/GovernanceTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\n\\ncontract GovernanceTreasury {\\n    using SafeERC20 for IERC20;\\n\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event Claimed(address receipent, address token, uint amount);\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function setOwner(address _owner) external {\\n        require(msg.sender == owner, \\\"Not owner\\\");\\n        pendingOwner = _owner;\\n    }\\n\\n    function acceptOwner() external {\\n        require(msg.sender == pendingOwner, \\\"Not pending owner\\\");\\n        owner = pendingOwner;\\n    }\\n\\n    function claim(address[] memory tokens) external {\\n        require(msg.sender == owner, \\\"Not owner\\\");\\n        for (uint i; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            uint balance = IERC20(token).balanceOf(address(this));\\n            require(balance != 0, \\\"Zero balance\\\");\\n            IERC20(token).safeTransfer(msg.sender, balance);\\n            emit Claimed(msg.sender, token, balance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5065d694a769f25631674ff0fe5fffc39ec8356485576ec7846e0be2c11e1469\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x284fcdaef2f20ec54759bfb0821ee3a3459a1f0bc302b29e7fcc3c2f42e728df\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint value\\n    ) internal {\\n        uint newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd09403b2f52a045a82861c53059fb835daabe908fd774f948370979588b3fe1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556107b6806100326000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806313af40351461005c578063318d9e5d146100715780638da5cb5b14610084578063e30c3978146100b3578063ebbc4965146100c6575b600080fd5b61006f61006a366004610593565b6100ce565b005b61006f61007f3660046105c4565b61013b565b600054610097906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600154610097906001600160a01b031681565b61006f6102d1565b6000546001600160a01b031633146101195760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146101815760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610110565b60005b81518110156102cd5760008282815181106101a1576101a1610689565b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156101f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021a919061069f565b90508060000361025b5760405162461bcd60e51b815260206004820152600c60248201526b5a65726f2062616c616e636560a01b6044820152606401610110565b61026f6001600160a01b0383163383610343565b604080513381526001600160a01b03841660208201529081018290527ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839060600160405180910390a1505080806102c5906106b8565b915050610184565b5050565b6001546001600160a01b0316331461031f5760405162461bcd60e51b81526020600482015260116024820152702737ba103832b73234b7339037bbb732b960791b6044820152606401610110565b600154600080546001600160a01b0319166001600160a01b03909216919091179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261039590849061039a565b505050565b60006103ef826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661046c9092919063ffffffff16565b805190915015610395578080602001905181019061040d91906106df565b6103955760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610110565b60606001600160a01b0384163b6104c55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610110565b600080856001600160a01b0316856040516104e09190610731565b6000604051808303816000865af19150503d806000811461051d576040519150601f19603f3d011682016040523d82523d6000602084013e610522565b606091505b509150915061053282828661053e565b925050505b9392505050565b6060831561054d575081610537565b82511561055d5782518084602001fd5b8160405162461bcd60e51b8152600401610110919061074d565b80356001600160a01b038116811461058e57600080fd5b919050565b6000602082840312156105a557600080fd5b61053782610577565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156105d757600080fd5b823567ffffffffffffffff808211156105ef57600080fd5b818501915085601f83011261060357600080fd5b813581811115610615576106156105ae565b8060051b604051601f19603f8301168101818110858211171561063a5761063a6105ae565b60405291825284820192508381018501918883111561065857600080fd5b938501935b8285101561067d5761066e85610577565b8452938501939285019261065d565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156106b157600080fd5b5051919050565b6000600182016106d857634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156106f157600080fd5b8151801515811461053757600080fd5b60005b8381101561071c578181015183820152602001610704565b8381111561072b576000848401525b50505050565b60008251610743818460208701610701565b9190910192915050565b602081526000825180602084015261076c816040850160208701610701565b601f01601f1916919091016040019291505056fea264697066735822122032cecc7275e44ec4581eaf51b3dea6f49441239ce77988b5282865dc6add3a2b64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806313af40351461005c578063318d9e5d146100715780638da5cb5b14610084578063e30c3978146100b3578063ebbc4965146100c6575b600080fd5b61006f61006a366004610593565b6100ce565b005b61006f61007f3660046105c4565b61013b565b600054610097906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600154610097906001600160a01b031681565b61006f6102d1565b6000546001600160a01b031633146101195760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146101815760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610110565b60005b81518110156102cd5760008282815181106101a1576101a1610689565b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156101f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021a919061069f565b90508060000361025b5760405162461bcd60e51b815260206004820152600c60248201526b5a65726f2062616c616e636560a01b6044820152606401610110565b61026f6001600160a01b0383163383610343565b604080513381526001600160a01b03841660208201529081018290527ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839060600160405180910390a1505080806102c5906106b8565b915050610184565b5050565b6001546001600160a01b0316331461031f5760405162461bcd60e51b81526020600482015260116024820152702737ba103832b73234b7339037bbb732b960791b6044820152606401610110565b600154600080546001600160a01b0319166001600160a01b03909216919091179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261039590849061039a565b505050565b60006103ef826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661046c9092919063ffffffff16565b805190915015610395578080602001905181019061040d91906106df565b6103955760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610110565b60606001600160a01b0384163b6104c55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610110565b600080856001600160a01b0316856040516104e09190610731565b6000604051808303816000865af19150503d806000811461051d576040519150601f19603f3d011682016040523d82523d6000602084013e610522565b606091505b509150915061053282828661053e565b925050505b9392505050565b6060831561054d575081610537565b82511561055d5782518084602001fd5b8160405162461bcd60e51b8152600401610110919061074d565b80356001600160a01b038116811461058e57600080fd5b919050565b6000602082840312156105a557600080fd5b61053782610577565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156105d757600080fd5b823567ffffffffffffffff808211156105ef57600080fd5b818501915085601f83011261060357600080fd5b813581811115610615576106156105ae565b8060051b604051601f19603f8301168101818110858211171561063a5761063a6105ae565b60405291825284820192508381018501918883111561065857600080fd5b938501935b8285101561067d5761066e85610577565b8452938501939285019261065d565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156106b157600080fd5b5051919050565b6000600182016106d857634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156106f157600080fd5b8151801515811461053757600080fd5b60005b8381101561071c578181015183820152602001610704565b8381111561072b576000848401525b50505050565b60008251610743818460208701610701565b9190910192915050565b602081526000825180602084015261076c816040850160208701610701565b601f01601f1916919091016040019291505056fea264697066735822122032cecc7275e44ec4581eaf51b3dea6f49441239ce77988b5282865dc6add3a2b64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 263,
        "contract": "contracts/base/core/GovernanceTreasury.sol:GovernanceTreasury",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 265,
        "contract": "contracts/base/core/GovernanceTreasury.sol:GovernanceTreasury",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}