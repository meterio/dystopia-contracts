{
  "address": "0xCDe7265FB8045361cDbBF53F82213F0055496a7F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "veDistAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voterAmount",
          "type": "uint256"
        }
      ],
      "name": "Send",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VE_DIST_RATIO_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_START_BASE_WEEKLY_EMISSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_STUB_CIRCULATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_STUB_CIRCULATION_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_TAIL_EMISSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_TAIL_EMISSION_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ve",
      "outputs": [
        {
          "internalType": "contract IVe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeperiod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_veDistRatio",
          "type": "uint256"
        }
      ],
      "name": "adminSetVeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseWeeklyEmission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateEmission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRoleMemberIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialStubCirculation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__ve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "__controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_activeperiod",
          "type": "uint256"
        }
      ],
      "name": "setActiveperiod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veDistRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weeklyEmission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb34ce2f186e39d3d5f369f5e9fd44b93e9890aea8361aa54a872c9fe4b104250",
  "receipt": {
    "to": null,
    "from": "0x1381C573b97Bf393A81fA42760DD21E109d8092B",
    "contractAddress": "0xCDe7265FB8045361cDbBF53F82213F0055496a7F",
    "transactionIndex": 0,
    "gasUsed": "1517209",
    "logsBloom": "0x
    "blockHash": "0x01241bf333b1597d5378a6b6370ae20b8a209be86439b83611dd9997b152662c",
    "transactionHash": "0xb34ce2f186e39d3d5f369f5e9fd44b93e9890aea8361aa54a872c9fe4b104250",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19143667,
        "transactionHash": "0xb34ce2f186e39d3d5f369f5e9fd44b93e9890aea8361aa54a872c9fe4b104250",
        "address": "0xCDe7265FB8045361cDbBF53F82213F0055496a7F",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x0000000000000000000000001381c573b97bf393a81fa42760dd21e109d8092b",
        "logIndex": 0,
        "blockHash": "0x01241bf333b1597d5378a6b6370ae20b8a209be86439b83611dd9997b152662c"
      }
    ],
    "blockNumber": 19143667,
    "cumulativeGasUsed": "1517209",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "dd42a846b881416a2da8716fb8369d78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veDistAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voterAmount\",\"type\":\"uint256\"}],\"name\":\"Send\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VE_DIST_RATIO_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_START_BASE_WEEKLY_EMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_STUB_CIRCULATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_STUB_CIRCULATION_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TAIL_EMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TAIL_EMISSION_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ve\",\"outputs\":[{\"internalType\":\"contract IVe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeperiod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_veDistRatio\",\"type\":\"uint256\"}],\"name\":\"adminSetVeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseWeeklyEmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateEmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRoleMemberIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialStubCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeperiod\",\"type\":\"uint256\"}],\"name\":\"setActiveperiod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veDistRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weeklyEmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateEmission()\":{\"details\":\"\\u91ca\\u653e\\u91cf\\u8ba1\\u7b97\\u4e3a\\u94f8\\u5e01\\u5382\\u53ef\\u7528\\u4f9b\\u5e94\\u91cf\\u7684 2%\\uff0c\\u7531\\u6d41\\u901a/\\u603b\\u4f9b\\u5e94\\u91cf\\u8c03\\u6574\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getRoleMemberIndex(bytes32,address)\":{\"details\":\"Returns the index of the account that have `role`.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"weeklyEmission()\":{\"details\":\"\\u6bcf\\u5468\\u91ca\\u653e\\u91cf\\u53d6\\u8ba1\\u7b97\\uff08\\u53c8\\u540d\\u76ee\\u6807\\uff09\\u91ca\\u653e\\u91cf\\u4e0e\\u5faa\\u73af\\u5c3e\\u7aef\\u91ca\\u653e\\u91cf\\u7684\\u6700\\u5927\\u503c\"}},\"stateVariables\":{\"baseWeeklyEmission\":{\"details\":\"\\u57fa\\u7840\\u6bcf\\u5468\\u91ca\\u653e\\u91cf = \\u521d\\u59cb\\u57fa\\u7840\\u6bcf\\u5468\\u91ca\\u653e\\u91cf\"},\"initialStubCirculation\":{\"details\":\"\\u5b58\\u6839\\u521d\\u59cb\\u5faa\\u73af\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/token/MinterUpgradeable.sol\":\"MinterUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/base/token/MinterUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../lib/Math.sol\\\";\\nimport \\\"../../interface/IVe.sol\\\";\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IVoter.sol\\\";\\nimport \\\"../../interface/IVeDist.sol\\\";\\nimport \\\"../../interface/IController.sol\\\";\\nimport \\\"../../lib/AccessControl.sol\\\";\\nimport \\\"../../lib/Initializable.sol\\\";\\n\\ncontract MinterUpgradeable is AccessControl, Initializable {\\n    uint256 internal constant _MONTH = 86400 * 7 * 4; // allows minting once per month\\n    uint256 public veDistRatio;\\n    uint256 public constant VE_DIST_RATIO_MAX = 10000;\\n\\n    IERC20 public _token;\\n    IVe public _ve;\\n    address public controller;\\n    uint256 public activeperiod;\\n    /// @dev \\u5b58\\u6839\\u521d\\u59cb\\u5faa\\u73af\\n    uint public initialStubCirculation;\\n    uint public constant _STUB_CIRCULATION = 10;\\n    uint public constant _STUB_CIRCULATION_DENOMINATOR = 100;\\n    /// @dev \\u57fa\\u7840\\u6bcf\\u5468\\u91ca\\u653e\\u91cf = \\u521d\\u59cb\\u57fa\\u7840\\u6bcf\\u5468\\u91ca\\u653e\\u91cf\\n    uint public baseWeeklyEmission = _START_BASE_WEEKLY_EMISSION;\\n    uint public constant _START_BASE_WEEKLY_EMISSION = 20_000_000e18;\\n    uint public constant _TAIL_EMISSION = 1;\\n    uint public constant _TAIL_EMISSION_DENOMINATOR = 100;\\n\\n    event Send(\\n        address indexed sender,\\n        uint256 veDistAmount,\\n        uint256 voterAmount\\n    );\\n\\n    function initialize(\\n        address __ve,\\n        address __controller,\\n        address admin\\n    ) public initializer {\\n        _token = IERC20(IVe(__ve).token());\\n        _ve = IVe(__ve);\\n        controller = __controller;\\n        activeperiod = (block.timestamp / _MONTH) * _MONTH;\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"forbidden\\\");\\n        _;\\n    }\\n\\n    function adminSetVeRatio(uint256 _veDistRatio) public onlyAdmin {\\n        veDistRatio = _veDistRatio;\\n    }\\n\\n    function _veDist() internal view returns (IVeDist) {\\n        return IVeDist(IController(controller).veDist());\\n    }\\n\\n    function _voter() internal view returns (IVoter) {\\n        return IVoter(IController(controller).voter());\\n    }\\n\\n    function setActiveperiod(uint256 _activeperiod) public onlyAdmin {\\n        activeperiod = _activeperiod;\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyAdmin {\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(0x40c10f19, to, amount)\\n        );\\n        require(success && abi.decode(data, (bool)), \\\"mint fail\\\");\\n    }\\n\\n    function updatePeriod() external onlyAdmin returns (uint256) {\\n        uint256 _period = activeperiod;\\n        if (block.timestamp >= _period + _MONTH) {\\n            _period = (block.timestamp / _MONTH) * _MONTH;\\n            activeperiod = _period;\\n\\n            uint256 _balanceOf = _token.balanceOf(address(this));\\n            uint256 veDistAmount = (_balanceOf * veDistRatio) /\\n                VE_DIST_RATIO_MAX;\\n\\n            require(\\n                _token.transfer(address(_veDist()), veDistAmount),\\n                \\\"Transfer Fail\\\"\\n            );\\n            _veDist().checkpointToken();\\n            _veDist().checkpointTotalSupply();\\n\\n            uint256 voterAmount = _balanceOf - veDistAmount;\\n            _token.approve(address(_voter()), voterAmount);\\n            _voter().notifyRewardAmount(voterAmount);\\n\\n            emit Send(msg.sender, veDistRatio, veDistAmount);\\n        }\\n        return _period;\\n    }\\n\\n    /// @dev \\u5c06\\u5faa\\u73af\\u4f9b\\u91cf = token\\u603b\\u4ee3\\u5e01\\u4f9b\\u5e94 - veNFT\\u9501\\u5b9a\\u91cf - veDist\\u4f59\\u989d - \\u5f53\\u524d\\u5408\\u7ea6\\u4f59\\u989d\\n    function _circulatingSupply() internal view returns (uint) {\\n        return\\n            _token.totalSupply() - // token\\u603b\\u4f9b\\u5e94\\u91cf -\\n            IERC20(address(_ve)).totalSupply() - // ve\\u603b\\u4f9b\\u5e94\\u91cf\\n            // \\u4ece\\u6d41\\u901a\\u4e2d\\u6392\\u9664 veDist \\u4ee3\\u5e01\\u4f59\\u989d - \\u7528\\u6237\\u65e0\\u6cd5\\u5728\\u6ca1\\u6709\\u9501\\u5b9a\\u7684\\u60c5\\u51b5\\u4e0b\\u9886\\u53d6\\u5b83\\u4eec\\n            // \\u903e\\u671f\\u7d22\\u8d54\\u5c06\\u5bfc\\u81f4\\u9519\\u8bef\\u7684\\u6d41\\u901a\\u4f9b\\u5e94\\u8ba1\\u7b97\\n            _token.balanceOf(address(_veDist())) -\\n            // \\u6392\\u9664\\u94f8\\u5e01\\u5382\\u4f59\\u989d\\uff0c\\u663e\\u7136\\u662f\\u9501\\u5b9a\\u7684\\n            _token.balanceOf(address(this));\\n    }\\n\\n    /// @dev \\u5faa\\u73af\\u4f9b\\u5e94\\u8c03\\u6574\\u503c\\n    function _circulatingSupplyAdjusted() internal view returns (uint) {\\n        // \\u5f53\\u5927\\u91cf\\u4ee3\\u5e01\\u88ab\\u5206\\u53d1\\u548c\\u9501\\u5b9a\\u65f6\\uff0c\\u6211\\u4eec\\u9700\\u8981\\u4e00\\u4e2a\\u5b58\\u6839\\u4f9b\\u5e94\\u6765\\u5f25\\u8865\\u521d\\u59cb\\u7f3a\\u53e3\\n        // Max(\\u5faa\\u73af\\u4f9b\\u5e94\\u91cf, \\u5b58\\u6839\\u521d\\u59cb\\u5faa\\u73af)\\n        return Math.max(_circulatingSupply(), initialStubCirculation);\\n    }\\n\\n    /// @dev \\u91ca\\u653e\\u91cf\\u8ba1\\u7b97\\u4e3a\\u94f8\\u5e01\\u5382\\u53ef\\u7528\\u4f9b\\u5e94\\u91cf\\u7684 2%\\uff0c\\u7531\\u6d41\\u901a/\\u603b\\u4f9b\\u5e94\\u91cf\\u8c03\\u6574\\n    function calculateEmission() external view returns (uint) {\\n        return _calculateEmission();\\n    }\\n\\n    function _calculateEmission() internal view returns (uint) {\\n        // \\u4f7f\\u7528\\u8c03\\u6574\\u540e\\u7684\\u6d41\\u901a\\u4f9b\\u5e94\\u6765\\u907f\\u514d\\u7b2c\\u4e00\\u5468\\u7684\\u7f3a\\u53e3\\n        // \\u57fa\\u7840\\u6bcf\\u5468\\u91ca\\u653e\\u91cf \\u5e94\\u8be5\\u6bcf\\u5468\\u51cf\\u5c11\\n        // \\u57fa\\u7840\\u6bcf\\u5468\\u91ca\\u653e\\u91cf * \\u5faa\\u73af\\u4f9b\\u5e94\\u8c03\\u6574\\u503c / token\\u603b\\u4f9b\\u5e94\\u91cf\\n        return\\n            (baseWeeklyEmission * _circulatingSupplyAdjusted()) /\\n            _token.totalSupply();\\n    }\\n\\n    /// @dev \\u6bcf\\u5468\\u91ca\\u653e\\u91cf\\u53d6\\u8ba1\\u7b97\\uff08\\u53c8\\u540d\\u76ee\\u6807\\uff09\\u91ca\\u653e\\u91cf\\u4e0e\\u5faa\\u73af\\u5c3e\\u7aef\\u91ca\\u653e\\u91cf\\u7684\\u6700\\u5927\\u503c\\n    function weeklyEmission() external view returns (uint) {\\n        return _weeklyEmission();\\n    }\\n\\n    function _weeklyEmission() internal view returns (uint) {\\n        // Max(\\u8ba1\\u7b97\\u91ca\\u653e\\u91cf, \\u5faa\\u73af\\u91ca\\u653e\\u91cf)\\n        return Math.max(_calculateEmission(), _circulatingEmission());\\n    }\\n\\n    /// @dev \\u5faa\\u73af\\u91ca\\u653e\\u91cf = \\u5faa\\u73af\\u4f9b\\u5e94\\u91cf * 1%\\n    function _circulatingEmission() internal view returns (uint) {\\n        return\\n            (_circulatingSupply() * _TAIL_EMISSION) /\\n            _TAIL_EMISSION_DENOMINATOR;\\n    }\\n}\\n\",\"keccak256\":\"0xccedbb5e4609e1352af5969a7f69c3d1b8ee992f4e1efd98a5512c485cb8721d\",\"license\":\"MIT\"},\"contracts/interface/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IController {\\n    function veDist() external view returns (address);\\n\\n    function voter() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcf1f651f1b13563a71728782dfb82970719e4feb46141d0f46f6aa2159983900\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x224e032b714ae191e5e419054a144402b01597e8b2eb36db4f6e38d3e42b0db7\",\"license\":\"MIT\"},\"contracts/interface/IVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVe {\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME,\\n        MERGE_TYPE\\n    }\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint ts;\\n        uint blk; // block\\n    }\\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n     * What we can do is to extrapolate ***At functions */\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint end;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function balanceOfNFT(uint) external view returns (uint);\\n\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n    function createLockFor(\\n        uint,\\n        uint,\\n        address\\n    ) external returns (uint);\\n\\n    function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n    function epoch() external view returns (uint);\\n\\n    function userPointHistory(uint tokenId, uint loc)\\n        external\\n        view\\n        returns (Point memory);\\n\\n    function pointHistory(uint loc) external view returns (Point memory);\\n\\n    function checkpoint() external;\\n\\n    function depositFor(uint tokenId, uint value) external;\\n\\n    function attachToken(uint tokenId) external;\\n\\n    function detachToken(uint tokenId) external;\\n\\n    function voting(uint tokenId) external;\\n\\n    function abstain(uint tokenId) external;\\n}\\n\",\"keccak256\":\"0x93a173b039792ac393165aab7a92882d0cc1d82257c4dfe13ee26631fe46e52a\",\"license\":\"MIT\"},\"contracts/interface/IVeDist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVeDist {\\n    function checkpointToken() external;\\n\\n    function checkpointTotalSupply() external;\\n}\\n\",\"keccak256\":\"0xdd994472162ec6dc2bfab91bc1aeb7be25d4126d91b7576bf54e5bf92b462482\",\"license\":\"MIT\"},\"contracts/interface/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVoter {\\n    function ve() external view returns (address);\\n\\n    function attachTokenToGauge(uint _tokenId, address account) external;\\n\\n    function detachTokenFromGauge(uint _tokenId, address account) external;\\n\\n    function emitDeposit(\\n        uint _tokenId,\\n        address account,\\n        uint amount\\n    ) external;\\n\\n    function emitWithdraw(\\n        uint _tokenId,\\n        address account,\\n        uint amount\\n    ) external;\\n\\n    function distribute(address _gauge) external;\\n\\n    function notifyRewardAmount(uint amount) external;\\n}\\n\",\"keccak256\":\"0x3585c496f0f5c40e7146bd9878293c200d38948fa20e162c1f7f48b7d475338b\",\"license\":\"MIT\"},\"contracts/lib/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n// This is adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/access/AccessControl.sol\\n// The only difference is added getRoleMemberIndex(bytes32 role, address account) function.\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the index of the account that have `role`.\\n     */\\n    function getRoleMemberIndex(bytes32 role, address account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            _roles[role].members._inner._indexes[\\n                bytes32(uint256(uint160(account)))\\n            ];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(\\n            hasRole(_roles[role].adminRole, msg.sender),\\n            \\\"AccessControl: sender must be an admin to grant\\\"\\n        );\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(\\n            hasRole(_roles[role].adminRole, msg.sender),\\n            \\\"AccessControl: sender must be an admin to revoke\\\"\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(\\n            account == msg.sender,\\n            \\\"AccessControl: can only renounce roles for self\\\"\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x65937c4d93190917802d83317ef2a5770419bc8ef9cf21860d74ec0f7a0ca1b6\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x284fcdaef2f20ec54759bfb0821ee3a3459a1f0bc302b29e7fcc3c2f42e728df\",\"license\":\"MIT\"},\"contracts/lib/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // IERC20 Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set)\\n        internal\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa4c9119d607827b0e842c212f71a5e6d2f6fc3c343c312c3c62954f6eae1d5e6\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x38183be1332f4c833a8279b7d913f523431e50aa59f4f513020b82628c7d6c0e\",\"license\":\"MIT\"},\"contracts/lib/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary Math {\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function positiveInt128(int128 value) internal pure returns (int128) {\\n        return value < 0 ? int128(0) : value;\\n    }\\n\\n    function closeTo(\\n        uint a,\\n        uint b,\\n        uint target\\n    ) internal pure returns (bool) {\\n        if (a > b) {\\n            if (a - b <= target) {\\n                return true;\\n            }\\n        } else {\\n            if (b - a <= target) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a50db5ef01ef869b1a7df3cf485d6c87473549c70fbefc54bdea34f8bc78538\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526a108b2a2c2802909400000060085534801561001f57600080fd5b506115268061002f6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063a7c4cf4311610104578063d63e0f27116100a2578063f6ff876911610071578063f6ff876914610391578063f77c479114610399578063f9d9e6fd146103ac578063ff26679f146102ed57600080fd5b8063d63e0f2714610351578063d70142fb14610363578063e81a06241461036b578063ecd0c0c31461037e57600080fd5b8063af9c894d116100de578063af9c894d14610305578063c0c53b8b14610318578063ca15c8731461032b578063d547741f1461033e57600080fd5b8063a7c4cf43146102ed578063a83627de146102f5578063aa8754e4146102fd57600080fd5b80634e0df3f6116101715780638dd598fb1161014b5780638dd598fb146102845780639010d07c146102af57806391d14854146102c2578063a217fddf146102e557600080fd5b80634e0df3f61461025f578063713efc991461027257806385ec4b251461027b57600080fd5b80632f2ff15d116101ad5780632f2ff15d1461021c57806336568abe1461023157806340c10f191461024457806341833cda1461025757600080fd5b806302c3b420146101d45780630f2e908d146101f0578063248a9ca3146101f9575b600080fd5b6101dd60085481565b6040519081526020015b60405180910390f35b6101dd60025481565b6101dd61020736600461128e565b60009081526020819052604090206002015490565b61022f61022a3660046112bf565b6103b5565b005b61022f61023f3660046112bf565b610448565b61022f6102523660046112ef565b6104c2565b6101dd600181565b6101dd61026d3660046112bf565b6105e6565b6101dd60065481565b6101dd61271081565b600454610297906001600160a01b031681565b6040516001600160a01b0390911681526020016101e7565b6102976102bd36600461131b565b610611565b6102d56102d03660046112bf565b610630565b60405190151581526020016101e7565b6101dd600081565b6101dd606481565b6101dd610648565b6101dd6109fb565b61022f61031336600461128e565b610a05565b61022f61032636600461133d565b610a31565b6101dd61033936600461128e565b610baf565b61022f61034c3660046112bf565b610bc6565b6101dd6a108b2a2c2802909400000081565b6101dd610c47565b61022f61037936600461128e565b610c51565b600354610297906001600160a01b031681565b6101dd600a81565b600554610297906001600160a01b031681565b6101dd60075481565b6000828152602081905260409020600201546103d19033610630565b61043a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526e0818591b5a5b881d1bc819dc985b9d608a1b60648201526084015b60405180910390fd5b6104448282610c7d565b5050565b6001600160a01b03811633146104b85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610431565b6104448282610cd6565b6104cd600033610630565b6104e95760405162461bcd60e51b815260040161043190611388565b600354604080516001600160a01b038581166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b03166340c10f1960e01b179052915160009384931691610545916113ab565b6000604051808303816000865af19150503d8060008114610582576040519150601f19603f3d011682016040523d82523d6000602084013e610587565b606091505b50915091508180156105a85750808060200190518101906105a891906113e6565b6105e05760405162461bcd60e51b81526020600482015260096024820152681b5a5b9d0819985a5b60ba1b6044820152606401610431565b50505050565b6000828152602081815260408083206001600160a01b03851684526001019091529020545b92915050565b60008281526020819052604081206106299083610d2f565b9392505050565b60008281526020819052604081206106299083610d3b565b60006106548133610630565b6106705760405162461bcd60e51b815260040161043190611388565b6006546106806224ea008261141e565b42106109f6576224ea006106948142611436565b61069e9190611458565b60068190556003546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156106f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107159190611477565b905060006127106002548361072a9190611458565b6107349190611436565b6003549091506001600160a01b031663a9059cbb610750610d5d565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af115801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c191906113e6565b6107fd5760405162461bcd60e51b815260206004820152600d60248201526c151c985b9cd9995c8811985a5b609a1b6044820152606401610431565b610805610d5d565b6001600160a01b031663bee5dc326040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b5050505061085f610d5d565b6001600160a01b031663326a94076040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561089957600080fd5b505af11580156108ad573d6000803e3d6000fd5b50505050600081836108bf9190611490565b6003549091506001600160a01b031663095ea7b36108db610dcb565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094c91906113e6565b50610955610dcb565b6001600160a01b0316633c6b16ab826040518263ffffffff1660e01b815260040161098291815260200190565b600060405180830381600087803b15801561099c57600080fd5b505af11580156109b0573d6000803e3d6000fd5b505060025460408051918252602082018690523393507fb3a7f4e19ac1e31fc41d825d7a63c4af7b79cda95d9abfb66c36e6987706bf9792500160405180910390a25050505b905090565b60006109f6610e15565b610a10600033610630565b610a2c5760405162461bcd60e51b815260040161043190611388565b600255565b600154610100900460ff16610a4c5760015460ff1615610a50565b303b155b610ab35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610431565b600154610100900460ff16158015610ad5576001805461ffff19166101011790555b836001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3791906114a7565b600380546001600160a01b03199081166001600160a01b0393841617909155600480548216878416179055600580549091169185169190911790556224ea00610b808142611436565b610b8a9190611458565b600655610b9860008361043a565b80156105e0576001805461ff001916905550505050565b600081815260208190526040812061060b90610ea2565b600082815260208190526040902060020154610be29033610630565b6104b85760405162461bcd60e51b815260206004820152603060248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526f2061646d696e20746f207265766f6b6560801b6064820152608401610431565b60006109f6610eac565b610c5c600033610630565b610c785760405162461bcd60e51b815260040161043190611388565b600655565b6000828152602081905260409020610c959082610ec6565b156104445760405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000828152602081905260409020610cee9082610edb565b156104445760405133906001600160a01b0383169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b60006106298383610ef0565b6001600160a01b03811660009081526001830160205260408120541515610629565b6005546040805163c13270f160e01b815290516000926001600160a01b03169163c13270f19160048083019260209291908290030181865afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f691906114a7565b600554604080516311b25aab60e21b815290516000926001600160a01b0316916346c96aac9160048083019260209291908290030181865afa158015610da7573d6000803e3d6000fd5b600354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190611477565b610e8b610f1a565b600854610e989190611458565b6109f69190611436565b600061060b825490565b60006109f6610eb9610e15565b610ec1610f2f565b610f47565b6000610629836001600160a01b038416610f5e565b6000610629836001600160a01b038416610fad565b6000826000018281548110610f0757610f076114c4565b9060005260206000200154905092915050565b60006109f6610f276110a0565b600754610f47565b600060646001610f3d6110a0565b610e989190611458565b600081831015610f575781610629565b5090919050565b6000818152600183016020526040812054610fa55750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561060b565b50600061060b565b60008181526001830160205260408120548015611096576000610fd1600183611490565b8554909150600090610fe590600190611490565b905081811461104a576000866000018281548110611005576110056114c4565b9060005260206000200154905080876000018481548110611028576110286114c4565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061105b5761105b6114da565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061060b565b600091505061060b565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d9190611477565b6003546001600160a01b03166370a08231611126610d5d565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561116a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118e9190611477565b60048054604080516318160ddd60e01b815290516001600160a01b03909216926318160ddd9282820192602092908290030181865afa1580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f99190611477565b600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561124c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112709190611477565b61127a9190611490565b6112849190611490565b6109f69190611490565b6000602082840312156112a057600080fd5b5035919050565b6001600160a01b03811681146112bc57600080fd5b50565b600080604083850312156112d257600080fd5b8235915060208301356112e4816112a7565b809150509250929050565b6000806040838503121561130257600080fd5b823561130d816112a7565b946020939093013593505050565b6000806040838503121561132e57600080fd5b50508035926020909101359150565b60008060006060848603121561135257600080fd5b833561135d816112a7565b9250602084013561136d816112a7565b9150604084013561137d816112a7565b809150509250925092565b6020808252600990820152683337b93134b23232b760b91b604082015260600190565b6000825160005b818110156113cc57602081860181015185830152016113b2565b818111156113db576000828501525b509190910192915050565b6000602082840312156113f857600080fd5b8151801515811461062957600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561143157611431611408565b500190565b60008261145357634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561147257611472611408565b500290565b60006020828403121561148957600080fd5b5051919050565b6000828210156114a2576114a2611408565b500390565b6000602082840312156114b957600080fd5b8151610629816112a7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212202ff2bcf074ba7b4f4d88407cfa6d9579a4f048d89180951b29d0cd7c9f59118564736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063a7c4cf4311610104578063d63e0f27116100a2578063f6ff876911610071578063f6ff876914610391578063f77c479114610399578063f9d9e6fd146103ac578063ff26679f146102ed57600080fd5b8063d63e0f2714610351578063d70142fb14610363578063e81a06241461036b578063ecd0c0c31461037e57600080fd5b8063af9c894d116100de578063af9c894d14610305578063c0c53b8b14610318578063ca15c8731461032b578063d547741f1461033e57600080fd5b8063a7c4cf43146102ed578063a83627de146102f5578063aa8754e4146102fd57600080fd5b80634e0df3f6116101715780638dd598fb1161014b5780638dd598fb146102845780639010d07c146102af57806391d14854146102c2578063a217fddf146102e557600080fd5b80634e0df3f61461025f578063713efc991461027257806385ec4b251461027b57600080fd5b80632f2ff15d116101ad5780632f2ff15d1461021c57806336568abe1461023157806340c10f191461024457806341833cda1461025757600080fd5b806302c3b420146101d45780630f2e908d146101f0578063248a9ca3146101f9575b600080fd5b6101dd60085481565b6040519081526020015b60405180910390f35b6101dd60025481565b6101dd61020736600461128e565b60009081526020819052604090206002015490565b61022f61022a3660046112bf565b6103b5565b005b61022f61023f3660046112bf565b610448565b61022f6102523660046112ef565b6104c2565b6101dd600181565b6101dd61026d3660046112bf565b6105e6565b6101dd60065481565b6101dd61271081565b600454610297906001600160a01b031681565b6040516001600160a01b0390911681526020016101e7565b6102976102bd36600461131b565b610611565b6102d56102d03660046112bf565b610630565b60405190151581526020016101e7565b6101dd600081565b6101dd606481565b6101dd610648565b6101dd6109fb565b61022f61031336600461128e565b610a05565b61022f61032636600461133d565b610a31565b6101dd61033936600461128e565b610baf565b61022f61034c3660046112bf565b610bc6565b6101dd6a108b2a2c2802909400000081565b6101dd610c47565b61022f61037936600461128e565b610c51565b600354610297906001600160a01b031681565b6101dd600a81565b600554610297906001600160a01b031681565b6101dd60075481565b6000828152602081905260409020600201546103d19033610630565b61043a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526e0818591b5a5b881d1bc819dc985b9d608a1b60648201526084015b60405180910390fd5b6104448282610c7d565b5050565b6001600160a01b03811633146104b85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610431565b6104448282610cd6565b6104cd600033610630565b6104e95760405162461bcd60e51b815260040161043190611388565b600354604080516001600160a01b038581166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b03166340c10f1960e01b179052915160009384931691610545916113ab565b6000604051808303816000865af19150503d8060008114610582576040519150601f19603f3d011682016040523d82523d6000602084013e610587565b606091505b50915091508180156105a85750808060200190518101906105a891906113e6565b6105e05760405162461bcd60e51b81526020600482015260096024820152681b5a5b9d0819985a5b60ba1b6044820152606401610431565b50505050565b6000828152602081815260408083206001600160a01b03851684526001019091529020545b92915050565b60008281526020819052604081206106299083610d2f565b9392505050565b60008281526020819052604081206106299083610d3b565b60006106548133610630565b6106705760405162461bcd60e51b815260040161043190611388565b6006546106806224ea008261141e565b42106109f6576224ea006106948142611436565b61069e9190611458565b60068190556003546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156106f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107159190611477565b905060006127106002548361072a9190611458565b6107349190611436565b6003549091506001600160a01b031663a9059cbb610750610d5d565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af115801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c191906113e6565b6107fd5760405162461bcd60e51b815260206004820152600d60248201526c151c985b9cd9995c8811985a5b609a1b6044820152606401610431565b610805610d5d565b6001600160a01b031663bee5dc326040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b5050505061085f610d5d565b6001600160a01b031663326a94076040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561089957600080fd5b505af11580156108ad573d6000803e3d6000fd5b50505050600081836108bf9190611490565b6003549091506001600160a01b031663095ea7b36108db610dcb565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094c91906113e6565b50610955610dcb565b6001600160a01b0316633c6b16ab826040518263ffffffff1660e01b815260040161098291815260200190565b600060405180830381600087803b15801561099c57600080fd5b505af11580156109b0573d6000803e3d6000fd5b505060025460408051918252602082018690523393507fb3a7f4e19ac1e31fc41d825d7a63c4af7b79cda95d9abfb66c36e6987706bf9792500160405180910390a25050505b905090565b60006109f6610e15565b610a10600033610630565b610a2c5760405162461bcd60e51b815260040161043190611388565b600255565b600154610100900460ff16610a4c5760015460ff1615610a50565b303b155b610ab35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610431565b600154610100900460ff16158015610ad5576001805461ffff19166101011790555b836001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3791906114a7565b600380546001600160a01b03199081166001600160a01b0393841617909155600480548216878416179055600580549091169185169190911790556224ea00610b808142611436565b610b8a9190611458565b600655610b9860008361043a565b80156105e0576001805461ff001916905550505050565b600081815260208190526040812061060b90610ea2565b600082815260208190526040902060020154610be29033610630565b6104b85760405162461bcd60e51b815260206004820152603060248201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60448201526f2061646d696e20746f207265766f6b6560801b6064820152608401610431565b60006109f6610eac565b610c5c600033610630565b610c785760405162461bcd60e51b815260040161043190611388565b600655565b6000828152602081905260409020610c959082610ec6565b156104445760405133906001600160a01b0383169084907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a45050565b6000828152602081905260409020610cee9082610edb565b156104445760405133906001600160a01b0383169084907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a45050565b60006106298383610ef0565b6001600160a01b03811660009081526001830160205260408120541515610629565b6005546040805163c13270f160e01b815290516000926001600160a01b03169163c13270f19160048083019260209291908290030181865afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f691906114a7565b600554604080516311b25aab60e21b815290516000926001600160a01b0316916346c96aac9160048083019260209291908290030181865afa158015610da7573d6000803e3d6000fd5b600354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e839190611477565b610e8b610f1a565b600854610e989190611458565b6109f69190611436565b600061060b825490565b60006109f6610eb9610e15565b610ec1610f2f565b610f47565b6000610629836001600160a01b038416610f5e565b6000610629836001600160a01b038416610fad565b6000826000018281548110610f0757610f076114c4565b9060005260206000200154905092915050565b60006109f6610f276110a0565b600754610f47565b600060646001610f3d6110a0565b610e989190611458565b600081831015610f575781610629565b5090919050565b6000818152600183016020526040812054610fa55750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561060b565b50600061060b565b60008181526001830160205260408120548015611096576000610fd1600183611490565b8554909150600090610fe590600190611490565b905081811461104a576000866000018281548110611005576110056114c4565b9060005260206000200154905080876000018481548110611028576110286114c4565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061105b5761105b6114da565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061060b565b600091505061060b565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d9190611477565b6003546001600160a01b03166370a08231611126610d5d565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561116a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118e9190611477565b60048054604080516318160ddd60e01b815290516001600160a01b03909216926318160ddd9282820192602092908290030181865afa1580156111d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f99190611477565b600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561124c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112709190611477565b61127a9190611490565b6112849190611490565b6109f69190611490565b6000602082840312156112a057600080fd5b5035919050565b6001600160a01b03811681146112bc57600080fd5b50565b600080604083850312156112d257600080fd5b8235915060208301356112e4816112a7565b809150509250929050565b6000806040838503121561130257600080fd5b823561130d816112a7565b946020939093013593505050565b6000806040838503121561132e57600080fd5b50508035926020909101359150565b60008060006060848603121561135257600080fd5b833561135d816112a7565b9250602084013561136d816112a7565b9150604084013561137d816112a7565b809150509250925092565b6020808252600990820152683337b93134b23232b760b91b604082015260600190565b6000825160005b818110156113cc57602081860181015185830152016113b2565b818111156113db576000828501525b509190910192915050565b6000602082840312156113f857600080fd5b8151801515811461062957600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561143157611431611408565b500190565b60008261145357634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561147257611472611408565b500290565b60006020828403121561148957600080fd5b5051919050565b6000828210156114a2576114a2611408565b500390565b6000602082840312156114b957600080fd5b8151610629816112a7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212202ff2bcf074ba7b4f4d88407cfa6d9579a4f048d89180951b29d0cd7c9f59118564736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateEmission()": {
        "details": "释放量计算为铸币厂可用供应量的 2%，由流通/总供应量调整"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getRoleMemberIndex(bytes32,address)": {
        "details": "Returns the index of the account that have `role`."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "weeklyEmission()": {
        "details": "每周释放量取计算（又名目标）释放量与循环尾端释放量的最大值"
      }
    },
    "stateVariables": {
      "baseWeeklyEmission": {
        "details": "基础每周释放量 = 初始基础每周释放量"
      },
      "initialStubCirculation": {
        "details": "存根初始循环"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25682,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)25677_storage)"
      },
      {
        "astId": 26868,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 26871,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10199,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "veDistRatio",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10205,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "_token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)23956"
      },
      {
        "astId": 10208,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "_ve",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IVe)25524"
      },
      {
        "astId": 10210,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "controller",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10212,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "activeperiod",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10215,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "initialStubCirculation",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 10225,
        "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
        "label": "baseWeeklyEmission",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)23956": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IVe)25524": {
        "encoding": "inplace",
        "label": "contract IVe",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)25677_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)25677_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)26574_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 26573,
            "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)26273_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)25677_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 25674,
            "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)26574_storage"
          },
          {
            "astId": 25676,
            "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)26273_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 26268,
            "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 26272,
            "contract": "contracts/base/token/MinterUpgradeable.sol:MinterUpgradeable",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}