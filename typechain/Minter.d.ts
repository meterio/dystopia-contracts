/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MinterInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "VE_DIST_RATIO_MAX()": FunctionFragment;
    "_START_BASE_WEEKLY_EMISSION()": FunctionFragment;
    "_STUB_CIRCULATION()": FunctionFragment;
    "_STUB_CIRCULATION_DENOMINATOR()": FunctionFragment;
    "_TAIL_EMISSION()": FunctionFragment;
    "_TAIL_EMISSION_DENOMINATOR()": FunctionFragment;
    "_token()": FunctionFragment;
    "_ve()": FunctionFragment;
    "activeperiod()": FunctionFragment;
    "adminSetVeDistPerWeek(uint256)": FunctionFragment;
    "adminSetVoterPerWeek(uint256)": FunctionFragment;
    "baseWeeklyEmission()": FunctionFragment;
    "calculateEmission()": FunctionFragment;
    "controller()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getRoleMemberIndex(bytes32,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialStubCirculation()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "updatePeriod()": FunctionFragment;
    "veDistPerWeek()": FunctionFragment;
    "veDistRatio()": FunctionFragment;
    "voterPerWeek()": FunctionFragment;
    "weeklyEmission()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VE_DIST_RATIO_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_START_BASE_WEEKLY_EMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_STUB_CIRCULATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_STUB_CIRCULATION_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_TAIL_EMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_TAIL_EMISSION_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_token", values?: undefined): string;
  encodeFunctionData(functionFragment: "_ve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activeperiod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetVeDistPerWeek",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetVoterPerWeek",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "baseWeeklyEmission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateEmission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberIndex",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialStubCirculation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "veDistPerWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "veDistRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voterPerWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weeklyEmission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VE_DIST_RATIO_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_START_BASE_WEEKLY_EMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_STUB_CIRCULATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_STUB_CIRCULATION_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_TAIL_EMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_TAIL_EMISSION_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_ve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeperiod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetVeDistPerWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetVoterPerWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseWeeklyEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialStubCirculation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "veDistPerWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "veDistRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterPerWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weeklyEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Send(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Send"): EventFragment;
}

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SendEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sender: string;
    veDistAmount: BigNumber;
    voterAmount: BigNumber;
  }
>;

export class Minter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MinterInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    VE_DIST_RATIO_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    _START_BASE_WEEKLY_EMISSION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _STUB_CIRCULATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    _STUB_CIRCULATION_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _TAIL_EMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    _TAIL_EMISSION_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    _token(overrides?: CallOverrides): Promise<[string]>;

    _ve(overrides?: CallOverrides): Promise<[string]>;

    activeperiod(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminSetVeDistPerWeek(
      _veDistPerWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminSetVoterPerWeek(
      _voterPerWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    baseWeeklyEmission(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateEmission(overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialStubCirculation(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    veDistPerWeek(overrides?: CallOverrides): Promise<[BigNumber]>;

    veDistRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    voterPerWeek(overrides?: CallOverrides): Promise<[BigNumber]>;

    weeklyEmission(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  VE_DIST_RATIO_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  _START_BASE_WEEKLY_EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  _STUB_CIRCULATION(overrides?: CallOverrides): Promise<BigNumber>;

  _STUB_CIRCULATION_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  _TAIL_EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  _TAIL_EMISSION_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  _token(overrides?: CallOverrides): Promise<string>;

  _ve(overrides?: CallOverrides): Promise<string>;

  activeperiod(overrides?: CallOverrides): Promise<BigNumber>;

  adminSetVeDistPerWeek(
    _veDistPerWeek: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminSetVoterPerWeek(
    _voterPerWeek: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  baseWeeklyEmission(overrides?: CallOverrides): Promise<BigNumber>;

  calculateEmission(overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleMemberIndex(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialStubCirculation(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePeriod(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  veDistPerWeek(overrides?: CallOverrides): Promise<BigNumber>;

  veDistRatio(overrides?: CallOverrides): Promise<BigNumber>;

  voterPerWeek(overrides?: CallOverrides): Promise<BigNumber>;

  weeklyEmission(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    VE_DIST_RATIO_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    _START_BASE_WEEKLY_EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    _STUB_CIRCULATION(overrides?: CallOverrides): Promise<BigNumber>;

    _STUB_CIRCULATION_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _TAIL_EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    _TAIL_EMISSION_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    _token(overrides?: CallOverrides): Promise<string>;

    _ve(overrides?: CallOverrides): Promise<string>;

    activeperiod(overrides?: CallOverrides): Promise<BigNumber>;

    adminSetVeDistPerWeek(
      _veDistPerWeek: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminSetVoterPerWeek(
      _voterPerWeek: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    baseWeeklyEmission(overrides?: CallOverrides): Promise<BigNumber>;

    calculateEmission(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialStubCirculation(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    veDistPerWeek(overrides?: CallOverrides): Promise<BigNumber>;

    veDistRatio(overrides?: CallOverrides): Promise<BigNumber>;

    voterPerWeek(overrides?: CallOverrides): Promise<BigNumber>;

    weeklyEmission(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "Send(address,uint256,uint256)"(
      sender?: string | null,
      veDistAmount?: null,
      voterAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; veDistAmount: BigNumber; voterAmount: BigNumber }
    >;

    Send(
      sender?: string | null,
      veDistAmount?: null,
      voterAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; veDistAmount: BigNumber; voterAmount: BigNumber }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    VE_DIST_RATIO_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    _START_BASE_WEEKLY_EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    _STUB_CIRCULATION(overrides?: CallOverrides): Promise<BigNumber>;

    _STUB_CIRCULATION_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _TAIL_EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    _TAIL_EMISSION_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    _token(overrides?: CallOverrides): Promise<BigNumber>;

    _ve(overrides?: CallOverrides): Promise<BigNumber>;

    activeperiod(overrides?: CallOverrides): Promise<BigNumber>;

    adminSetVeDistPerWeek(
      _veDistPerWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminSetVoterPerWeek(
      _voterPerWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    baseWeeklyEmission(overrides?: CallOverrides): Promise<BigNumber>;

    calculateEmission(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialStubCirculation(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    veDistPerWeek(overrides?: CallOverrides): Promise<BigNumber>;

    veDistRatio(overrides?: CallOverrides): Promise<BigNumber>;

    voterPerWeek(overrides?: CallOverrides): Promise<BigNumber>;

    weeklyEmission(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VE_DIST_RATIO_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _START_BASE_WEEKLY_EMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _STUB_CIRCULATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _STUB_CIRCULATION_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _TAIL_EMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _TAIL_EMISSION_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _ve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeperiod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminSetVeDistPerWeek(
      _veDistPerWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminSetVoterPerWeek(
      _voterPerWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    baseWeeklyEmission(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateEmission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberIndex(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialStubCirculation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePeriod(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    veDistPerWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veDistRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voterPerWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weeklyEmission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
