{
    "language": "Solidity",
    "sources": {
        "contracts/base/vote/VeUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"../../lib/Base64.sol\";\nimport \"../../lib/Initializable.sol\";\nimport \"../../interface/IERC20.sol\";\nimport \"../../interface/IERC721.sol\";\nimport \"../../interface/IERC721Metadata.sol\";\nimport \"../../interface/IVe.sol\";\nimport \"../../interface/IERC721Receiver.sol\";\nimport \"../../interface/IController.sol\";\nimport \"../Reentrancy.sol\";\nimport \"../../lib/SafeERC20.sol\";\nimport \"../../lib/Math.sol\";\n\ncontract VeUpgradeable is\n    IERC721,\n    IERC721Metadata,\n    IVe,\n    Reentrancy,\n    Initializable\n{\n    using SafeERC20 for IERC20;\n\n    uint internal constant WEEK = 1 weeks;\n    uint internal constant MAX_TIME = 4 * 365 * 86400;\n    int128 internal constant I_MAX_TIME = 4 * 365 * 86400;\n    uint internal constant MULTIPLIER = 1 ether;\n\n    address public override token;\n    uint public supply;\n    mapping(uint => LockedBalance) public locked;\n\n    mapping(uint => uint) public ownershipChange;\n\n    uint public override epoch;\n    /// @dev epoch -> unsigned point\n    mapping(uint => Point) internal _pointHistory;\n    /// @dev user -> Point[userEpoch]\n    mapping(uint => Point[1000000000]) internal _userPointHistory;\n\n    mapping(uint => uint) public override userPointEpoch;\n    mapping(uint => int128) public slopeChanges; // time -> signed slope change\n\n    mapping(uint => uint) public attachments;\n    mapping(uint => bool) public voted;\n    address public controller;\n\n    string public constant override name = \"veBOLT\";\n    string public constant override symbol = \"veBOLT\";\n    string public constant version = \"1.0.0\";\n    uint8 public constant decimals = 18;\n\n    /// @dev Current count of token\n    uint internal tokenId;\n\n    /// @dev Mapping from NFT ID to the address that owns it.\n    mapping(uint => address) internal idToOwner;\n\n    /// @dev Mapping from NFT ID to approved address.\n    mapping(uint => address) internal idToApprovals;\n\n    /// @dev Mapping from owner address to count of his tokens.\n    mapping(address => uint) internal ownerToNFTokenCount;\n\n    /// @dev Mapping from owner address to mapping of index to tokenIds\n    mapping(address => mapping(uint => uint)) internal ownerToNFTokenIdList;\n\n    /// @dev Mapping from NFT ID to index of owner\n    mapping(uint => uint) internal tokenToOwnerIndex;\n\n    /// @dev Mapping from owner address to mapping of operator addresses.\n    mapping(address => mapping(address => bool)) internal ownerToOperators;\n\n    /// @dev Mapping of interface id to bool about whether or not it's supported\n    mapping(bytes4 => bool) internal supportedInterfaces;\n\n    /// @dev ERC165 interface ID of ERC165\n    bytes4 internal constant ERC165_INTERFACE_ID = 0x01ffc9a7;\n\n    /// @dev ERC165 interface ID of ERC721\n    bytes4 internal constant ERC721_INTERFACE_ID = 0x80ac58cd;\n\n    /// @dev ERC165 interface ID of ERC721Metadata\n    bytes4 internal constant ERC721_METADATA_INTERFACE_ID = 0x5b5e139f;\n\n    event Deposit(\n        address indexed provider,\n        uint tokenId,\n        uint value,\n        uint indexed locktime,\n        DepositType depositType,\n        uint ts\n    );\n    event Withdraw(address indexed provider, uint tokenId, uint value, uint ts);\n    event Supply(uint prevSupply, uint supply);\n\n    /// @notice Contract constructor\n    /// @param token_ `ERC20CRV` token address\n    function initialize(address token_, address controller_)\n        public\n        initializer\n    {\n        token = token_;\n        controller = controller_;\n        _pointHistory[0].blk = block.number;\n        _pointHistory[0].ts = block.timestamp;\n\n        supportedInterfaces[ERC165_INTERFACE_ID] = true;\n        supportedInterfaces[ERC721_INTERFACE_ID] = true;\n        supportedInterfaces[ERC721_METADATA_INTERFACE_ID] = true;\n        _unlocked = 1;\n\n        // mint-ish\n        emit Transfer(address(0), address(this), tokenId);\n        // burn-ish\n        emit Transfer(address(this), address(0), tokenId);\n    }\n\n    function _voter() internal view returns (address) {\n        return IController(controller).voter();\n    }\n\n    /// @dev Interface identification is specified in ERC-165.\n    /// @param _interfaceID Id of the interface\n    function supportsInterface(bytes4 _interfaceID)\n        external\n        view\n        override\n        returns (bool)\n    {\n        return supportedInterfaces[_interfaceID];\n    }\n\n    /// @notice Get the most recently recorded rate of voting power decrease for `_tokenId`\n    /// @param _tokenId token of the NFT\n    /// @return Value of the slope\n    function getLastUserSlope(uint _tokenId) external view returns (int128) {\n        uint uEpoch = userPointEpoch[_tokenId];\n        return _userPointHistory[_tokenId][uEpoch].slope;\n    }\n\n    /// @notice Get the timestamp for checkpoint `_idx` for `_tokenId`\n    /// @param _tokenId token of the NFT\n    /// @param _idx User epoch number\n    /// @return Epoch time of the checkpoint\n    function userPointHistoryTs(uint _tokenId, uint _idx)\n        external\n        view\n        returns (uint)\n    {\n        return _userPointHistory[_tokenId][_idx].ts;\n    }\n\n    /// @notice Get timestamp when `_tokenId`'s lock finishes\n    /// @param _tokenId User NFT\n    /// @return Epoch time of the lock end\n    function lockedEnd(uint _tokenId) external view returns (uint) {\n        return locked[_tokenId].end;\n    }\n\n    /// @dev Returns the number of NFTs owned by `_owner`.\n    ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\n    /// @param _owner Address for whom to query the balance.\n    function _balance(address _owner) internal view returns (uint) {\n        return ownerToNFTokenCount[_owner];\n    }\n\n    /// @dev Returns the number of NFTs owned by `_owner`.\n    ///      Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\n    /// @param _owner Address for whom to query the balance.\n    function balanceOf(address _owner) external view override returns (uint) {\n        return _balance(_owner);\n    }\n\n    /// @dev Returns the address of the owner of the NFT.\n    /// @param _tokenId The identifier for an NFT.\n    function ownerOf(uint _tokenId) public view override returns (address) {\n        return idToOwner[_tokenId];\n    }\n\n    /// @dev Get the approved address for a single NFT.\n    /// @param _tokenId ID of the NFT to query the approval of.\n    function getApproved(uint _tokenId)\n        external\n        view\n        override\n        returns (address)\n    {\n        return idToApprovals[_tokenId];\n    }\n\n    /// @dev Checks if `_operator` is an approved operator for `_owner`.\n    /// @param _owner The address that owns the NFTs.\n    /// @param _operator The address that acts on behalf of the owner.\n    function isApprovedForAll(address _owner, address _operator)\n        external\n        view\n        override\n        returns (bool)\n    {\n        return (ownerToOperators[_owner])[_operator];\n    }\n\n    /// @dev  Get token by index\n    function tokenOfOwnerByIndex(address _owner, uint _tokenIndex)\n        external\n        view\n        returns (uint)\n    {\n        return ownerToNFTokenIdList[_owner][_tokenIndex];\n    }\n\n    /// @dev Returns whether the given spender can transfer a given token ID\n    /// @param _spender address of the spender to query\n    /// @param _tokenId uint ID of the token to be transferred\n    /// @return bool whether the msg.sender is approved for the given token ID, is an operator of the owner, or is the owner of the token\n    function _isApprovedOrOwner(address _spender, uint _tokenId)\n        internal\n        view\n        returns (bool)\n    {\n        address owner = idToOwner[_tokenId];\n        bool spenderIsOwner = owner == _spender;\n        bool spenderIsApproved = _spender == idToApprovals[_tokenId];\n        bool spenderIsApprovedForAll = (ownerToOperators[owner])[_spender];\n        return spenderIsOwner || spenderIsApproved || spenderIsApprovedForAll;\n    }\n\n    function isApprovedOrOwner(address _spender, uint _tokenId)\n        external\n        view\n        override\n        returns (bool)\n    {\n        return _isApprovedOrOwner(_spender, _tokenId);\n    }\n\n    /// @dev Add a NFT to an index mapping to a given address\n    /// @param _to address of the receiver\n    /// @param _tokenId uint ID Of the token to be added\n    function _addTokenToOwnerList(address _to, uint _tokenId) internal {\n        uint currentCount = _balance(_to);\n\n        ownerToNFTokenIdList[_to][currentCount] = _tokenId;\n        tokenToOwnerIndex[_tokenId] = currentCount;\n    }\n\n    /// @dev Remove a NFT from an index mapping to a given address\n    /// @param _from address of the sender\n    /// @param _tokenId uint ID Of the token to be removed\n    function _removeTokenFromOwnerList(address _from, uint _tokenId) internal {\n        // Delete\n        uint currentCount = _balance(_from) - 1;\n        uint currentIndex = tokenToOwnerIndex[_tokenId];\n\n        if (currentCount == currentIndex) {\n            // update ownerToNFTokenIdList\n            ownerToNFTokenIdList[_from][currentCount] = 0;\n            // update tokenToOwnerIndex\n            tokenToOwnerIndex[_tokenId] = 0;\n        } else {\n            uint lastTokenId = ownerToNFTokenIdList[_from][currentCount];\n\n            // Add\n            // update ownerToNFTokenIdList\n            ownerToNFTokenIdList[_from][currentIndex] = lastTokenId;\n            // update tokenToOwnerIndex\n            tokenToOwnerIndex[lastTokenId] = currentIndex;\n\n            // Delete\n            // update ownerToNFTokenIdList\n            ownerToNFTokenIdList[_from][currentCount] = 0;\n            // update tokenToOwnerIndex\n            tokenToOwnerIndex[_tokenId] = 0;\n        }\n    }\n\n    /// @dev Add a NFT to a given address\n    ///      Throws if `_tokenId` is owned by someone.\n    function _addTokenTo(address _to, uint _tokenId) internal {\n        // assume always call on new tokenId or after _removeTokenFrom() call\n        // Change the owner\n        idToOwner[_tokenId] = _to;\n        // Update owner token index tracking\n        _addTokenToOwnerList(_to, _tokenId);\n        // Change count tracking\n        ownerToNFTokenCount[_to] += 1;\n    }\n\n    /// @dev Remove a NFT from a given address\n    ///      Throws if `_from` is not the current owner.\n    function _removeTokenFrom(address _from, uint _tokenId) internal {\n        require(idToOwner[_tokenId] == _from, \"!owner remove\");\n        // Change the owner\n        idToOwner[_tokenId] = address(0);\n        // Update owner token index tracking\n        _removeTokenFromOwnerList(_from, _tokenId);\n        // Change count tracking\n        ownerToNFTokenCount[_from] -= 1;\n    }\n\n    /// @dev Execute transfer of a NFT.\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n    ///      address for this NFT. (NOTE: `msg.sender` not allowed in internal function so pass `_sender`.)\n    ///      Throws if `_to` is the zero address.\n    ///      Throws if `_from` is not the current owner.\n    ///      Throws if `_tokenId` is not a valid NFT.\n    function _transferFrom(\n        address _from,\n        address _to,\n        uint _tokenId,\n        address _sender\n    ) internal {\n        require(attachments[_tokenId] == 0 && !voted[_tokenId], \"attached\");\n        require(_isApprovedOrOwner(_sender, _tokenId), \"!owner sender\");\n        require(_to != address(0), \"dst is zero\");\n        // from address will be checked in _removeTokenFrom()\n\n        if (idToApprovals[_tokenId] != address(0)) {\n            // Reset approvals\n            idToApprovals[_tokenId] = address(0);\n        }\n        _removeTokenFrom(_from, _tokenId);\n        _addTokenTo(_to, _tokenId);\n        // Set the block of ownership transfer (for Flash NFT protection)\n        ownershipChange[_tokenId] = block.number;\n        // Log the transfer\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    /* TRANSFER FUNCTIONS */\n    /// @dev Throws unless `msg.sender` is the current owner,\n    ///      an authorized operator, or the approved address for this NFT.\n    ///      Throws if `_from` is not the current owner.\n    ///      Throws if `_to` is the zero address.\n    ///      Throws if `_tokenId` is not a valid NFT.\n    /// @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n    ///        they maybe be permanently lost.\n    /// @param _from The current owner of the NFT.\n    /// @param _to The new owner.\n    /// @param _tokenId The NFT to transfer.\n    function transferFrom(\n        address _from,\n        address _to,\n        uint _tokenId\n    ) external override {\n        _transferFrom(_from, _to, _tokenId, msg.sender);\n    }\n\n    function _isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n        uint size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /// @dev Transfers the ownership of an NFT from one address to another address.\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\n    ///      approved address for this NFT.\n    ///      Throws if `_from` is not the current owner.\n    ///      Throws if `_to` is the zero address.\n    ///      Throws if `_tokenId` is not a valid NFT.\n    ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n    ///      the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`.\n    /// @param _from The current owner of the NFT.\n    /// @param _to The new owner.\n    /// @param _tokenId The NFT to transfer.\n    /// @param _data Additional data with no specified format, sent in call to `_to`.\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint _tokenId,\n        bytes memory _data\n    ) public override {\n        _transferFrom(_from, _to, _tokenId, msg.sender);\n\n        if (_isContract(_to)) {\n            // Throws if transfer destination is a contract which does not implement 'onERC721Received'\n            try\n                IERC721Receiver(_to).onERC721Received(\n                    msg.sender,\n                    _from,\n                    _tokenId,\n                    _data\n                )\n            returns (bytes4) {} catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\n                    );\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /// @dev Transfers the ownership of an NFT from one address to another address.\n    ///      Throws unless `msg.sender` is the current owner, an authorized operator, or the\n    ///      approved address for this NFT.\n    ///      Throws if `_from` is not the current owner.\n    ///      Throws if `_to` is the zero address.\n    ///      Throws if `_tokenId` is not a valid NFT.\n    ///      If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n    ///      the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint,bytes)\"))`.\n    /// @param _from The current owner of the NFT.\n    /// @param _to The new owner.\n    /// @param _tokenId The NFT to transfer.\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint _tokenId\n    ) external override {\n        safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    /// @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\n    ///      Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\n    ///      Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\n    ///      Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\n    /// @param _approved Address to be approved for the given NFT ID.\n    /// @param _tokenId ID of the token to be approved.\n    function approve(address _approved, uint _tokenId) public override {\n        address owner = idToOwner[_tokenId];\n        // Throws if `_tokenId` is not a valid NFT\n        require(owner != address(0), \"invalid id\");\n        // Throws if `_approved` is the current owner\n        require(_approved != owner, \"self approve\");\n        // Check requirements\n        bool senderIsOwner = (idToOwner[_tokenId] == msg.sender);\n        bool senderIsApprovedForAll = (ownerToOperators[owner])[msg.sender];\n        require(senderIsOwner || senderIsApprovedForAll, \"!owner\");\n        // Set the approval\n        idToApprovals[_tokenId] = _approved;\n        emit Approval(owner, _approved, _tokenId);\n    }\n\n    /// @dev Enables or disables approval for a third party (\"operator\") to manage all of\n    ///      `msg.sender`'s assets. It also emits the ApprovalForAll event.\n    ///      Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\n    /// @notice This works even if sender doesn't own any tokens at the time.\n    /// @param _operator Address to add to the set of authorized operators.\n    /// @param _approved True if the operators is approved, false to revoke approval.\n    function setApprovalForAll(address _operator, bool _approved)\n        external\n        override\n    {\n        // Throws if `_operator` is the `msg.sender`\n        require(_operator != msg.sender, \"operator is sender\");\n        ownerToOperators[msg.sender][_operator] = _approved;\n        emit ApprovalForAll(msg.sender, _operator, _approved);\n    }\n\n    /// @dev Function to mint tokens\n    ///      Throws if `_to` is zero address.\n    ///      Throws if `_tokenId` is owned by someone.\n    /// @param _to The address that will receive the minted tokens.\n    /// @param _tokenId The token id to mint.\n    /// @return A boolean that indicates if the operation was successful.\n    function _mint(address _to, uint _tokenId) internal returns (bool) {\n        // Throws if `_to` is zero address\n        require(_to != address(0), \"zero dst\");\n        // Add NFT. Throws if `_tokenId` is owned by someone\n        _addTokenTo(_to, _tokenId);\n        emit Transfer(address(0), _to, _tokenId);\n        return true;\n    }\n\n    /// @notice Record global and per-user data to checkpoint\n    /// @param _tokenId NFT token ID. No user checkpoint if 0\n    /// @param oldLocked Pevious locked amount / end lock time for the user\n    /// @param newLocked New locked amount / end lock time for the user\n    function _checkpoint(\n        uint _tokenId,\n        LockedBalance memory oldLocked,\n        LockedBalance memory newLocked\n    ) internal {\n        Point memory uOld;\n        Point memory uNew;\n        int128 oldDSlope = 0;\n        int128 newDSlope = 0;\n        uint _epoch = epoch;\n\n        if (_tokenId != 0) {\n            // Calculate slopes and biases\n            // Kept at zero when they have to\n            if (oldLocked.end > block.timestamp && oldLocked.amount > 0) {\n                uOld.slope = oldLocked.amount / I_MAX_TIME;\n                uOld.bias =\n                    uOld.slope *\n                    int128(int256(oldLocked.end - block.timestamp));\n            }\n            if (newLocked.end > block.timestamp && newLocked.amount > 0) {\n                uNew.slope = newLocked.amount / I_MAX_TIME;\n                uNew.bias =\n                    uNew.slope *\n                    int128(int256(newLocked.end - block.timestamp));\n            }\n\n            // Read values of scheduled changes in the slope\n            // oldLocked.end can be in the past and in the future\n            // newLocked.end can ONLY by in the FUTURE unless everything expired: than zeros\n            oldDSlope = slopeChanges[oldLocked.end];\n            if (newLocked.end != 0) {\n                if (newLocked.end == oldLocked.end) {\n                    newDSlope = oldDSlope;\n                } else {\n                    newDSlope = slopeChanges[newLocked.end];\n                }\n            }\n        }\n\n        Point memory lastPoint = Point({\n            bias: 0,\n            slope: 0,\n            ts: block.timestamp,\n            blk: block.number\n        });\n        if (_epoch > 0) {\n            lastPoint = _pointHistory[_epoch];\n        }\n        uint lastCheckpoint = lastPoint.ts;\n        // initialLastPoint is used for extrapolation to calculate block number\n        // (approximately, for *At methods) and save them\n        // as we cannot figure that out exactly from inside the contract\n        Point memory initialLastPoint = lastPoint;\n        uint blockSlope = 0;\n        // dblock/dt\n        if (block.timestamp > lastPoint.ts) {\n            blockSlope =\n                (MULTIPLIER * (block.number - lastPoint.blk)) /\n                (block.timestamp - lastPoint.ts);\n        }\n        // If last point is already recorded in this block, slope=0\n        // But that's ok b/c we know the block in such case\n\n        // Go over weeks to fill history and calculate what the current point is\n        {\n            uint ti = (lastCheckpoint / WEEK) * WEEK;\n            // Hopefully it won't happen that this won't get used in 5 years!\n            // If it does, users will be able to withdraw but vote weight will be broken\n            for (uint i = 0; i < 255; ++i) {\n                ti += WEEK;\n                int128 dSlope = 0;\n                if (ti > block.timestamp) {\n                    ti = block.timestamp;\n                } else {\n                    dSlope = slopeChanges[ti];\n                }\n                lastPoint.bias = Math.positiveInt128(\n                    lastPoint.bias -\n                        lastPoint.slope *\n                        int128(int256(ti - lastCheckpoint))\n                );\n                lastPoint.slope = Math.positiveInt128(lastPoint.slope + dSlope);\n                lastCheckpoint = ti;\n                lastPoint.ts = ti;\n                lastPoint.blk =\n                    initialLastPoint.blk +\n                    (blockSlope * (ti - initialLastPoint.ts)) /\n                    MULTIPLIER;\n                _epoch += 1;\n                if (ti == block.timestamp) {\n                    lastPoint.blk = block.number;\n                    break;\n                } else {\n                    _pointHistory[_epoch] = lastPoint;\n                }\n            }\n        }\n\n        epoch = _epoch;\n        // Now pointHistory is filled until t=now\n\n        if (_tokenId != 0) {\n            // If last point was in this block, the slope change has been applied already\n            // But in such case we have 0 slope(s)\n            lastPoint.slope = Math.positiveInt128(\n                lastPoint.slope + (uNew.slope - uOld.slope)\n            );\n            lastPoint.bias = Math.positiveInt128(\n                lastPoint.bias + (uNew.bias - uOld.bias)\n            );\n        }\n\n        // Record the changed point into history\n        _pointHistory[_epoch] = lastPoint;\n\n        if (_tokenId != 0) {\n            // Schedule the slope changes (slope is going down)\n            // We subtract newUserSlope from [newLocked.end]\n            // and add old_user_slope to [old_locked.end]\n            if (oldLocked.end > block.timestamp) {\n                // old_dslope was <something> - u_old.slope, so we cancel that\n                oldDSlope += uOld.slope;\n                if (newLocked.end == oldLocked.end) {\n                    oldDSlope -= uNew.slope;\n                    // It was a new deposit, not extension\n                }\n                slopeChanges[oldLocked.end] = oldDSlope;\n            }\n\n            if (newLocked.end > block.timestamp) {\n                if (newLocked.end > oldLocked.end) {\n                    newDSlope -= uNew.slope;\n                    // old slope disappeared at this point\n                    slopeChanges[newLocked.end] = newDSlope;\n                }\n                // else: we recorded it already in oldDSlope\n            }\n            // Now handle user history\n            uint userEpoch = userPointEpoch[_tokenId] + 1;\n\n            userPointEpoch[_tokenId] = userEpoch;\n            uNew.ts = block.timestamp;\n            uNew.blk = block.number;\n            _userPointHistory[_tokenId][userEpoch] = uNew;\n        }\n    }\n\n    /// @notice Deposit and lock tokens for a user\n    /// @param _tokenId NFT that holds lock\n    /// @param _value Amount to deposit\n    /// @param unlockTime New time when to unlock the tokens, or 0 if unchanged\n    /// @param lockedBalance Previous locked amount / timestamp\n    /// @param depositType The type of deposit\n    function _depositFor(\n        uint _tokenId,\n        uint _value,\n        uint unlockTime,\n        LockedBalance memory lockedBalance,\n        DepositType depositType\n    ) internal {\n        LockedBalance memory _locked = lockedBalance;\n        uint supplyBefore = supply;\n\n        supply = supplyBefore + _value;\n        LockedBalance memory oldLocked;\n        (oldLocked.amount, oldLocked.end) = (_locked.amount, _locked.end);\n        // Adding to existing lock, or if a lock is expired - creating a new one\n        _locked.amount += int128(int256(_value));\n        if (unlockTime != 0) {\n            _locked.end = unlockTime;\n        }\n        locked[_tokenId] = _locked;\n\n        // Possibilities:\n        // Both old_locked.end could be current or expired (>/< block.timestamp)\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\n        // _locked.end > block.timestamp (always)\n        _checkpoint(_tokenId, oldLocked, _locked);\n\n        address from = msg.sender;\n        if (_value != 0 && depositType != DepositType.MERGE_TYPE) {\n            IERC20(token).safeTransferFrom(from, address(this), _value);\n        }\n\n        emit Deposit(\n            from,\n            _tokenId,\n            _value,\n            _locked.end,\n            depositType,\n            block.timestamp\n        );\n        emit Supply(supplyBefore, supplyBefore + _value);\n    }\n\n    function voting(uint _tokenId) external override {\n        require(msg.sender == _voter(), \"!voter\");\n        voted[_tokenId] = true;\n    }\n\n    function abstain(uint _tokenId) external override {\n        require(msg.sender == _voter(), \"!voter\");\n        voted[_tokenId] = false;\n    }\n\n    function attachToken(uint _tokenId) external override {\n        require(msg.sender == _voter(), \"!voter\");\n        attachments[_tokenId] = attachments[_tokenId] + 1;\n    }\n\n    function detachToken(uint _tokenId) external override {\n        require(msg.sender == _voter(), \"!voter\");\n        attachments[_tokenId] = attachments[_tokenId] - 1;\n    }\n\n    function merge(uint _from, uint _to) external {\n        require(attachments[_from] == 0 && !voted[_from], \"attached\");\n        require(_from != _to, \"the same\");\n        require(_isApprovedOrOwner(msg.sender, _from), \"!owner from\");\n        require(_isApprovedOrOwner(msg.sender, _to), \"!owner to\");\n\n        LockedBalance memory _locked0 = locked[_from];\n        LockedBalance memory _locked1 = locked[_to];\n        uint value0 = uint(int256(_locked0.amount));\n        uint end = _locked0.end >= _locked1.end ? _locked0.end : _locked1.end;\n\n        locked[_from] = LockedBalance(0, 0);\n        _checkpoint(_from, _locked0, LockedBalance(0, 0));\n        _burn(_from);\n        _depositFor(_to, value0, end, _locked1, DepositType.MERGE_TYPE);\n    }\n\n    function block_number() external view returns (uint) {\n        return block.number;\n    }\n\n    /// @notice Record global data to checkpoint\n    function checkpoint() external override {\n        _checkpoint(0, LockedBalance(0, 0), LockedBalance(0, 0));\n    }\n\n    /// @notice Deposit `_value` tokens for `_tokenId` and add to the lock\n    /// @dev Anyone (even a smart contract) can deposit for someone else, but\n    ///      cannot extend their locktime and deposit for a brand new user\n    /// @param _tokenId lock NFT\n    /// @param _value Amount to add to user's lock\n    function depositFor(uint _tokenId, uint _value) external override lock {\n        require(_value > 0, \"zero value\");\n        LockedBalance memory _locked = locked[_tokenId];\n        require(_locked.amount > 0, \"No existing lock found\");\n        require(\n            _locked.end > block.timestamp,\n            \"Cannot add to expired lock. Withdraw\"\n        );\n        _depositFor(_tokenId, _value, 0, _locked, DepositType.DEPOSIT_FOR_TYPE);\n    }\n\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\n    /// @param _value Amount to deposit\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\n    /// @param _to Address to deposit\n    function _createLock(\n        uint _value,\n        uint _lockDuration,\n        address _to\n    ) internal returns (uint) {\n        require(_value > 0, \"zero value\");\n        // Lock time is rounded down to weeks\n        uint unlockTime = ((block.timestamp + _lockDuration) / WEEK) * WEEK;\n        require(\n            unlockTime > block.timestamp,\n            \"Can only lock until time in the future\"\n        );\n        require(\n            unlockTime <= block.timestamp + MAX_TIME,\n            \"Voting lock can be 4 years max\"\n        );\n\n        ++tokenId;\n        uint _tokenId = tokenId;\n        _mint(_to, _tokenId);\n\n        _depositFor(\n            _tokenId,\n            _value,\n            unlockTime,\n            locked[_tokenId],\n            DepositType.CREATE_LOCK_TYPE\n        );\n        return _tokenId;\n    }\n\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lock_duration`\n    /// @param _value Amount to deposit\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\n    /// @param _to Address to deposit\n    function createLockFor(\n        uint _value,\n        uint _lockDuration,\n        address _to\n    ) external override lock returns (uint) {\n        return _createLock(_value, _lockDuration, _to);\n    }\n\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock for `_lock_duration`\n    /// @param _value Amount to deposit\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\n    function createLock(uint _value, uint _lockDuration)\n        external\n        lock\n        returns (uint)\n    {\n        return _createLock(_value, _lockDuration, msg.sender);\n    }\n\n    /// @notice Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time\n    /// @param _value Amount of tokens to deposit and add to the lock\n    function increaseAmount(uint _tokenId, uint _value) external lock {\n        LockedBalance memory _locked = locked[_tokenId];\n        require(_locked.amount > 0, \"No existing lock found\");\n        require(\n            _locked.end > block.timestamp,\n            \"Cannot add to expired lock. Withdraw\"\n        );\n        require(_isApprovedOrOwner(msg.sender, _tokenId), \"!owner\");\n        require(_value > 0, \"zero value\");\n\n        _depositFor(\n            _tokenId,\n            _value,\n            0,\n            _locked,\n            DepositType.INCREASE_LOCK_AMOUNT\n        );\n    }\n\n    /// @notice Extend the unlock time for `_tokenId`\n    /// @param _lockDuration New number of seconds until tokens unlock\n    function increaseUnlockTime(uint _tokenId, uint _lockDuration)\n        external\n        lock\n    {\n        LockedBalance memory _locked = locked[_tokenId];\n        // Lock time is rounded down to weeks\n        uint unlockTime = ((block.timestamp + _lockDuration) / WEEK) * WEEK;\n        require(_locked.amount > 0, \"Nothing is locked\");\n        require(_locked.end > block.timestamp, \"Lock expired\");\n        require(unlockTime > _locked.end, \"Can only increase lock duration\");\n        require(\n            unlockTime <= block.timestamp + MAX_TIME,\n            \"Voting lock can be 4 years max\"\n        );\n        require(_isApprovedOrOwner(msg.sender, _tokenId), \"!owner\");\n\n        _depositFor(\n            _tokenId,\n            0,\n            unlockTime,\n            _locked,\n            DepositType.INCREASE_UNLOCK_TIME\n        );\n    }\n\n    /// @notice Withdraw all tokens for `_tokenId`\n    /// @dev Only possible if the lock has expired\n    function withdraw(uint _tokenId) external lock {\n        require(_isApprovedOrOwner(msg.sender, _tokenId), \"!owner\");\n        require(attachments[_tokenId] == 0 && !voted[_tokenId], \"attached\");\n        LockedBalance memory _locked = locked[_tokenId];\n        require(block.timestamp >= _locked.end, \"The lock did not expire\");\n\n        uint value = uint(int256(_locked.amount));\n        locked[_tokenId] = LockedBalance(0, 0);\n        uint supplyBefore = supply;\n        supply = supplyBefore - value;\n\n        // old_locked can have either expired <= timestamp or zero end\n        // _locked has only 0 end\n        // Both can have >= 0 amount\n        _checkpoint(_tokenId, _locked, LockedBalance(0, 0));\n\n        IERC20(token).safeTransfer(msg.sender, value);\n\n        // Burn the NFT\n        _burn(_tokenId);\n\n        emit Withdraw(msg.sender, _tokenId, value, block.timestamp);\n        emit Supply(supplyBefore, supplyBefore - value);\n    }\n\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply!\n    // They measure the weights for the purpose of voting, so they don't represent\n    // real coins.\n\n    /// @notice Binary search to estimate timestamp for block number\n    /// @param _block Block to find\n    /// @param maxEpoch Don't go beyond this epoch\n    /// @return Approximate timestamp for block\n    function _findBlockEpoch(uint _block, uint maxEpoch)\n        internal\n        view\n        returns (uint)\n    {\n        // Binary search\n        uint _min = 0;\n        uint _max = maxEpoch;\n        for (uint i = 0; i < 128; ++i) {\n            // Will be always enough for 128-bit numbers\n            if (_min >= _max) {\n                break;\n            }\n            uint _mid = (_min + _max + 1) / 2;\n            if (_pointHistory[_mid].blk <= _block) {\n                _min = _mid;\n            } else {\n                _max = _mid - 1;\n            }\n        }\n        return _min;\n    }\n\n    /// @notice Get the current voting power for `_tokenId`\n    /// @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\n    /// @param _tokenId NFT for lock\n    /// @param _t Epoch time to return voting power at\n    /// @return User voting power\n    function _balanceOfNFT(uint _tokenId, uint _t)\n        internal\n        view\n        returns (uint)\n    {\n        uint _epoch = userPointEpoch[_tokenId];\n        if (_epoch == 0) {\n            return 0;\n        } else {\n            Point memory lastPoint = _userPointHistory[_tokenId][_epoch];\n            lastPoint.bias -=\n                lastPoint.slope *\n                int128(int256(_t) - int256(lastPoint.ts));\n            if (lastPoint.bias < 0) {\n                lastPoint.bias = 0;\n            }\n            return uint(int256(lastPoint.bias));\n        }\n    }\n\n    /// @dev Returns current token URI metadata\n    /// @param _tokenId Token ID to fetch URI for.\n    function tokenURI(uint _tokenId)\n        external\n        view\n        override\n        returns (string memory)\n    {\n        require(\n            idToOwner[_tokenId] != address(0),\n            \"Query for nonexistent token\"\n        );\n        LockedBalance memory _locked = locked[_tokenId];\n        return\n            _tokenURI(\n                _tokenId,\n                _balanceOfNFT(_tokenId, block.timestamp),\n                _locked.end,\n                uint(int256(_locked.amount))\n            );\n    }\n\n    function balanceOfNFT(uint _tokenId) external view override returns (uint) {\n        // flash NFT protection\n        if (ownershipChange[_tokenId] == block.number) {\n            return 0;\n        }\n        return _balanceOfNFT(_tokenId, block.timestamp);\n    }\n\n    function balanceOfNFTAt(uint _tokenId, uint _t)\n        external\n        view\n        returns (uint)\n    {\n        return _balanceOfNFT(_tokenId, _t);\n    }\n\n    /// @notice Measure voting power of `_tokenId` at block height `_block`\n    /// @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\n    /// @param _tokenId User's wallet NFT\n    /// @param _block Block to calculate the voting power at\n    /// @return Voting power\n    function _balanceOfAtNFT(uint _tokenId, uint _block)\n        internal\n        view\n        returns (uint)\n    {\n        // Copying and pasting totalSupply code because Vyper cannot pass by\n        // reference yet\n        require(_block <= block.number, \"only old block\");\n\n        // Binary search\n        uint _min = 0;\n        uint _max = userPointEpoch[_tokenId];\n        for (uint i = 0; i < 128; ++i) {\n            // Will be always enough for 128-bit numbers\n            if (_min >= _max) {\n                break;\n            }\n            uint _mid = (_min + _max + 1) / 2;\n            if (_userPointHistory[_tokenId][_mid].blk <= _block) {\n                _min = _mid;\n            } else {\n                _max = _mid - 1;\n            }\n        }\n\n        Point memory uPoint = _userPointHistory[_tokenId][_min];\n\n        uint maxEpoch = epoch;\n        uint _epoch = _findBlockEpoch(_block, maxEpoch);\n        Point memory point0 = _pointHistory[_epoch];\n        uint dBlock = 0;\n        uint dt = 0;\n        if (_epoch < maxEpoch) {\n            Point memory point1 = _pointHistory[_epoch + 1];\n            dBlock = point1.blk - point0.blk;\n            dt = point1.ts - point0.ts;\n        } else {\n            dBlock = block.number - point0.blk;\n            dt = block.timestamp - point0.ts;\n        }\n        uint blockTime = point0.ts;\n        if (dBlock != 0 && _block > point0.blk) {\n            blockTime += (dt * (_block - point0.blk)) / dBlock;\n        }\n\n        uPoint.bias -= uPoint.slope * int128(int256(blockTime - uPoint.ts));\n        return uint(uint128(Math.positiveInt128(uPoint.bias)));\n    }\n\n    function balanceOfAtNFT(uint _tokenId, uint _block)\n        external\n        view\n        returns (uint)\n    {\n        return _balanceOfAtNFT(_tokenId, _block);\n    }\n\n    /// @notice Calculate total voting power at some point in the past\n    /// @param point The point (bias/slope) to start search from\n    /// @param t Time to calculate the total voting power at\n    /// @return Total voting power at that time\n    function _supplyAt(Point memory point, uint t)\n        internal\n        view\n        returns (uint)\n    {\n        Point memory lastPoint = point;\n        uint ti = (lastPoint.ts / WEEK) * WEEK;\n        for (uint i = 0; i < 255; ++i) {\n            ti += WEEK;\n            int128 dSlope = 0;\n            if (ti > t) {\n                ti = t;\n            } else {\n                dSlope = slopeChanges[ti];\n            }\n            lastPoint.bias -=\n                lastPoint.slope *\n                int128(int256(ti - lastPoint.ts));\n            if (ti == t) {\n                break;\n            }\n            lastPoint.slope += dSlope;\n            lastPoint.ts = ti;\n        }\n        return uint(uint128(Math.positiveInt128(lastPoint.bias)));\n    }\n\n    /// @notice Calculate total voting power\n    /// @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\n    /// @return Total voting power\n    function totalSupplyAtT(uint t) public view returns (uint) {\n        uint _epoch = epoch;\n        Point memory lastPoint = _pointHistory[_epoch];\n        return _supplyAt(lastPoint, t);\n    }\n\n    function totalSupply() external view returns (uint) {\n        return totalSupplyAtT(block.timestamp);\n    }\n\n    /// @notice Calculate total voting power at some point in the past\n    /// @param _block Block to calculate the total voting power at\n    /// @return Total voting power at `_block`\n    function totalSupplyAt(uint _block) external view returns (uint) {\n        require(_block <= block.number, \"only old blocks\");\n        uint _epoch = epoch;\n        uint targetEpoch = _findBlockEpoch(_block, _epoch);\n\n        Point memory point = _pointHistory[targetEpoch];\n        // it is possible only for a block before the launch\n        // return 0 as more clear answer than revert\n        if (point.blk > _block) {\n            return 0;\n        }\n        uint dt = 0;\n        if (targetEpoch < _epoch) {\n            Point memory point_next = _pointHistory[targetEpoch + 1];\n            // next point block can not be the same or lower\n            dt =\n                ((_block - point.blk) * (point_next.ts - point.ts)) /\n                (point_next.blk - point.blk);\n        } else {\n            if (point.blk != block.number) {\n                dt =\n                    ((_block - point.blk) * (block.timestamp - point.ts)) /\n                    (block.number - point.blk);\n            }\n        }\n        // Now dt contains info on how far are we beyond point\n        return _supplyAt(point, point.ts + dt);\n    }\n\n    function _tokenURI(\n        uint _tokenId,\n        uint _balanceOf,\n        uint _locked_end,\n        uint _value\n    ) internal pure returns (string memory output) {\n        output = \"<svg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMinYMin meet' viewBox='0 0 350 350'><style>.base { fill: black; font-family: Impact; font-size: 50px; }</style><rect width='100%' height='100%' fill='#aaaaff' /><text x='10' y='60' class='base'>\";\n        output = string(\n            abi.encodePacked(\n                output,\n                \"token \",\n                _toString(_tokenId),\n                \"</text><text x='10' y='150' class='base'>\"\n            )\n        );\n        output = string(\n            abi.encodePacked(\n                output,\n                \"balanceOf \",\n                _toString(_balanceOf),\n                \"</text><text x='10' y='230' class='base'>\"\n            )\n        );\n        output = string(\n            abi.encodePacked(\n                output,\n                \"locked_end \",\n                _toString(_locked_end),\n                \"</text><text x='10' y='310' class='base'>\"\n            )\n        );\n        output = string(\n            abi.encodePacked(\n                output,\n                \"value \",\n                _toString(_value),\n                \"</text></svg>\"\n            )\n        );\n\n        string memory json = Base64.encode(\n            bytes(\n                string(\n                    abi.encodePacked(\n                        \"{'name': 'lock #\",\n                        _toString(_tokenId),\n                        \"', 'description': 'Voltswap locks, can be used to boost gauge yields, vote on token emission, and receive bribes', 'image': 'data:image/svg+xml;base64,\",\n                        Base64.encode(bytes(output)),\n                        \"'}\"\n                    )\n                )\n            )\n        );\n        output = string(\n            abi.encodePacked(\"data:application/json;base64,\", json)\n        );\n    }\n\n    function _toString(uint value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT license\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint temp = value;\n        uint digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    function _burn(uint _tokenId) internal {\n        address owner = ownerOf(_tokenId);\n        // Clear approval\n        approve(address(0), _tokenId);\n        // Remove token\n        _removeTokenFrom(msg.sender, _tokenId);\n        emit Transfer(owner, address(0), _tokenId);\n    }\n\n    function userPointHistory(uint _tokenId, uint _loc)\n        external\n        view\n        override\n        returns (Point memory)\n    {\n        return _userPointHistory[_tokenId][_loc];\n    }\n\n    function pointHistory(uint _loc)\n        external\n        view\n        override\n        returns (Point memory)\n    {\n        return _pointHistory[_loc];\n    }\n}\n"
        },
        "contracts/lib/Math.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nlibrary Math {\n    function max(uint a, uint b) internal pure returns (uint) {\n        return a >= b ? a : b;\n    }\n\n    function min(uint a, uint b) internal pure returns (uint) {\n        return a < b ? a : b;\n    }\n\n    function positiveInt128(int128 value) internal pure returns (int128) {\n        return value < 0 ? int128(0) : value;\n    }\n\n    function closeTo(\n        uint a,\n        uint b,\n        uint target\n    ) internal pure returns (bool) {\n        if (a > b) {\n            if (a - b <= target) {\n                return true;\n            }\n        } else {\n            if (b - a <= target) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
        },
        "contracts/lib/SafeERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.13;\n\nimport \"../interface/IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint value\n    ) internal {\n        uint newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n"
        },
        "contracts/base/Reentrancy.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nabstract contract Reentrancy {\n    /// @dev simple re-entrancy check\n    uint internal _unlocked = 1;\n\n    modifier lock() {\n        require(_unlocked == 1, \"Reentrant call\");\n        _unlocked = 2;\n        _;\n        _unlocked = 1;\n    }\n}\n"
        },
        "contracts/interface/IController.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface IController {\n    function veDist() external view returns (address);\n\n    function voter() external view returns (address);\n}\n"
        },
        "contracts/interface/IERC721Receiver.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
        },
        "contracts/interface/IVe.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface IVe {\n    enum DepositType {\n        DEPOSIT_FOR_TYPE,\n        CREATE_LOCK_TYPE,\n        INCREASE_LOCK_AMOUNT,\n        INCREASE_UNLOCK_TIME,\n        MERGE_TYPE\n    }\n\n    struct Point {\n        int128 bias;\n        int128 slope; // # -dweight / dt\n        uint ts;\n        uint blk; // block\n    }\n    /* We cannot really do block numbers per se b/c slope is per time, not per block\n     * and per block could be fairly bad b/c Ethereum changes blocktimes.\n     * What we can do is to extrapolate ***At functions */\n\n    struct LockedBalance {\n        int128 amount;\n        uint end;\n    }\n\n    function token() external view returns (address);\n\n    function balanceOfNFT(uint) external view returns (uint);\n\n    function isApprovedOrOwner(address, uint) external view returns (bool);\n\n    function createLockFor(\n        uint,\n        uint,\n        address\n    ) external returns (uint);\n\n    function userPointEpoch(uint tokenId) external view returns (uint);\n\n    function epoch() external view returns (uint);\n\n    function userPointHistory(uint tokenId, uint loc)\n        external\n        view\n        returns (Point memory);\n\n    function pointHistory(uint loc) external view returns (Point memory);\n\n    function checkpoint() external;\n\n    function depositFor(uint tokenId, uint value) external;\n\n    function attachToken(uint tokenId) external;\n\n    function detachToken(uint tokenId) external;\n\n    function voting(uint tokenId) external;\n\n    function abstain(uint tokenId) external;\n}\n"
        },
        "contracts/interface/IERC721Metadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint tokenId) external view returns (string memory);\n}\n"
        },
        "contracts/interface/IERC721.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId)\n        external\n        view\n        returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
        },
        "contracts/interface/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
        },
        "contracts/lib/Initializable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.13;\n\nimport \"./Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n"
        },
        "contracts/lib/Base64.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/// @title Base64\n/// @notice Provides a function for encoding some bytes in base64\n/// @author Brecht Devos <brecht@loopring.org>\nlibrary Base64 {\n    bytes internal constant TABLE =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /// @notice Encodes some bytes to the base64 representation\n    function encode(bytes memory data) internal pure returns (string memory) {\n        uint len = data.length;\n        if (len == 0) return \"\";\n\n        // multiply by 4/3 rounded up\n        uint encodedLen = 4 * ((len + 2) / 3);\n\n        // Add some extra buffer at the end\n        bytes memory result = new bytes(encodedLen + 32);\n\n        bytes memory table = TABLE;\n\n        assembly {\n            let tablePtr := add(table, 1)\n            let resultPtr := add(result, 32)\n\n            for {\n                let i := 0\n            } lt(i, len) {\n\n            } {\n                i := add(i, 3)\n                let input := and(mload(add(data, i)), 0xffffff)\n\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\n                )\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\n                )\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\n                )\n                out := shl(224, out)\n\n                mstore(resultPtr, out)\n\n                resultPtr := add(resultPtr, 4)\n            }\n\n            switch mod(len, 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n\n            mstore(result, encodedLen)\n        }\n\n        return string(result);\n    }\n}\n"
        },
        "contracts/lib/Address.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.13;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n        (bool success, bytes memory returndata) = target.call(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n}\n"
        },
        "contracts/interface/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "": [
                    "ast"
                ],
                "*": [
                    "abi",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.legacyAssembly",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "evm.gasEstimates",
                    "evm.assembly"
                ]
            }
        }
    }
}